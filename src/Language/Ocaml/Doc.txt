The Language ocaml
BNF Converter


%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of ocaml==

===Literals===













































AMPERAMPER literals are recognized by the regular expression
`````{"&&"}`````

AMPERSAND literals are recognized by the regular expression
`````'&'`````

BANG literals are recognized by the regular expression
`````'!'`````

BARBAR literals are recognized by the regular expression
`````{"||"}`````

COLONEQUAL literals are recognized by the regular expression
`````{":="}`````

EQUAL literals are recognized by the regular expression
`````'='`````

BANGEQUAL literals are recognized by the regular expression
`````{"!="}`````

GREATER literals are recognized by the regular expression
`````'>'`````

LESS literals are recognized by the regular expression
`````'<'`````

MINUS literals are recognized by the regular expression
`````'-'`````

MINUSDOT literals are recognized by the regular expression
`````{"-."}`````

OR literals are recognized by the regular expression
`````{"or"}`````

PERCENT literals are recognized by the regular expression
`````'%'`````

PLUS literals are recognized by the regular expression
`````'+'`````

PLUSDOT literals are recognized by the regular expression
`````{"+."}`````

PLUSEQ literals are recognized by the regular expression
`````{"+="}`````

STAR literals are recognized by the regular expression
`````'*'`````

RELOP literals are recognized by the regular expression
`````["$&<=>|"] ["!$%&*+-./:<=>?@^|~"]*`````

CONCATOP literals are recognized by the regular expression
`````["@^"] ["!$%&*+-./:<=>?@^|~"]*`````

PLUSMINUSOP literals are recognized by the regular expression
`````["+-"] ["!$%&*+-./:<=>?@^|~"]* | {"lor"} | {"lxor"}`````

MULTDIVOP literals are recognized by the regular expression
`````["%*/"] ["!$%&*+-./:<=>?@^|~"]* | {"mod"} | {"land"}`````

POWOP literals are recognized by the regular expression
`````{"**"} ["!$%&*+-./:<=>?@^|~"]* | {"lsl"} | {"lsr"} | {"asr"}`````

DOTOP literals are recognized by the regular expression
`````'.' ["!$%&*+-/:=>?@^|"] ["!$%&*+-./:<=>?@^|~"]*`````

LETOP literals are recognized by the regular expression
`````{"let"} ["$&*+-/<=>@^|"] ["!$%&*+-/:=>?@^|"]*`````

ANDOP literals are recognized by the regular expression
`````{"and"} ["$&*+-/<=>@^|"] ["!$%&*+-/:=>?@^|"]*`````

HASHOP literals are recognized by the regular expression
`````'#' ["!#$%&*+-./:<=>?@^|~"]+`````

PREFIXOP literals are recognized by the regular expression
`````'!' ["!#$%&*+-./:<=>?@^|~"]+ | ["?~"] ["!#$%&*+-./:<=>?@^|~"]+`````

DecimalLiteral literals are recognized by the regular expression
`````digit ('_' | digit)*`````

DecimalLiteralModifier literals are recognized by the regular expression
`````digit ('_' | digit)* ["GHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz"]`````

HexLiteral literals are recognized by the regular expression
`````'0' ["Xx"] (digit | letter) ('_' | digit | letter)*`````

HexLiteralModifier literals are recognized by the regular expression
`````'0' ["Xx"] (digit | letter) ('_' | digit | letter)* ["GHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz"]`````

OctLiteral literals are recognized by the regular expression
`````'0' ["Oo"] ["01234567"] ["01234567_"]*`````

OctLiteralModifier literals are recognized by the regular expression
`````'0' ["Oo"] ["01234567"] ["01234567_"]* ["GHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz"]`````

BinLiteral literals are recognized by the regular expression
`````'0' ["Bb"] ["01"] ["01_"]*`````

BinLiteralModifier literals are recognized by the regular expression
`````'0' ["Bb"] ["01"] ["01_"]* ["GHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz"]`````

FLOAT literals are recognized by the regular expression
`````digit ('_' | digit)* ('.' ('_' | digit)*)? (["Ee"] ["+-"]? digit ('_' | digit)*)? | '0' ["Xx"] (digit | letter) ('_' | digit | letter)* ('.' ('_' | digit | letter)*)? (["Pp"] ["+-"] digit ('_' | digit)*)?`````

CHAR literals are recognized by the regular expression
`````''' (char - ["'\"] | '\' ([" "'\bnrt"] | digit digit digit | 'x' (digit | letter) (digit | letter) | 'o' ["0123"] ["01234567"] ["01234567"])) '''`````

STRING literals are recognized by the regular expression
`````'"' (char - [""\"] | '\' ([" "'\bnrt"] | digit digit digit | 'x' (digit | letter) (digit | letter) | 'o' ["0123"] ["01234567"] ["01234567"] | {"u{"} (digit | letter)+ '}') | '
' | '\' ["
"] ["	 "]*)* '"'`````

QUOTED_STRING_EXPR literals are recognized by the regular expression
`````{"{%"} letter ('_' | digit | letter)* ('.' letter ('_' | digit | letter)*)* '|'`````

QUOTED_STRING_ITEM literals are recognized by the regular expression
`````{"{%%"} letter ('_' | digit | letter)* ('.' letter ('_' | digit | letter)*)* '|'`````

LIDENT literals are recognized by the regular expression
`````('_' | lower) (["'_"] | digit | letter)*`````

UIDENT literals are recognized by the regular expression
`````upper (["'_"] | digit | letter)*`````

LABEL literals are recognized by the regular expression
`````'~' ('_' | digit | letter) ('_' | digit | letter)* ':'`````

OPTLABEL literals are recognized by the regular expression
`````'?' ('_' | digit | letter) ('_' | digit | letter)* ':'`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in ocaml are the following:
  | ``and`` | ``as`` | ``assert`` | ``begin``
  | ``class`` | ``constraint`` | ``do`` | ``done``
  | ``downto`` | ``else`` | ``end`` | ``exception``
  | ``external`` | ``false`` | ``for`` | ``fun``
  | ``function`` | ``functor`` | ``if`` | ``in``
  | ``include`` | ``inherit`` | ``initializer`` | ``lazy``
  | ``let`` | ``match`` | ``method`` | ``module``
  | ``mutable`` | ``new`` | ``nonrec`` | ``object``
  | ``of`` | ``open`` | ``private`` | ``rec``
  | ``sig`` | ``struct`` | ``then`` | ``to``
  | ``true`` | ``try`` | ``type`` | ``val``
  | ``virtual`` | ``when`` | ``while`` | ``with``

The symbols used in ocaml are the following:
  | # | ;; | ( | )
  | : | _ | -> | :>
  | [ | ] | . | ?
  | ; | ~ | :: | ,
  | <- | { | } | [|
  | |] | {< | >} | |
  | .. | ' | +! | !+
  | -! | !- | [> | [<
  | ` | [@ | [@@ | [@@@
  | [% | [%% |  |

===Comments===
There are no single-line comments in the grammar.There are no multiple-line comments in the grammar.

==The syntactic structure of ocaml==
Non-terminals are enclosed between < and >.
The symbols -> (production),  **|**  (union)
and **eps** (empty rule) belong to the BNF notation.
All other symbols are terminals.

  | //INT// | -> | //DecimalLiteralModifier//
  |  |  **|**  | //DecimalLiteral//
  |  |  **|**  | //HexLiteralModifier//
  |  |  **|**  | //HexLiteral//
  |  |  **|**  | //OctLiteralModifier//
  |  |  **|**  | //OctLiteral//
  |  |  **|**  | //BinLiteralModifier//
  |  |  **|**  | //BinLiteral//
  | //Implementation// | -> | ``#`` //DecimalLiteral// //STRING// //Structure//
  |  |  **|**  | //Structure//
  | //Interface// | -> | //Signature//
  | //[StructureItem]// | -> | **eps**
  |  |  **|**  | //StructureItem// //[StructureItem]//
  | //ToplevelPhrase// | -> | //SeqExpr// //[PostItemAttribute]// ``;;``
  |  |  **|**  | //[StructureItem]// ``;;``
  |  |  **|**  | //ToplevelDirective// ``;;``
  | //UseFile// | -> | //[UseFileElement]//
  |  |  **|**  | //SeqExpr// //[PostItemAttribute]// //[UseFileElement]//
  | //[UseFileElement]// | -> | **eps**
  |  |  **|**  | //UseFileElement// //[UseFileElement]//
  | //UseFileElement// | -> | ``;;``
  |  |  **|**  | ``;;`` //SeqExpr// //[PostItemAttribute]//
  |  |  **|**  | //StructureItem//
  |  |  **|**  | //ToplevelDirective//
  | //[FunctorArg]// | -> | //FunctorArg//
  |  |  **|**  | //FunctorArg// //[FunctorArg]//
  | //FunctorArg// | -> | ``(`` ``)``
  |  |  **|**  | ``(`` //ModuleName// ``:`` //ModuleType// ``)``
  | //ModuleName// | -> | //UIDENT//
  |  |  **|**  | ``_``
  | //ModuleExpr// | -> | ``struct`` //[Attribute]// //Structure// ``end``
  |  |  **|**  | ``functor`` //[Attribute]// //[FunctorArg]// ``->`` //ModuleExpr//
  |  |  **|**  | //ParenModuleExpr//
  |  |  **|**  | //ModuleExpr// //Attribute//
  |  |  **|**  | //ModLongident//
  |  |  **|**  | //ModuleExpr// //ParenModuleExpr//
  |  |  **|**  | //ModuleExpr// ``(`` ``)``
  |  |  **|**  | //Extension//
  | //ParenModuleExpr// | -> | ``(`` //ModuleExpr// ``:`` //ModuleType// ``)``
  |  |  **|**  | ``(`` //ModuleExpr// ``)``
  |  |  **|**  | ``(`` ``val`` //[Attribute]// //ExprColonPackageType// ``)``
  | //ExprColonPackageType// | -> | //Expr//
  |  |  **|**  | //Expr// ``:`` //ModuleType//
  |  |  **|**  | //Expr// ``:`` //ModuleType// ``:>`` //ModuleType//
  |  |  **|**  | //Expr// ``:>`` //ModuleType//
  | //Structure// | -> | //SeqExpr// //[PostItemAttribute]// //[StructureElement]//
  |  |  **|**  | //[StructureElement]//
  | //[StructureElement]// | -> | **eps**
  |  |  **|**  | //StructureElement// //[StructureElement]//
  |  |  **|**  | ``;;`` //[StructureElement]//
  | //StructureElement// | -> | ``;;`` //SeqExpr// //[PostItemAttribute]//
  |  |  **|**  | //StructureItem//
  | //StructureItem// | -> | //LetBindingsExt//
  |  |  **|**  | //ItemExtension// //[PostItemAttribute]//
  |  |  **|**  | //FloatingAttribute//
  |  |  **|**  | //PrimitiveDeclaration//
  |  |  **|**  | //ValueDescription//
  |  |  **|**  | //TypeDeclaration// //[AndTypeDeclaration]//
  |  |  **|**  | ``type`` //Ext// //[Attribute]// //TypeParameters// //TypeLongident// //PLUSEQ// //PrivateFlag// //BarLlistExtensionConstructor// //[PostItemAttribute]//
  |  |  **|**  | //StrExceptionDeclaration//
  |  |  **|**  | ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// //[PostItemAttribute]//
  |  |  **|**  | ``module`` //Ext// //[Attribute]// ``rec`` //ModuleName// //ModuleBindingBody// //[PostItemAttribute]// //[AndModuleBinding]//
  |  |  **|**  | //ModuleTypeDeclaration//
  |  |  **|**  | //OpenDeclaration//
  |  |  **|**  | ``class`` //Ext// //[Attribute]// //VirtualFlag// //FormalClassParameters// //LIDENT// //ClassFunBinding// //[PostItemAttribute]// //[AndClassDeclaration]//
  |  |  **|**  | //ClassTypeDeclarations//
  |  |  **|**  | ``include`` //Ext// //[Attribute]// //ModuleExpr// //[PostItemAttribute]//
  | //ModuleBindingBody// | -> | //EQUAL// //ModuleExpr//
  |  |  **|**  | ``:`` //ModuleType// //EQUAL// //ModuleExpr//
  |  |  **|**  | //FunctorArg// //ModuleBindingBody//
  | //[AndModuleBinding]// | -> | **eps**
  |  |  **|**  | ``and`` //AndModuleBinding// //[AndModuleBinding]//
  | //AndModuleBinding// | -> | //[Attribute]// //ModuleName// //ModuleBindingBody// //[PostItemAttribute]//
  | //OptionalModuleType// | -> | **eps**
  |  |  **|**  | //EQUAL// //ModuleType//
  | //ModuleTypeDeclaration// | -> | ``module`` ``type`` //Ext// //[Attribute]// //OCamlIdent// //OptionalModuleType// //[PostItemAttribute]//
  | //OpenDeclaration// | -> | ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// //[PostItemAttribute]//
  | //OpenDescription// | -> | ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModExtLongident// //[PostItemAttribute]//
  | //[WithConstraint]// | -> | //WithConstraint//
  |  |  **|**  | //WithConstraint// ``and`` //[WithConstraint]//
  | //ModuleType// | -> | ``sig`` //[Attribute]// //Signature// ``end``
  |  |  **|**  | ``functor`` //[Attribute]// //[FunctorArg]// ``->`` //ModuleType//
  |  |  **|**  | ``module`` ``type`` ``of`` //[Attribute]// //ModuleExpr//
  |  |  **|**  | ``(`` //ModuleType// ``)``
  |  |  **|**  | //ModuleType// //Attribute//
  |  |  **|**  | //ModLongident//
  |  |  **|**  | ``(`` ``)`` ``->`` //ModuleType//
  |  |  **|**  | //ModuleType// ``->`` //ModuleType//
  |  |  **|**  | //ModuleType// ``with`` //[WithConstraint]//
  |  |  **|**  | //Extension//
  | //Signature// | -> | //[SignatureElement]//
  | //[SignatureElement]// | -> | **eps**
  |  |  **|**  | //SignatureElement// //[SignatureElement]//
  | //SignatureElement// | -> | ``;;``
  |  |  **|**  | //SignatureItem//
  | //SignatureItem// | -> | //ItemExtension// //[PostItemAttribute]//
  |  |  **|**  | //FloatingAttribute//
  |  |  **|**  | //ValueDescription//
  |  |  **|**  | //PrimitiveDeclaration//
  |  |  **|**  | //TypeDeclaration// //[AndTypeDeclaration]//
  |  |  **|**  | //TypeSubstDeclarations//
  |  |  **|**  | ``type`` //Ext// //[Attribute]// //TypeParameters// //TypeLongident// //PLUSEQ// //PrivateFlag// //BarLlistExtensionConstructorDeclaration// //[PostItemAttribute]//
  |  |  **|**  | //SigExceptionDeclaration//
  |  |  **|**  | ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleDeclarationBody// //[PostItemAttribute]//
  |  |  **|**  | ``module`` //Ext// //[Attribute]// //ModuleName// //EQUAL// //ModLongident// //[PostItemAttribute]//
  |  |  **|**  | //ModuleSubst//
  |  |  **|**  | ``module`` //Ext// //[Attribute]// ``rec`` //ModuleName// ``:`` //ModuleType// //[PostItemAttribute]// //[AndModuleDeclaration]//
  |  |  **|**  | //ModuleTypeDeclaration//
  |  |  **|**  | //ModuleTypeSubst//
  |  |  **|**  | //OpenDescription//
  |  |  **|**  | ``include`` //Ext// //[Attribute]// //ModuleType// //[PostItemAttribute]//
  |  |  **|**  | ``class`` //Ext// //[Attribute]// //VirtualFlag// //FormalClassParameters// //LIDENT// ``:`` //ClassType// //[PostItemAttribute]// //[AndClassDescription]//
  |  |  **|**  | //ClassTypeDeclarations//
  | //ModuleDeclarationBody// | -> | ``:`` //ModuleType//
  |  |  **|**  | //FunctorArg// //ModuleDeclarationBody//
  | //ModuleSubst// | -> | ``module`` //Ext// //[Attribute]// //UIDENT// //COLONEQUAL// //ModExtLongident// //[PostItemAttribute]//
  | //AndModuleDeclaration// | -> | //[Attribute]// //ModuleName// ``:`` //ModuleType// //[PostItemAttribute]//
  | //[AndModuleDeclaration]// | -> | **eps**
  |  |  **|**  | //AndModuleDeclaration//
  |  |  **|**  | //AndModuleDeclaration// ``and`` //[AndModuleDeclaration]//
  | //ModuleTypeSubst// | -> | ``module`` ``type`` //Ext// //[Attribute]// //OCamlIdent// //COLONEQUAL// //ModuleType// //[PostItemAttribute]//
  | //AndClassDeclaration// | -> | ``and`` //[Attribute]// //VirtualFlag// //FormalClassParameters// //LIDENT// //ClassFunBinding// //[PostItemAttribute]//
  | //[AndClassDeclaration]// | -> | **eps**
  |  |  **|**  | //AndClassDeclaration// //[AndClassDeclaration]//
  | //ClassFunBinding// | -> | //EQUAL// //ClassExpr//
  |  |  **|**  | ``:`` //ClassType// //EQUAL// //ClassExpr//
  |  |  **|**  | //LabeledSimplePattern// //ClassFunBinding//
  | //FormalClassParameters// | -> | **eps**
  |  |  **|**  | ``[`` //[TypeParameter]// ``]``
  | //ClassExpr// | -> | //ClassSimpleExpr//
  |  |  **|**  | ``fun`` //[Attribute]// //ClassFunDef//
  |  |  **|**  | //LetBindingsNoExt// ``in`` //ClassExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //[Attribute]// //ModLongident// ``in`` //ClassExpr//
  |  |  **|**  | //ClassExpr// //Attribute//
  |  |  **|**  | //ClassSimpleExpr// //[LabeledSimpleExpr]//
  |  |  **|**  | //Extension//
  | //ClassSimpleExpr// | -> | ``(`` //ClassExpr// ``)``
  |  |  **|**  | //ClassLongident//
  |  |  **|**  | ``[`` //[CoreType]// ``]`` //ClassLongident//
  |  |  **|**  | ``(`` //ClassExpr// ``:`` //ClassType// ``)``
  |  |  **|**  | ``object`` //[Attribute]// //ClassSelfPattern// //[ClassField]// ``end``
  | //ClassFunDef// | -> | //LabeledSimplePattern// ``->`` //ClassExpr//
  |  |  **|**  | //LabeledSimplePattern// //ClassFunDef//
  | //ClassSelfPattern// | -> | ``(`` //Pattern// ``)``
  |  |  **|**  | ``(`` //Pattern// ``:`` //CoreType// ``)``
  |  |  **|**  | **eps**
  | //[ClassField]// | -> | **eps**
  |  |  **|**  | //ClassField// //[ClassField]//
  | //OptionalAs// | -> | **eps**
  |  |  **|**  | ``as`` //LIDENT//
  | //ClassField// | -> | ``inherit`` //OverrideFlag// //[Attribute]// //ClassExpr// //OptionalAs// //[PostItemAttribute]//
  |  |  **|**  | ``val`` //Value// //[PostItemAttribute]//
  |  |  **|**  | ``method`` //Method_// //[PostItemAttribute]//
  |  |  **|**  | ``constraint`` //[Attribute]// //CoreType// //EQUAL// //CoreType// //[PostItemAttribute]//
  |  |  **|**  | ``initializer`` //[Attribute]// //SeqExpr// //[PostItemAttribute]//
  |  |  **|**  | //ItemExtension// //[PostItemAttribute]//
  |  |  **|**  | //FloatingAttribute//
  | //Value// | -> | //NoOverrideFlag// //[Attribute]// //VirtualWithMutableFlag// //LIDENT// ``:`` //CoreType//
  |  |  **|**  | //OverrideFlag// //[Attribute]// //MutableFlag// //LIDENT// //EQUAL// //SeqExpr//
  |  |  **|**  | //OverrideFlag// //[Attribute]// //MutableFlag// //LIDENT// //TypeConstraint// //EQUAL// //SeqExpr//
  | //Method_// | -> | //NoOverrideFlag// //[Attribute]// //VirtualWithPrivateFlag// //LIDENT// ``:`` //PolyType//
  |  |  **|**  | //OverrideFlag// //[Attribute]// //PrivateFlag// //LIDENT// //StrictBinding//
  |  |  **|**  | //OverrideFlag// //[Attribute]// //PrivateFlag// //LIDENT// ``:`` //PolyType// //EQUAL// //SeqExpr//
  |  |  **|**  | //OverrideFlag// //[Attribute]// //PrivateFlag// //LIDENT// ``:`` ``type`` //[LIDENT]// ``.`` //CoreType// //EQUAL// //SeqExpr//
  | //ClassType// | -> | //ClassSignature//
  |  |  **|**  | //OptLabel// //TupleType// ``->`` //ClassType//
  |  |  **|**  | ``?`` //LIDENT// ``:`` //TupleType// ``->`` //ClassType//
  |  |  **|**  | //LIDENT// ``:`` //TupleType// ``->`` //ClassType//
  |  |  **|**  | //TupleType// ``->`` //ClassType//
  | //ClassSignature// | -> | //CltyLongident//
  |  |  **|**  | ``[`` //[CoreType]// ``]`` //CltyLongident//
  |  |  **|**  | //Extension//
  |  |  **|**  | ``object`` //[Attribute]// //ClassSelfType// //[ClassSigField]// ``end``
  |  |  **|**  | //ClassSignature// //Attribute//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //[Attribute]// //ModLongident// ``in`` //ClassSignature//
  | //ClassSelfType// | -> | ``(`` //CoreType// ``)``
  |  |  **|**  | **eps**
  | //ClassSigField// | -> | ``inherit`` //[Attribute]// //ClassSignature// //[PostItemAttribute]//
  |  |  **|**  | ``val`` //[Attribute]// //MutableVirtualFlags// //LIDENT// ``:`` //CoreType// //[PostItemAttribute]//
  |  |  **|**  | ``method`` //[Attribute]// //PrivateVirtualFlags// //LIDENT// ``:`` //PolyType// //[PostItemAttribute]//
  |  |  **|**  | ``constraint`` //[Attribute]// //ConstrainField// //[PostItemAttribute]//
  |  |  **|**  | //ItemExtension// //[PostItemAttribute]//
  |  |  **|**  | //FloatingAttribute//
  | //ConstrainField// | -> | //CoreType// //EQUAL// //CoreType//
  | //[ClassSigField]// | -> | **eps**
  |  |  **|**  | //ClassSigField// //[ClassSigField]//
  | //AndClassDescription// | -> | ``and`` //[Attribute]// //VirtualFlag// //FormalClassParameters// //LIDENT// ``:`` //ClassType// //[PostItemAttribute]//
  | //[AndClassDescription]// | -> | **eps**
  |  |  **|**  | //AndClassDescription// //[AndClassDescription]//
  | //ClassTypeDeclarations// | -> | ``class`` ``type`` //Ext// //[Attribute]// //VirtualFlag// //FormalClassParameters// //LIDENT// //EQUAL// //ClassSignature// //[PostItemAttribute]// //[AndClassTypeDeclaration]//
  | //AndClassTypeDeclaration// | -> | //[Attribute]// //VirtualFlag// //FormalClassParameters// //LIDENT// //EQUAL// //ClassSignature// //[PostItemAttribute]//
  | //[AndClassTypeDeclaration]// | -> | **eps**
  |  |  **|**  | //AndClassTypeDeclaration//
  |  |  **|**  | //AndClassTypeDeclaration// ``and`` //[AndClassTypeDeclaration]//
  | //SeqExpr// | -> | //FunExpr1//
  |  |  **|**  | //FunExpr1// ``;``
  |  |  **|**  | //FunExpr1// ``;`` //SeqExpr//
  |  |  **|**  | //FunExpr1// ``;`` //PERCENT// //[AttrId]// //SeqExpr//
  |  |  **|**  | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  | //LabeledSimplePattern// | -> | ``?`` ``(`` //LabelLetPattern// ``)``
  |  |  **|**  | ``?`` ``(`` //LabelLetPattern// //EQUAL// //SeqExpr// ``)``
  |  |  **|**  | ``?`` //LIDENT//
  |  |  **|**  | //OPTLABEL// ``(`` //LetPattern// ``)``
  |  |  **|**  | //OPTLABEL// ``(`` //LetPattern// //EQUAL// //SeqExpr// ``)``
  |  |  **|**  | //OPTLABEL// //PatternVar//
  |  |  **|**  | ``~`` ``(`` //LabelLetPattern// ``)``
  |  |  **|**  | ``~`` //LIDENT//
  |  |  **|**  | //LABEL// //SimplePattern//
  |  |  **|**  | //SimplePattern//
  | //PatternVar// | -> | //LIDENT//
  |  |  **|**  | ``_``
  | //LabelLetPattern// | -> | //LIDENT//
  |  |  **|**  | //LIDENT// ``:`` //CoreType//
  | //LetPattern// | -> | //Pattern//
  |  |  **|**  | //Pattern// ``:`` //CoreType//
  | //QualifiedDotop// | -> | //DOTOP//
  |  |  **|**  | ``.`` //ModLongident// //DOTOP//
  | //OptionalAtomicTypeAnnotation// | -> | **eps**
  |  |  **|**  | ``:`` //AtomicType//
  | //FunExpr15// | -> | //SimpleExpr16// //[LabeledSimpleExpr]//
  |  |  **|**  | //ConstrLongident// //SimpleExpr16//
  |  |  **|**  | //NameTag// //SimpleExpr16//
  |  |  **|**  | ``assert`` //Ext// //[Attribute]// //SimpleExpr16//
  |  |  **|**  | ``lazy`` //Ext// //[Attribute]// //SimpleExpr16//
  |  |  **|**  | //SimpleExpr16//
  | //FunExpr14// | -> | //Subtractive// //Expr15//
  |  |  **|**  | //Additive// //Expr15//
  |  |  **|**  | //FunExpr15//
  | //FunExpr13// | -> | //FunExpr14// //POWOP// //Expr13//
  |  |  **|**  | //FunExpr14//
  | //FunExpr12// | -> | //FunExpr12// //MULTDIVOP// //Expr13//
  |  |  **|**  | //FunExpr12// //STAR// //Expr13//
  |  |  **|**  | //FunExpr12// //PERCENT// //Expr13//
  |  |  **|**  | //FunExpr13//
  | //FunExpr11// | -> | //FunExpr11// //PLUSMINUSOP// //Expr12//
  |  |  **|**  | //FunExpr11// //PLUS// //Expr12//
  |  |  **|**  | //FunExpr11// //PLUSDOT// //Expr12//
  |  |  **|**  | //FunExpr11// //PLUSEQ// //Expr12//
  |  |  **|**  | //FunExpr11// //MINUS// //Expr12//
  |  |  **|**  | //FunExpr11// //MINUSDOT// //Expr12//
  |  |  **|**  | //FunExpr12//
  | //FunExpr10// | -> | //FunExpr11// ``::`` //Expr10//
  |  |  **|**  | //FunExpr11//
  | //FunExpr9// | -> | //FunExpr10// //CONCATOP// //Expr9//
  |  |  **|**  | //FunExpr10//
  | //FunExpr8// | -> | //FunExpr8// //RELOP// //Expr9//
  |  |  **|**  | //FunExpr8// //EQUAL// //Expr9//
  |  |  **|**  | //FunExpr8// //LESS// //Expr9//
  |  |  **|**  | //FunExpr8// //GREATER// //Expr9//
  |  |  **|**  | //FunExpr8// //BANGEQUAL// //Expr9//
  |  |  **|**  | //FunExpr9//
  | //FunExpr7// | -> | //FunExpr8// //AMPERSAND// //Expr7//
  |  |  **|**  | //FunExpr8// //AMPERAMPER// //Expr7//
  |  |  **|**  | //FunExpr8//
  | //FunExpr6// | -> | //FunExpr7// //OR// //Expr6//
  |  |  **|**  | //FunExpr7// //BARBAR// //Expr6//
  |  |  **|**  | //FunExpr7//
  | //FunExpr5// | -> | //Expr6// ``,`` //[ExprComma]//
  |  |  **|**  | //FunExpr6//
  | //FunExpr4// | -> | //LIDENT// ``<-`` //Expr//
  |  |  **|**  | //FunExpr5// //COLONEQUAL// //Expr//
  |  |  **|**  | //SimpleExpr17// ``.`` //LabelLongident// ``<-`` //Expr//
  |  |  **|**  | //SimpleExpr17// ``.`` ``(`` //SeqExpr// ``)`` ``<-`` //Expr//
  |  |  **|**  | //SimpleExpr17// ``.`` ``[`` //SeqExpr// ``]`` ``<-`` //Expr//
  |  |  **|**  | //SimpleExpr17// ``.`` ``{`` //SeqExpr// ``}`` ``<-`` //Expr//
  |  |  **|**  | //SimpleExpr17// //QualifiedDotop// ``(`` //[Expr]// ``)`` ``<-`` //Expr//
  |  |  **|**  | //SimpleExpr17// //QualifiedDotop// ``[`` //[Expr]// ``]`` ``<-`` //Expr//
  |  |  **|**  | //SimpleExpr17// //QualifiedDotop// ``{`` //[Expr]// ``}`` ``<-`` //Expr//
  |  |  **|**  | //FunExpr5//
  | //FunExpr3// | -> | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr4//
  | //FunExpr1// | -> | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``while`` //Ext// //[Attribute]// //SeqExpr// ``do`` //SeqExpr// ``done``
  |  |  **|**  | ``for`` //Ext// //[Attribute]// //Pattern// //EQUAL// //SeqExpr// //DirectionFlag// //SeqExpr// ``do`` //SeqExpr// ``done``
  |  |  **|**  | //FunExpr2//
  | //FunExpr2// | -> | //FunExpr3//
  | //Expr15// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr15//
  | //Expr13// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr13//
  | //Expr12// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr12//
  | //Expr11// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr11//
  | //Expr10// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr10//
  | //Expr9// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr9//
  | //Expr7// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr7//
  | //Expr6// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //LetBindingsExt// ``in`` //SeqExpr//
  |  |  **|**  | //LETOP// //LetopBindings// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``module`` //Ext// //[Attribute]// //ModuleName// //ModuleBindingBody// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// ``in`` //SeqExpr//
  |  |  **|**  | ``let`` ``open`` //OverrideFlag// //Ext// //[Attribute]// //ModuleExpr// ``in`` //SeqExpr//
  |  |  **|**  | ``fun`` //Ext// //[Attribute]// //[FunParam]// //OptionalAtomicTypeAnnotation// ``->`` //FunBody//
  |  |  **|**  | ``match`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``try`` //Ext// //[Attribute]// //SeqExpr// ``with`` //[MatchCase]//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr// ``else`` //Expr//
  |  |  **|**  | ``if`` //Ext// //[Attribute]// //SeqExpr// ``then`` //Expr//
  |  |  **|**  | //FunExpr6//
  | //Expr// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //FunExpr1//
  | //SimpleExpr19// | -> | ``(`` //SeqExpr// ``)``
  |  |  **|**  | ``(`` //SeqExpr// //TypeConstraint// ``)``
  |  |  **|**  | //ValLongident//
  |  |  **|**  | //Constant//
  |  |  **|**  | //ConstrLongident//
  |  |  **|**  | //NameTag//
  |  |  **|**  | ``[`` //[Expr]// ``]``
  |  |  **|**  | ``{`` //RecordExprContent// ``}``
  |  |  **|**  | ``[|`` ``|]``
  |  |  **|**  | ``[|`` //[Expr]// ``|]``
  |  |  **|**  | ``{<`` ``>}``
  |  |  **|**  | ``{<`` //[ObjectExprField]// ``>}``
  |  |  **|**  | //ModLongident// ``.`` ``(`` ``)``
  |  |  **|**  | //ModLongident// ``.`` ``(`` //SeqExpr// ``)``
  |  |  **|**  | //ModLongident// ``.`` ``[`` ``]``
  |  |  **|**  | //ModLongident// ``.`` ``[`` //[Expr]// ``]``
  |  |  **|**  | //ModLongident// ``.`` ``{`` //RecordExprContent// ``}``
  |  |  **|**  | //ModLongident// ``.`` ``[|`` ``|]``
  |  |  **|**  | //ModLongident// ``.`` ``[|`` //[Expr]// ``|]``
  |  |  **|**  | //ModLongident// ``.`` ``{<`` //[ObjectExprField]// ``>}``
  |  |  **|**  | //ModLongident// ``.`` ``(`` ``module`` //Ext// //[Attribute]// //ModuleExpr// ``:`` //ModuleType// ``)``
  |  |  **|**  | ``begin`` //Ext// //[Attribute]// //SeqExpr// ``end``
  |  |  **|**  | ``begin`` //Ext// //[Attribute]// ``end``
  |  |  **|**  | ``new`` //Ext// //[Attribute]// //ClassLongident//
  |  |  **|**  | ``(`` ``module`` //Ext// //[Attribute]// //ModuleExpr// ``)``
  |  |  **|**  | ``(`` ``module`` //Ext// //[Attribute]// //ModuleExpr// ``:`` //ModuleType// ``)``
  |  |  **|**  | ``object`` //Ext// //[Attribute]// //ClassSelfPattern// //[ClassField]// ``end``
  |  |  **|**  | //Extension//
  | //SimpleExpr18// | -> | //PREFIXOP// //SimpleExpr19//
  |  |  **|**  | //BANG// //SimpleExpr19//
  |  |  **|**  | //SimpleExpr19// //Attribute//
  |  |  **|**  | //SimpleExpr19//
  | //SimpleExpr17// | -> | //SimpleExpr17// ``.`` //LabelLongident//
  |  |  **|**  | //SimpleExpr17// ``.`` ``(`` //SeqExpr// ``)``
  |  |  **|**  | //SimpleExpr17// ``.`` ``[`` //SeqExpr// ``]``
  |  |  **|**  | //SimpleExpr17// ``.`` ``{`` //SeqExpr// ``}``
  |  |  **|**  | //SimpleExpr17// //QualifiedDotop// ``(`` //[Expr]// ``)``
  |  |  **|**  | //SimpleExpr17// //QualifiedDotop// ``[`` //[Expr]// ``]``
  |  |  **|**  | //SimpleExpr17// //QualifiedDotop// ``{`` //[Expr]// ``}``
  |  |  **|**  | //SimpleExpr18//
  | //SimpleExpr16// | -> | //SimpleExpr16// ``#`` //LIDENT//
  |  |  **|**  | //SimpleExpr16// //HASHOP// //SimpleExpr17//
  |  |  **|**  | //SimpleExpr17//
  | //SimpleExpr// | -> | //SimpleExpr16//
  | //[LabeledSimpleExpr]// | -> | //LabeledSimpleExpr//
  |  |  **|**  | //LabeledSimpleExpr// //[LabeledSimpleExpr]//
  | //LabeledSimpleExpr// | -> | //SimpleExpr16//
  |  |  **|**  | //LABEL// //SimpleExpr16//
  |  |  **|**  | ``~`` //LIDENT//
  |  |  **|**  | ``~`` ``(`` //LIDENT// //TypeConstraint// ``)``
  |  |  **|**  | ``?`` //LIDENT//
  |  |  **|**  | //OPTLABEL// //SimpleExpr16//
  | //LetBindingBodyNoPunning// | -> | //ValIdent// //StrictBinding//
  |  |  **|**  | //ValIdent// //TypeConstraint// //EQUAL// //SeqExpr//
  |  |  **|**  | //ValIdent// ``:`` //[TypeVar]// ``.`` //CoreType// //EQUAL// //SeqExpr//
  |  |  **|**  | //ValIdent// ``:`` ``type`` //[LIDENT]// ``.`` //CoreType// //EQUAL// //SeqExpr//
  |  |  **|**  | //PatternNoExn// //EQUAL// //SeqExpr//
  |  |  **|**  | //SimplePatternNotIdent// ``:`` //CoreType// //EQUAL// //SeqExpr//
  | //LetBindingBody// | -> | //LetBindingBodyNoPunning//
  | //LetBindingsNoExt// | -> | ``let`` //[Attribute]// //RecFlag// //LetBindingBody// //[PostItemAttribute]//
  |  |  **|**  | //LetBindingsNoExt// //AndLetBinding//
  | //LetBindingsExt// | -> | ``let`` //Ext// //[Attribute]// //RecFlag// //LetBindingBody// //[PostItemAttribute]//
  |  |  **|**  | //LetBindingsExt// //AndLetBinding//
  | //AndLetBinding// | -> | ``and`` //[Attribute]// //LetBindingBody// //[PostItemAttribute]//
  | //LetopBindingBody// | -> | //ValIdent// //StrictBinding//
  |  |  **|**  | //ValIdent//
  |  |  **|**  | //SimplePattern// ``:`` //CoreType// //EQUAL// //SeqExpr//
  |  |  **|**  | //PatternNoExn// //EQUAL// //SeqExpr//
  | //LetopBindings// | -> | //LetopBindingBody//
  |  |  **|**  | //LetopBindings// //ANDOP// //LetopBindingBody//
  | //StrictBinding// | -> | //EQUAL// //SeqExpr//
  |  |  **|**  | //[FunParam]// //OptionalTypeConstraint// //EQUAL// //FunBody//
  | //FunBody// | -> | ``function`` //Ext// //[Attribute]// //[MatchCase]//
  |  |  **|**  | //FunExpr1//
  |  |  **|**  | //FunExpr1// ``;``
  |  |  **|**  | //FunExpr1// ``;`` //SeqExpr//
  |  |  **|**  | //FunExpr1// ``;`` //PERCENT// //[AttrId]// //SeqExpr//
  | //[MatchCase]// | -> | ``|`` //[MatchCase]//
  |  |  **|**  | //MatchCase//
  |  |  **|**  | //MatchCase// ``|`` //[MatchCase]//
  | //MatchCase// | -> | //Pattern// ``->`` //SeqExpr//
  |  |  **|**  | //Pattern// ``when`` //SeqExpr// ``->`` //SeqExpr//
  |  |  **|**  | //Pattern// ``->`` ``.``
  | //FunParam// | -> | ``(`` ``type`` //[LIDENT]// ``)``
  |  |  **|**  | //LabeledSimplePattern//
  | //[FunParam]// | -> | //FunParam//
  |  |  **|**  | //FunParam// //[FunParam]//
  | //ExprComma// | -> | //Expr//
  | //[ExprComma]// | -> | //ExprComma//
  |  |  **|**  | //ExprComma// ``,`` //[ExprComma]//
  | //RecordExprFields// | -> | //RecordExprField//
  |  |  **|**  | //RecordExprField// ``;``
  |  |  **|**  | //RecordExprField// ``;`` //RecordExprFields//
  | //RecordExprContent// | -> | //SimpleExpr// ``with`` //RecordExprFields//
  |  |  **|**  | //RecordExprFields//
  | //OptionalTypeConstraint// | -> | **eps**
  |  |  **|**  | //TypeConstraint//
  | //RecordExprField// | -> | //LabelLongident// //OptionalTypeConstraint// //OptionalAssignExpr//
  | //[ObjectExprField]// | -> | //ObjectExprField//
  |  |  **|**  | //ObjectExprField// ``;``
  |  |  **|**  | //ObjectExprField// ``;`` //[ObjectExprField]//
  | //OptionalAssignExpr// | -> | **eps**
  |  |  **|**  | //EQUAL// //Expr//
  | //ObjectExprField// | -> | //LIDENT// //OptionalAssignExpr//
  | //[Expr]// | -> | //Expr//
  |  |  **|**  | //Expr// ``;``
  |  |  **|**  | //Expr// ``;`` //[Expr]//
  | //TypeConstraint// | -> | ``:`` //CoreType//
  |  |  **|**  | ``:`` //CoreType// ``:>`` //CoreType//
  |  |  **|**  | ``:>`` //CoreType//
  | //Pattern// | -> | //Pattern// ``::`` //Pattern//
  |  |  **|**  | //Pattern// //Attribute//
  |  |  **|**  | //PatternGen//
  |  |  **|**  | //Pattern// ``as`` //ValIdent//
  |  |  **|**  | //PatternCommaListPattern//
  |  |  **|**  | //Pattern// ``|`` //Pattern//
  |  |  **|**  | ``exception`` //Ext// //[Attribute]// //Pattern//
  | //PatternNoExn// | -> | //PatternNoExn// ``::`` //Pattern//
  |  |  **|**  | //PatternNoExn// //Attribute//
  |  |  **|**  | //PatternGen//
  |  |  **|**  | //PatternNoExn// ``as`` //ValIdent//
  |  |  **|**  | //PatternCommaListPatternNoExn//
  |  |  **|**  | //PatternNoExn// ``|`` //Pattern//
  | //[LIDENT]// | -> | //LIDENT//
  |  |  **|**  | //LIDENT// //[LIDENT]//
  | //PatternGen// | -> | //SimplePattern//
  |  |  **|**  | //ConstrLongident// //Pattern//
  |  |  **|**  | //ConstrLongident// ``(`` ``type`` //[LIDENT]// ``)`` //SimplePattern//
  |  |  **|**  | //NameTag// //Pattern//
  |  |  **|**  | ``lazy`` //Ext// //[Attribute]// //SimplePattern//
  | //SimplePattern// | -> | //ValIdent//
  |  |  **|**  | //SimplePatternNotIdent//
  | //SimplePatternNotIdent// | -> | ``(`` //Pattern// ``)``
  |  |  **|**  | //SimpleDelimitedPattern//
  |  |  **|**  | ``(`` ``module`` //Ext// //[Attribute]// //ModuleName// ``)``
  |  |  **|**  | ``(`` ``module`` //Ext// //[Attribute]// //ModuleName// ``:`` //PackageType// ``)``
  |  |  **|**  | ``_``
  |  |  **|**  | //SignedConstant//
  |  |  **|**  | //SignedConstant// ``..`` //SignedConstant//
  |  |  **|**  | //ConstrLongident//
  |  |  **|**  | //NameTag//
  |  |  **|**  | ``#`` //TypeLongident//
  |  |  **|**  | //ModLongident// ``.`` //SimpleDelimitedPattern//
  |  |  **|**  | //ModLongident// ``.`` ``[`` ``]``
  |  |  **|**  | //ModLongident// ``.`` ``(`` ``)``
  |  |  **|**  | //ModLongident// ``.`` ``(`` //Pattern// ``)``
  |  |  **|**  | ``(`` //Pattern// ``:`` //CoreType// ``)``
  |  |  **|**  | //Extension//
  | //SimpleDelimitedPattern// | -> | ``{`` //RecordPatContent// ``}``
  |  |  **|**  | ``[`` //[Pattern]// ``]``
  |  |  **|**  | ``[|`` //[Pattern]// ``|]``
  |  |  **|**  | ``[|`` ``|]``
  | //PatternCommaListPattern// | -> | //PatternCommaListPattern// ``,`` //Pattern//
  |  |  **|**  | //Pattern// ``,`` //Pattern//
  | //PatternCommaListPatternNoExn// | -> | //PatternCommaListPatternNoExn// ``,`` //Pattern//
  |  |  **|**  | //PatternNoExn// ``,`` //Pattern//
  | //[Pattern]// | -> | //Pattern//
  |  |  **|**  | //Pattern// ``;``
  |  |  **|**  | //Pattern// ``;`` //[Pattern]//
  | //OptionalSemi// | -> | **eps**
  |  |  **|**  | ``;``
  | //RecordPatContent// | -> | //RecordPatField// //OptionalSemi//
  |  |  **|**  | //RecordPatField// ``;`` ``_`` //OptionalSemi//
  |  |  **|**  | //RecordPatField// ``;`` //RecordPatContent//
  | //OptionalCoreType// | -> | **eps**
  |  |  **|**  | ``:`` //CoreType//
  | //OptionalAssignPattern// | -> | **eps**
  |  |  **|**  | //EQUAL// //Pattern//
  | //RecordPatField// | -> | //LabelLongident// //OptionalCoreType// //OptionalAssignPattern//
  | //ValueDescription// | -> | ``val`` //Ext// //[Attribute]// //ValIdent// ``:`` //PolyType// //[PostItemAttribute]//
  | //[STRING]// | -> | //STRING//
  |  |  **|**  | //STRING// //[STRING]//
  | //PrimitiveDeclaration// | -> | ``external`` //Ext// //[Attribute]// //ValIdent// ``:`` //PolyType// //EQUAL// //[STRING]// //[PostItemAttribute]//
  | //AndTypeDeclaration// | -> | ``and`` //[Attribute]// //TypeParameters// //LIDENT// //TypeKind// //[Constraint]// //[PostItemAttribute]//
  | //[AndTypeDeclaration]// | -> | **eps**
  |  |  **|**  | //AndTypeDeclaration// //[AndTypeDeclaration]//
  | //TypeSubstDeclarations// | -> | //TypeSubstDeclaration// //[AndTypeSubstDeclaration]//
  | //AndTypeSubstDeclaration// | -> | ``and`` //[Attribute]// //TypeParameters// //LIDENT// //TypeSubstKind// //[Constraint]// //[PostItemAttribute]//
  | //[AndTypeSubstDeclaration]// | -> | **eps**
  |  |  **|**  | //AndTypeSubstDeclaration//
  |  |  **|**  | //AndTypeSubstDeclaration// ``and`` //[AndTypeSubstDeclaration]//
  | //TypeDeclaration// | -> | ``type`` //Ext// //[Attribute]// ``nonrec`` //TypeParameters// //LIDENT// //TypeKind// //[Constraint]// //[PostItemAttribute]//
  |  |  **|**  | ``type`` //Ext// //[Attribute]// //TypeParameters// //LIDENT// //TypeKind// //[Constraint]// //[PostItemAttribute]//
  | //TypeSubstDeclaration// | -> | ``type`` //Ext// //[Attribute]// //TypeParameters// //LIDENT// //TypeSubstKind// //[Constraint]// //[PostItemAttribute]//
  | //Constraint// | -> | ``constraint`` //CoreType// //EQUAL// //CoreType//
  | //[Constraint]// | -> | **eps**
  |  |  **|**  | //Constraint// //[Constraint]//
  | //NonemptyTypeKind// | -> | //CoreType//
  |  |  **|**  | //ConstructorDeclarations//
  |  |  **|**  | ``..``
  |  |  **|**  | ``{`` //LabelDeclarations// ``}``
  |  |  **|**  | ``private`` //CoreType//
  |  |  **|**  | ``private`` //ConstructorDeclarations//
  |  |  **|**  | ``private`` ``..``
  |  |  **|**  | ``private`` ``{`` //LabelDeclarations// ``}``
  |  |  **|**  | //CoreType// //EQUAL// //ConstructorDeclarations//
  |  |  **|**  | //CoreType// //EQUAL// ``private`` //ConstructorDeclarations//
  |  |  **|**  | //CoreType// //EQUAL// ``..``
  |  |  **|**  | //CoreType// //EQUAL// ``private`` ``..``
  |  |  **|**  | //CoreType// //EQUAL// ``{`` //LabelDeclarations// ``}``
  |  |  **|**  | //CoreType// //EQUAL// ``private`` ``{`` //LabelDeclarations// ``}``
  | //TypeKind// | -> | **eps**
  |  |  **|**  | //EQUAL// //NonemptyTypeKind//
  | //TypeSubstKind// | -> | //COLONEQUAL// //NonemptyTypeKind//
  | //TypeParameters// | -> | **eps**
  |  |  **|**  | //TypeParameter//
  |  |  **|**  | ``(`` //[TypeParameter]// ``)``
  | //[TypeParameter]// | -> | //TypeParameter//
  |  |  **|**  | //TypeParameter// ``,`` //[TypeParameter]//
  | //TypeParameter// | -> | //TypeVariance// //TypeVariable//
  | //TypeVariable// | -> | ``'`` //OCamlIdent//
  |  |  **|**  | ``_``
  | //TypeVariance// | -> | **eps**
  |  |  **|**  | //PLUS//
  |  |  **|**  | //MINUS//
  |  |  **|**  | //BANG//
  |  |  **|**  | ``+!``
  |  |  **|**  | ``!+``
  |  |  **|**  | ``-!``
  |  |  **|**  | ``!-``
  |  |  **|**  | //PLUSMINUSOP//
  |  |  **|**  | //PREFIXOP//
  | //[ConstructorDeclaration]// | -> | //ConstructorDeclaration//
  |  |  **|**  | //ConstructorDeclaration// ``|`` //[ConstructorDeclaration]//
  | //ConstructorDeclarations// | -> | ``|``
  |  |  **|**  | ``|`` //[ConstructorDeclaration]//
  |  |  **|**  | //[ConstructorDeclaration]//
  | //ConstructorDeclaration// | -> | //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]//
  | //StrExceptionDeclaration// | -> | //SigExceptionDeclaration//
  |  |  **|**  | ``exception`` //Ext// //[Attribute]// //ConstrIdent// //EQUAL// //ConstrLongident// //[Attribute]// //[PostItemAttribute]//
  | //SigExceptionDeclaration// | -> | ``exception`` //Ext// //[Attribute]// //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]// //[PostItemAttribute]//
  | //GeneralizedConstructorArguments// | -> | **eps**
  |  |  **|**  | ``of`` //ConstructorArguments//
  |  |  **|**  | ``:`` //ConstructorArguments// ``->`` //AtomicType//
  |  |  **|**  | ``:`` //[TypeVar]// ``.`` //ConstructorArguments// ``->`` //AtomicType//
  |  |  **|**  | ``:`` //AtomicType//
  |  |  **|**  | ``:`` //[TypeVar]// ``.`` //AtomicType//
  | //ConstructorArguments// | -> | //TupleType//
  |  |  **|**  | ``{`` //LabelDeclarations// ``}``
  | //LabelDeclarations// | -> | //LabelDeclaration//
  |  |  **|**  | //LabelDeclarationSemi//
  |  |  **|**  | //LabelDeclarationSemi// //LabelDeclarations//
  | //LabelDeclaration// | -> | //MutableFlag// //LIDENT// ``:`` //AliasType// //[Attribute]//
  |  |  **|**  | //MutableFlag// //LIDENT// ``:`` //[TypeVar]// ``.`` //AliasType// //[Attribute]//
  | //LabelDeclarationSemi// | -> | //MutableFlag// //LIDENT// ``:`` //AliasType// //[Attribute]// ``;`` //[Attribute]//
  |  |  **|**  | //MutableFlag// //LIDENT// ``:`` //[TypeVar]// ``.`` //AliasType// //[Attribute]// ``;`` //[Attribute]//
  | //BarLlistExtensionConstructor// | -> | ``|``
  |  |  **|**  | ``|`` //[ExtensionConstructor]//
  |  |  **|**  | //[ExtensionConstructor]//
  | //[ExtensionConstructor]// | -> | **eps**
  |  |  **|**  | //ExtensionConstructor//
  |  |  **|**  | //ExtensionConstructor// ``|`` //[ExtensionConstructor]//
  | //BarLlistExtensionConstructorDeclaration// | -> | ``|``
  |  |  **|**  | ``|`` //[ExtensionConstructorDeclaration]//
  |  |  **|**  | //[ExtensionConstructorDeclaration]//
  | //[ExtensionConstructorDeclaration]// | -> | **eps**
  |  |  **|**  | //ExtensionConstructorDeclaration//
  |  |  **|**  | //ExtensionConstructorDeclaration// ``|`` //[ExtensionConstructorDeclaration]//
  | //ExtensionConstructor// | -> | //ExtensionConstructorDeclaration//
  |  |  **|**  | //ExtensionConstructorRebind//
  | //ExtensionConstructorDeclaration// | -> | //ConstrIdent// //GeneralizedConstructorArguments// //[Attribute]//
  | //ExtensionConstructorRebind// | -> | //ConstrIdent// //EQUAL// //ConstrLongident// //[Attribute]//
  | //WithConstraint// | -> | ``type`` //TypeParameters// //LabelLongident// //WithTypeBinder// //AliasType// //[Constraint]//
  |  |  **|**  | ``type`` //TypeParameters// //LabelLongident// //COLONEQUAL// //AliasType//
  |  |  **|**  | ``module`` //ModLongident// //EQUAL// //ModExtLongident//
  |  |  **|**  | ``module`` //ModLongident// //COLONEQUAL// //ModExtLongident//
  |  |  **|**  | ``module`` ``type`` //MtyLongident// //EQUAL// //ModuleType//
  |  |  **|**  | ``module`` ``type`` //MtyLongident// //COLONEQUAL// //ModuleType//
  | //WithTypeBinder// | -> | //EQUAL//
  |  |  **|**  | //EQUAL// ``private``
  | //TypeVar// | -> | ``'`` //OCamlIdent//
  | //[TypeVar]// | -> | //TypeVar//
  |  |  **|**  | //TypeVar// //[TypeVar]//
  | //PolyType// | -> | //CoreType//
  |  |  **|**  | //[TypeVar]// ``.`` //CoreType//
  | //CoreType// | -> | //AliasType//
  |  |  **|**  | //CoreType// //Attribute//
  | //[CoreType]// | -> | //CoreType//
  |  |  **|**  | //CoreType// ``,`` //[CoreType]//
  | //AliasType// | -> | //FunctionType//
  |  |  **|**  | //AliasType// ``as`` //TypeVar//
  | //FunctionType// | -> | //TupleType//
  |  |  **|**  | //OptLabel// //TupleType// ``->`` //FunctionType//
  |  |  **|**  | //LIDENT// ``:`` //TupleType// ``->`` //FunctionType//
  |  |  **|**  | //TupleType// ``->`` //FunctionType//
  | //TupleType// | -> | //AtomicType//
  |  |  **|**  | //AtomicType// //STAR// //TupleType//
  | //OptionalBar// | -> | **eps**
  |  |  **|**  | ``|``
  | //DelimitedTypeSupportingLocalOpen// | -> | ``(`` //CoreType// ``)``
  |  |  **|**  | ``(`` ``module`` //Ext// //[Attribute]// //PackageType// ``)``
  |  |  **|**  | ``[`` //TagField// ``]``
  |  |  **|**  | ``[`` ``|`` //[RowField]// ``]``
  |  |  **|**  | ``[`` //RowField// ``|`` //[RowField]// ``]``
  |  |  **|**  | ``[>`` //OptionalBar// //[RowField]// ``]``
  |  |  **|**  | ``[>`` ``]``
  |  |  **|**  | ``[<`` //OptionalBar// //[RowField]// ``]``
  |  |  **|**  | ``[<`` //OptionalBar// //[RowField]// //GREATER// //[NameTag]// ``]``
  | //ObjectType// | -> | //LESS// //MethList// //GREATER//
  |  |  **|**  | //LESS// //GREATER//
  | //DelimitedType// | -> | //ObjectType//
  |  |  **|**  | //Extension//
  |  |  **|**  | //DelimitedTypeSupportingLocalOpen//
  | //AtomicType// | -> | //DelimitedType//
  |  |  **|**  | //TypeLongident//
  |  |  **|**  | //AtomicType// //TypeLongident//
  |  |  **|**  | ``(`` //CoreType// ``,`` //[CoreType]// ``)`` //TypeLongident//
  |  |  **|**  | ``#`` //CltyLongident//
  |  |  **|**  | //AtomicType// ``#`` //CltyLongident//
  |  |  **|**  | ``(`` //CoreType// ``,`` //[CoreType]// ``)`` ``#`` //CltyLongident//
  |  |  **|**  | //ModExtLongident// ``.`` //DelimitedTypeSupportingLocalOpen//
  |  |  **|**  | ``'`` //OCamlIdent//
  |  |  **|**  | ``_``
  | //PackageType// | -> | //ModuleType//
  | //[RowField]// | -> | //RowField//
  |  |  **|**  | //RowField// ``|`` //[RowField]//
  | //RowField// | -> | //TagField//
  |  |  **|**  | //CoreType//
  | //TagField// | -> | //NameTag// ``of`` //OptAmpersand// //AmperTypeList// //[Attribute]//
  |  |  **|**  | //NameTag// //[Attribute]//
  | //OptAmpersand// | -> | //AMPERSAND//
  |  |  **|**  | **eps**
  | //AmperTypeList// | -> | //AliasType//
  |  |  **|**  | //AliasType// //AMPERSAND// //AmperTypeList//
  | //[NameTag]// | -> | //NameTag//
  |  |  **|**  | //NameTag// //[NameTag]//
  | //MethList// | -> | //LIDENT// ``:`` //AliasType// //[Attribute]// ``;`` //[Attribute]// //MethList//
  |  |  **|**  | //LIDENT// ``:`` //[TypeVar]// ``.`` //AliasType// //[Attribute]// ``;`` //[Attribute]// //MethList//
  |  |  **|**  | //AtomicType// ``;`` //MethList//
  |  |  **|**  | //LIDENT// ``:`` //AliasType// //[Attribute]// ``;``
  |  |  **|**  | //LIDENT// ``:`` //[TypeVar]// ``.`` //AliasType// //[Attribute]// ``;``
  |  |  **|**  | //AtomicType// ``;``
  |  |  **|**  | //LIDENT// ``:`` //AliasType// //[Attribute]//
  |  |  **|**  | //LIDENT// ``:`` //[TypeVar]// ``.`` //AliasType// //[Attribute]//
  |  |  **|**  | //AtomicType//
  |  |  **|**  | ``..``
  | //Constant// | -> | //INT//
  |  |  **|**  | //CHAR//
  |  |  **|**  | //STRING//
  |  |  **|**  | //FLOAT//
  | //SignedConstant// | -> | //Constant//
  |  |  **|**  | //MINUS// //INT//
  |  |  **|**  | //MINUS// //FLOAT//
  |  |  **|**  | //PLUS// //INT//
  |  |  **|**  | //PLUS// //FLOAT//
  | //OCamlIdent// | -> | //UIDENT//
  |  |  **|**  | //LIDENT//
  | //ValExtraIdent// | -> | ``(`` //Operator// ``)``
  | //ValIdent// | -> | //LIDENT//
  |  |  **|**  | //ValExtraIdent//
  | //Operator// | -> | //PREFIXOP//
  |  |  **|**  | //LETOP//
  |  |  **|**  | //ANDOP//
  |  |  **|**  | //DOTOP// ``(`` //IndexMod// ``)``
  |  |  **|**  | //DOTOP// ``(`` //IndexMod// ``)`` ``<-``
  |  |  **|**  | //DOTOP// ``[`` //IndexMod// ``]``
  |  |  **|**  | //DOTOP// ``[`` //IndexMod// ``]`` ``<-``
  |  |  **|**  | //DOTOP// ``{`` //IndexMod// ``}``
  |  |  **|**  | //DOTOP// ``{`` //IndexMod// ``}`` ``<-``
  |  |  **|**  | //HASHOP//
  |  |  **|**  | //BANG//
  |  |  **|**  | //RELOP//
  |  |  **|**  | //CONCATOP//
  |  |  **|**  | //PLUSMINUSOP//
  |  |  **|**  | //MULTDIVOP//
  |  |  **|**  | //POWOP//
  |  |  **|**  | //PLUS//
  |  |  **|**  | //PLUSDOT//
  |  |  **|**  | //PLUSEQ//
  |  |  **|**  | //MINUS//
  |  |  **|**  | //MINUSDOT//
  |  |  **|**  | //STAR//
  |  |  **|**  | //PERCENT//
  |  |  **|**  | //EQUAL//
  |  |  **|**  | //BANGEQUAL//
  |  |  **|**  | //LESS//
  |  |  **|**  | //GREATER//
  |  |  **|**  | //OR//
  |  |  **|**  | //BARBAR//
  |  |  **|**  | //AMPERSAND//
  |  |  **|**  | //AMPERAMPER//
  |  |  **|**  | //COLONEQUAL//
  | //IndexMod// | -> | **eps**
  |  |  **|**  | ``;`` ``..``
  | //ConstrExtraNonprefixIdent// | -> | ``[`` ``]``
  |  |  **|**  | ``(`` ``)``
  |  |  **|**  | ``false``
  |  |  **|**  | ``true``
  | //ConstrIdent// | -> | //UIDENT//
  |  |  **|**  | ``(`` ``::`` ``)``
  |  |  **|**  | //ConstrExtraNonprefixIdent//
  | //ConstrLongident// | -> | //ModLongident//
  |  |  **|**  | //ModLongident// ``.`` ``(`` ``::`` ``)``
  |  |  **|**  | ``(`` ``::`` ``)``
  |  |  **|**  | //ConstrExtraNonprefixIdent//
  | //ValLongident// | -> | //ValIdent//
  |  |  **|**  | //ModLongident// ``.`` //ValIdent//
  | //LabelLongident// | -> | //LIDENT//
  |  |  **|**  | //ModLongident// ``.`` //LIDENT//
  | //TypeLongident// | -> | //LIDENT//
  |  |  **|**  | //ModExtLongident// ``.`` //LIDENT//
  | //ModLongident// | -> | //UIDENT//
  |  |  **|**  | //ModLongident// ``.`` //UIDENT//
  | //ModExtLongident// | -> | //UIDENT//
  |  |  **|**  | //ModExtLongident// ``.`` //UIDENT//
  |  |  **|**  | //ModExtLongident// ``(`` //ModExtLongident// ``)``
  | //MtyLongident// | -> | //OCamlIdent//
  |  |  **|**  | //ModExtLongident// ``.`` //OCamlIdent//
  | //CltyLongident// | -> | //LIDENT//
  |  |  **|**  | //ModExtLongident// ``.`` //LIDENT//
  | //ClassLongident// | -> | //LIDENT//
  |  |  **|**  | //ModLongident// ``.`` //LIDENT//
  | //OptionalToplevelDirectiveArgument// | -> | **eps**
  |  |  **|**  | //ToplevelDirectiveArgument//
  | //ToplevelDirective// | -> | ``#`` //OCamlIdent// //ToplevelDirectiveArgument//
  | //ToplevelDirectiveArgument// | -> | //STRING//
  |  |  **|**  | //INT//
  |  |  **|**  | //ValLongident//
  |  |  **|**  | //ModLongident//
  |  |  **|**  | ``false``
  |  |  **|**  | ``true``
  | //NameTag// | -> | ````` //OCamlIdent//
  | //RecFlag// | -> | **eps**
  |  |  **|**  | ``rec``
  | //DirectionFlag// | -> | ``to``
  |  |  **|**  | ``downto``
  | //PrivateFlag// | -> | **eps**
  |  |  **|**  | ``private``
  | //MutableFlag// | -> | **eps**
  |  |  **|**  | ``mutable``
  | //VirtualFlag// | -> | **eps**
  |  |  **|**  | ``virtual``
  | //MutableVirtualFlags// | -> | **eps**
  |  |  **|**  | ``mutable``
  |  |  **|**  | ``virtual``
  |  |  **|**  | ``mutable`` ``virtual``
  |  |  **|**  | ``virtual`` ``mutable``
  | //PrivateVirtualFlags// | -> | **eps**
  |  |  **|**  | ``private``
  |  |  **|**  | ``virtual``
  |  |  **|**  | ``private`` ``virtual``
  |  |  **|**  | ``virtual`` ``private``
  | //VirtualWithMutableFlag// | -> | ``virtual``
  |  |  **|**  | ``mutable`` ``virtual``
  |  |  **|**  | ``virtual`` ``mutable``
  | //VirtualWithPrivateFlag// | -> | ``virtual``
  |  |  **|**  | ``private`` ``virtual``
  |  |  **|**  | ``virtual`` ``private``
  | //NoOverrideFlag// | -> | **eps**
  | //OverrideFlag// | -> | **eps**
  |  |  **|**  | //BANG//
  | //Subtractive// | -> | //MINUS//
  |  |  **|**  | //MINUSDOT//
  | //Additive// | -> | //PLUS//
  |  |  **|**  | //PLUSDOT//
  | //OptLabel// | -> | //OPTLABEL//
  |  |  **|**  | ``?`` //LIDENT// ``:``
  | //AttrId// | -> | //LIDENT//
  |  |  **|**  | //UIDENT//
  |  |  **|**  | ``and``
  |  |  **|**  | ``as``
  |  |  **|**  | ``assert``
  |  |  **|**  | ``begin``
  |  |  **|**  | ``class``
  |  |  **|**  | ``constraint``
  |  |  **|**  | ``do``
  |  |  **|**  | ``done``
  |  |  **|**  | ``downto``
  |  |  **|**  | ``else``
  |  |  **|**  | ``end``
  |  |  **|**  | ``exception``
  |  |  **|**  | ``external``
  |  |  **|**  | ``false``
  |  |  **|**  | ``for``
  |  |  **|**  | ``fun``
  |  |  **|**  | ``function``
  |  |  **|**  | ``functor``
  |  |  **|**  | ``if``
  |  |  **|**  | ``in``
  |  |  **|**  | ``include``
  |  |  **|**  | ``inherit``
  |  |  **|**  | ``initializer``
  |  |  **|**  | ``lazy``
  |  |  **|**  | ``let``
  |  |  **|**  | ``match``
  |  |  **|**  | ``method``
  |  |  **|**  | ``module``
  |  |  **|**  | ``mutable``
  |  |  **|**  | ``new``
  |  |  **|**  | ``nonrec``
  |  |  **|**  | ``object``
  |  |  **|**  | ``of``
  |  |  **|**  | ``open``
  |  |  **|**  | //OR//
  |  |  **|**  | ``private``
  |  |  **|**  | ``rec``
  |  |  **|**  | ``sig``
  |  |  **|**  | ``struct``
  |  |  **|**  | ``then``
  |  |  **|**  | ``to``
  |  |  **|**  | ``true``
  |  |  **|**  | ``try``
  |  |  **|**  | ``type``
  |  |  **|**  | ``val``
  |  |  **|**  | ``virtual``
  |  |  **|**  | ``when``
  |  |  **|**  | ``while``
  |  |  **|**  | ``with``
  | //[AttrId]// | -> | //AttrId//
  |  |  **|**  | //AttrId// ``.`` //[AttrId]//
  | //Attribute// | -> | ``[@`` //[AttrId]// //AttrPayload// ``]``
  | //PostItemAttribute// | -> | ``[@@`` //[AttrId]// //AttrPayload// ``]``
  | //FloatingAttribute// | -> | ``[@@@`` //[AttrId]// //AttrPayload// ``]``
  | //[PostItemAttribute]// | -> | **eps**
  |  |  **|**  | //PostItemAttribute// //[PostItemAttribute]//
  | //[Attribute]// | -> | **eps**
  |  |  **|**  | //Attribute// //[Attribute]//
  | //Ext// | -> | **eps**
  |  |  **|**  | //PERCENT// //[AttrId]//
  | //Extension// | -> | ``[%`` //[AttrId]// //Payload// ``]``
  |  |  **|**  | //QUOTED_STRING_EXPR//
  | //ItemExtension// | -> | ``[%%`` //[AttrId]// //Payload// ``]``
  |  |  **|**  | //QUOTED_STRING_ITEM//
  | //Payload// | -> | //Structure//
  |  |  **|**  | ``:`` //Signature//
  |  |  **|**  | ``:`` //CoreType//
  |  |  **|**  | ``?`` //Pattern//
  |  |  **|**  | ``?`` //Pattern// ``when`` //SeqExpr//
  | //AttrPayload// | -> | //Payload//



%% File generated by the BNF Converter (bnfc 2.9.6).
