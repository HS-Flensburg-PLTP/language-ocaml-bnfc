-- File generated by the BNF Converter (bnfc 2.9.6).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language ocaml.

module Language.Ocaml.Abs where

import Prelude (String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data INT
    = ModifiedDecimal DecimalLiteralModifier
    | Decimal DecimalLiteral
    | ModifiedHex HexLiteralModifier
    | Hex HexLiteral
    | ModifiedOct OctLiteralModifier
    | Oct OctLiteral
    | ModifiedBin BinLiteralModifier
    | Bin BinLiteral
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Implementation = Implementation Structure
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Interface = Interface Signature
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ToplevelPhrase
    = StrExpr SeqExpr [PostItemAttribute]
    | StructureItems [StructureItem]
    | ToplevelDirective ToplevelDirective
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UseFile
    = UseFile [UseFileElement]
    | UseFileWithStrExp SeqExpr [PostItemAttribute] [UseFileElement]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UseFileElement
    = NoUseFileElement
    | UseFileStrExp SeqExpr [PostItemAttribute]
    | UseFileStructureItem StructureItem
    | UseFileToplevelDirective ToplevelDirective
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctorArg = NoFunctorArg | FunctorArg ModuleName ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleName = ModuleNameIdent UIDENT | ModuleNameUnderscore
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleExpr
    = ModuleExprStruct [Attribute] Structure
    | ModuleExprFunctor [Attribute] [FunctorArg] ModuleExpr
    | ModuleExprParen ParenModuleExpr
    | ModuleExpr ModuleExpr Attribute
    | ModuleExprIdent ModLongident
    | ModuleExprFunctorApp ModuleExpr ParenModuleExpr
    | FunctorAppUnit ModuleExpr
    | ModuleExprExtension Extension
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ParenModuleExpr
    = TypedParenModuleExpr ModuleExpr ModuleType
    | ParenModuleExpr ModuleExpr
    | ValParenModuleExpr [Attribute] ExprColonPackageType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExprColonPackageType
    = Expr Expr
    | TypedExpr Expr ModuleType
    | TypedCoercionExpr Expr ModuleType ModuleType
    | CoercionExpr Expr ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Structure
    = NoStructure
    | StandaloneExpression SeqExpr [PostItemAttribute]
    | StandaloneExpressionAndStructureElements SeqExpr [PostItemAttribute] [StructureElement]
    | StructureElements [StructureElement]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructureElement
    = StructureSemiSemi
    | StructureStrExpr SeqExpr [PostItemAttribute]
    | StructureItem StructureItem
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructureItem
    = StructureLetBindings LetBindingsExt
    | StructureItemExtension ItemExtension [PostItemAttribute]
    | StructureFloatingAttribute FloatingAttribute
    | StructurePrimitiveDeclaration PrimitiveDeclaration
    | StructureValueDescription ValueDescription
    | StructureTypeDeclarations TypeDeclaration [AndTypeDeclaration]
    | StructureStrTypeExtension StrTypeExtension
    | StrExceptionDeclaration StrExceptionDeclaration
    | StructureModuleBinding Ext [Attribute] ModuleName ModuleBindingBody [PostItemAttribute]
    | StructureRecModuleBindings Ext [Attribute] ModuleName ModuleBindingBody [PostItemAttribute] [AndModuleBinding]
    | StructureModuleTypeDeclaration ModuleTypeDeclaration
    | StructureOpenDeclaration OpenDeclaration
    | StructureClassDeclarations Ext [Attribute] VirtualFlag FormalClassParameters LIDENT ClassFunBinding [PostItemAttribute] [AndClassDeclaration]
    | StructureClassTypeDeclarations ClassTypeDeclarations
    | StructureIncludeStatement Ext [Attribute] ModuleExpr [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleBindingBody
    = ModuleBinding ModuleExpr
    | TypedModuleBinding ModuleType ModuleExpr
    | FunctorBinding FunctorArg ModuleBindingBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndModuleBinding
    = AndModuleBinding [Attribute] ModuleName ModuleBindingBody [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalModuleType = NoModuleType | AModuleType ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleTypeDeclaration
    = ModuleTypeDeclaration [Attribute] OCamlIdent OptionalModuleType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OpenDeclaration
    = OpenDeclaration OverrideFlag Ext [Attribute] ModuleExpr [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OpenDescription
    = OpenDescription OverrideFlag Ext [Attribute] ModExtLongident [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleType
    = ModuleTypeSignature [Attribute] Signature
    | ModuleTypeFunctor [Attribute] [FunctorArg] ModuleType
    | ModuleTypeOf [Attribute] ModuleExpr
    | ParenModuleType ModuleType
    | ModuleTypeWithAttribute ModuleType Attribute
    | ModuleTypeModuleIdent ModLongident
    | ModuleTypeNoArgFunctorApp ModuleType
    | ModuleTypeFunctorApp ModuleType ModuleType
    | ModuleTypeWith ModuleType [WithConstraint]
    | ModuleTypeExtension Extension
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Signature = Signature [SignatureElement]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SignatureElement = SigSemiSemi | SigItem SignatureItem
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SignatureItem
    = SigItemExtension ItemExtension [PostItemAttribute]
    | SigFloatingAttribute FloatingAttribute
    | SigValueDescription ValueDescription
    | SigPrimitiveDeclaration PrimitiveDeclaration
    | SigTypeDeclarations TypeDeclaration [AndTypeDeclaration]
    | SigTypeSubstDeclarations TypeSubstDeclarations
    | SigSigTypeExtension SigTypeExtension
    | SigSigExceptionDeclaration SigExceptionDeclaration
    | SigModuleDeclaration ModuleDeclaration
    | SigModuleAlias ModuleAlias
    | SigModuleSubst ModuleSubst
    | SigRecModuleDeclarations RecModuleDeclaration [AndModuleDeclaration]
    | SigModuleTypeDeclaration ModuleTypeDeclaration
    | SigModuleTypeSubst ModuleTypeSubst
    | SigOpenDescription OpenDescription
    | SigIncludeStatement ModuleTypeIncludeStatement
    | SigClassDescription Ext [Attribute] VirtualFlag FormalClassParameters LIDENT ClassType [PostItemAttribute] [AndClassDescription]
    | SigClassTypeDeclarations ClassTypeDeclarations
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleTypeIncludeStatement
    = ModuleTypeIncludeStatement Ext [Attribute] ModuleType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleDeclaration
    = ModuleDeclaration Ext [Attribute] ModuleName ModuleDeclarationBody [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleDeclarationBody
    = ModuleBody ModuleType
    | FunctorBody FunctorArg ModuleDeclarationBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleAlias
    = ModuleAlias Ext [Attribute] ModuleName ModuleExprAlias [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleExprAlias = ModuleExprAlias ModLongident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleSubst
    = ModuleSubst Ext [Attribute] UIDENT ModExtLongident [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecModuleDeclaration
    = RecModuleDeclaration Ext [Attribute] ModuleName ModuleType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndModuleDeclaration
    = AndModuleDeclaration [Attribute] ModuleName ModuleType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModuleTypeSubst
    = ModuleTypeSubst Ext [Attribute] OCamlIdent ModuleType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndClassDeclaration
    = AndClassDeclaration [Attribute] VirtualFlag FormalClassParameters LIDENT ClassFunBinding [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassFunBinding
    = ClassFunBinding ClassExpr
    | TypedClassFunBinding ClassType ClassExpr
    | LabeledClassFunBinding LabeledSimplePattern ClassFunBinding
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FormalClassParameters
    = NoFormalClassParamters | FormalClassParameters [TypeParameter]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassExpr
    = ClassSimpleExpr ClassSimpleExpr
    | ClassExprFunctor [Attribute] ClassFunDef
    | ClassExprLetBindings LetBindingsNoExt ClassExpr
    | ClassExprLetOpen OverrideFlag [Attribute] ModLongident ClassExpr
    | ClassExpr ClassExpr Attribute
    | LabeledClassSimpleExpr ClassSimpleExpr [LabeledSimpleExpr]
    | ClassExprExtension Extension
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassSimpleExpr
    = ParenClassExpr ClassExpr
    | ClassName ClassLongident
    | ClassNameWithParamters [CoreType] ClassLongident
    | TypedClassExpr ClassExpr ClassType
    | ClassSimplExprObject [Attribute] ClassStructure
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassFunDef
    = ClassFun LabeledSimplePattern ClassExpr
    | LabeledClassFunDef LabeledSimplePattern ClassFunDef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassStructure
    = ClassSelfPattern ClassSelfPattern [ClassField]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassSelfPattern
    = ParenClassPattern Pattern
    | TypedClassPattern Pattern CoreType
    | NoClassSelfPattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalAs = NoAs | AAs LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassField
    = ClassFieldInherit OverrideFlag [Attribute] ClassExpr OptionalAs [PostItemAttribute]
    | ClassFieldVal Value [PostItemAttribute]
    | ClassFieldMethod Method_ [PostItemAttribute]
    | ClassFieldConstraint [Attribute] CoreType CoreType [PostItemAttribute]
    | ClassFieldInitializer [Attribute] SeqExpr [PostItemAttribute]
    | ClassFieldItemExtension ItemExtension [PostItemAttribute]
    | ClassFieldFloatingAttribute FloatingAttribute
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Value
    = Value1 NoOverrideFlag [Attribute] VirtualWithMutableFlag LIDENT CoreType
    | Value2 OverrideFlag [Attribute] MutableFlag LIDENT SeqExpr
    | Value3 OverrideFlag [Attribute] MutableFlag LIDENT TypeConstraint SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Method_
    = Method1 NoOverrideFlag [Attribute] VirtualWithPrivateFlag LIDENT PolyType
    | Method2 OverrideFlag [Attribute] PrivateFlag LIDENT StrictBinding
    | Method3 OverrideFlag [Attribute] PrivateFlag LIDENT PolyType SeqExpr
    | Method4 OverrideFlag [Attribute] PrivateFlag LIDENT [LIDENT] CoreType SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassType
    = ClassSignature ClassSignature
    | ClassTypeWithOptLabel OPTLABEL TupleType ClassType
    | ClassTypeWithOptionalLabel LIDENT TupleType ClassType
    | ClassTypeWithtLabel LIDENT TupleType ClassType
    | ClassTypeWithoutLabel TupleType ClassType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassSignature
    = ClassSignatureName CltyLongident
    | ClassSignatureNameWithParamters [CoreType] CltyLongident
    | ClassSignatureExtension Extension
    | ClassSignatureObject [Attribute] ClassSelfType [ClassSigField]
    | WithAttribute ClassSignature Attribute
    | ClassSignatureLetOpen OverrideFlag [Attribute] ModLongident ClassSignature
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassSelfType = ClassSelfType CoreType | NoClassSelfType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassSigField
    = ClassSigFieldInherit [Attribute] ClassSignature [PostItemAttribute]
    | ClassSigFieldVal [Attribute] MutableVirtualFlags LIDENT CoreType [PostItemAttribute]
    | ClassSigFieldMethod [Attribute] PrivateVirtualFlags LIDENT PolyType [PostItemAttribute]
    | ClassSigFieldConstraint [Attribute] CoreType CoreType [PostItemAttribute]
    | ClassSigFieldItemExtension ItemExtension [PostItemAttribute]
    | ClassSigFieldFloatingAttribute FloatingAttribute
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Constrain = Constrain CoreType CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndClassDescription
    = AndClassDescription [Attribute] VirtualFlag FormalClassParameters LIDENT ClassType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassTypeDeclarations
    = ClassTypeDeclarations ClassTypeDeclaration [AndClassTypeDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassTypeDeclaration
    = ClassTypeDeclaration Ext [Attribute] VirtualFlag FormalClassParameters LIDENT ClassSignature [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndClassTypeDeclaration
    = AndClassTypeDeclaration [Attribute] VirtualFlag FormalClassParameters LIDENT ClassSignature [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SeqExpr
    = FinalFunExpr FunExpr
    | FinalFunExprSemi FunExpr
    | MoreFunExprs FunExpr SeqExpr
    | MoreFunExprsAttr FunExpr [AttrId] SeqExpr
    | SeqExprFunction Ext [Attribute] [MatchCase]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabeledSimplePattern
    = OptPattern LabelLetPattern OptDefault
    | OptLabelVar LIDENT
    | OptLabeledPattern OPTLABEL LetPattern OptDefault
    | OptLabeledVar OPTLABEL PatternVar
    | LabeledPattern LabelLetPattern
    | LabeledVar LIDENT
    | LabeledSimplePattern LABEL SimplePattern
    | SimplePattern SimplePattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PatternVar = PatternVar LIDENT | UnderscorePatternVar
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptDefault = NoDefault | Default SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabelLetPattern
    = LabelLetPattern LIDENT | TypedLabelLetPattern LIDENT CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetPattern
    = LetPattern Pattern | TypedLetPattern Pattern CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data QualifiedDotop
    = Unqualified DOTOP | Qualified ModLongident DOTOP
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalAtomicTypeAnnotation
    = NoAtomicTypeAnnotation | AnAtomicTypeAnnotation AtomicType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunExpr
    = ConstrName_ ConstrLongident
    | NameTagApp NameTag SimpleExpr
    | SimpleExprApp SimpleExpr [LabeledSimpleExpr]
    | Assert Ext [Attribute] SimpleExpr
    | Lazy Ext [Attribute] SimpleExpr
    | SimpleExpr SimpleExpr
    | Subtractive Subtractive Expr
    | Additive Additive Expr
    | PowInfix FunExpr POWOP Expr
    | MultDivInfix FunExpr MULTDIVOP Expr
    | MultInfix FunExpr Expr
    | DivInfix FunExpr Expr
    | ModInfix FunExpr Expr
    | PlusMinusInfix FunExpr PLUSMINUSOP Expr
    | PlusInfix FunExpr Expr
    | PlusDotInfix FunExpr Expr
    | MinusInfix FunExpr Expr
    | MinusDotInfix FunExpr Expr
    | Cons FunExpr Expr
    | ConcatInfix FunExpr CONCATOP Expr
    | RelInfix FunExpr RELOP Expr
    | EqualInfix FunExpr Expr
    | LessInfix FunExpr Expr
    | GreaterInfix FunExpr Expr
    | Infix FunExpr Expr
    | OrInfix FunExpr Expr
    | BarBarInfix FunExpr Expr
    | Comma Expr [ExprComma]
    | UpdateExpr LIDENT Expr
    | AssignInfix FunExpr Expr
    | QualifiedDot SimpleExpr LabelLongident Expr
    | ArrayUpdateExpr SimpleExpr SeqExpr Expr
    | RecordUpdateExpr SimpleExpr SeqExpr Expr
    | StringUpdateExpr SimpleExpr SeqExpr Expr
    | ArrayUpdateDotopExpr SimpleExpr QualifiedDotop [Expr] Expr
    | RecordUpdateDotopExpr SimpleExpr QualifiedDotop [Expr] Expr
    | StringUpdateDotopExpr SimpleExpr QualifiedDotop [Expr] Expr
    | IfElse Ext [Attribute] SeqExpr Expr Expr
    | If Ext [Attribute] SeqExpr Expr
    | Let LetBindingsExt SeqExpr
    | LetOpBinding LETOP LetopBindings SeqExpr
    | LetModule Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match Ext [Attribute] SeqExpr [MatchCase]
    | Try Ext [Attribute] SeqExpr [MatchCase]
    | While Ext [Attribute] SeqExpr SeqExpr
    | For Ext [Attribute] Pattern SeqExpr DirectionFlag SeqExpr SeqExpr
    | FunExprWithAttribute FunExpr Attribute
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = Function15 Ext [Attribute] [MatchCase]
    | Let15 LetBindingsExt SeqExpr
    | LetOpBinding15 LETOP LetopBindings SeqExpr
    | LetModule15 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException15 Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen15 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun15 Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match15 Ext [Attribute] SeqExpr [MatchCase]
    | Try15 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse15 Ext [Attribute] SeqExpr Expr Expr
    | If15 Ext [Attribute] SeqExpr Expr
    | FunExpr15 FunExpr
    | Function13 Ext [Attribute] [MatchCase]
    | Let13 LetBindingsExt SeqExpr
    | LetOpBinding13 LETOP LetopBindings SeqExpr
    | LetModule13 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException13 Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen13 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun13 Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match13 Ext [Attribute] SeqExpr [MatchCase]
    | Try13 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse13 Ext [Attribute] SeqExpr Expr Expr
    | If13 Ext [Attribute] SeqExpr Expr
    | FunExpr13 FunExpr
    | Function12 Ext [Attribute] [MatchCase]
    | Let12 LetBindingsExt SeqExpr
    | LetOpBinding12 LETOP LetopBindings SeqExpr
    | LetModule12 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException12 Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen12 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun12 Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match12 Ext [Attribute] SeqExpr [MatchCase]
    | Try12 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse12 Ext [Attribute] SeqExpr Expr Expr
    | If12 Ext [Attribute] SeqExpr Expr
    | FunExpr12 FunExpr
    | Function11 Ext [Attribute] [MatchCase]
    | Let11 LetBindingsExt SeqExpr
    | LetOpBinding11 LETOP LetopBindings SeqExpr
    | LetModule11 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException11 Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen11 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun11 Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match11 Ext [Attribute] SeqExpr [MatchCase]
    | Try11 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse11 Ext [Attribute] SeqExpr Expr Expr
    | If11 Ext [Attribute] SeqExpr Expr
    | FunExpr11 FunExpr
    | Function10 Ext [Attribute] [MatchCase]
    | Let10 LetBindingsExt SeqExpr
    | LetOpBinding10 LETOP LetopBindings SeqExpr
    | LetModule10 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException10 Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen10 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun10 Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match10 Ext [Attribute] SeqExpr [MatchCase]
    | Try10 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse10 Ext [Attribute] SeqExpr Expr Expr
    | If10 Ext [Attribute] SeqExpr Expr
    | FunExpr10 FunExpr
    | Function9 Ext [Attribute] [MatchCase]
    | Let9 LetBindingsExt SeqExpr
    | LetOpBinding9 LETOP LetopBindings SeqExpr
    | LetModule9 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException9 Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen9 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun9 Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match9 Ext [Attribute] SeqExpr [MatchCase]
    | Try9 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse9 Ext [Attribute] SeqExpr Expr Expr
    | If9 Ext [Attribute] SeqExpr Expr
    | FunExpr9 FunExpr
    | Function7 Ext [Attribute] [MatchCase]
    | Let7 LetBindingsExt SeqExpr
    | LetOpBinding7 LETOP LetopBindings SeqExpr
    | LetModule7 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException7 Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen7 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun7 Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match7 Ext [Attribute] SeqExpr [MatchCase]
    | Try7 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse7 Ext [Attribute] SeqExpr Expr Expr
    | If7 Ext [Attribute] SeqExpr Expr
    | FunExpr7 FunExpr
    | Function6 Ext [Attribute] [MatchCase]
    | Let6 LetBindingsExt SeqExpr
    | LetOpBinding6 LETOP LetopBindings SeqExpr
    | LetModule6 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException6 Ext [Attribute] LetExceptionDeclaration SeqExpr
    | LetOpen6 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun6 Ext [Attribute] [FunParamAsList] OptionalAtomicTypeAnnotation FunBody
    | Match6 Ext [Attribute] SeqExpr [MatchCase]
    | Try6 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse6 Ext [Attribute] SeqExpr Expr Expr
    | If6 Ext [Attribute] SeqExpr Expr
    | FunExpr6 FunExpr
    | Function Ext [Attribute] [MatchCase]
    | FunExpr1 FunExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SimpleExpr
    = ParenSeqExpr SeqExpr
    | TypedSeqExpr SeqExpr TypeConstraint
    | ValLongident_ ValLongident
    | Constant_ Constant
    | ConstrName ConstrLongident
    | NameTag_ NameTag
    | ObjectExpr [ObjectExprField]
    | EmptyObjectExpr
    | QualifiedArrayExpr_ ModLongident SeqExpr
    | QualifiedObjectExpr ModLongident [ObjectExprField]
    | Extension Extension
    | EmptyQualifiedArrayAccess ModLongident
    | RecordExpr_ RecordExprContent
    | RecordAccess ModLongident RecordExprContent
    | ArrayExpr_ [Expr]
    | EmptyArrayExpr
    | ArrayAccesss ModLongident [Expr]
    | ArrayAccesssTodo ModLongident
    | StringExpr_ [Expr]
    | StringAccess ModLongident [Expr]
    | StringAccessTodo ModLongident
    | QualifiedModule ModLongident Ext [Attribute] ModuleExpr ModuleType
    | BeginEnd Ext [Attribute] SeqExpr
    | EmptyBeginEnd Ext [Attribute]
    | New Ext [Attribute] ClassLongident
    | Module Ext [Attribute] ModuleExpr
    | TypedModule Ext [Attribute] ModuleExpr ModuleType
    | Object Ext [Attribute] ClassStructure
    | PrefixApp PREFIXOP SimpleExpr
    | BangApp SimpleExpr
    | ArrayExpr SimpleExpr SeqExpr
    | RecordExpr SimpleExpr SeqExpr
    | StringExpr SimpleExpr SeqExpr
    | QualifiedArrayExpr SimpleExpr QualifiedDotop [Expr]
    | QualifiedRecordExpr SimpleExpr QualifiedDotop [Expr]
    | QualifiedStringExpr SimpleExpr QualifiedDotop [Expr]
    | RecordAccessTodo SimpleExpr LabelLongident
    | MethodInvocation SimpleExpr LIDENT
    | HashOp SimpleExpr HASHOP SimpleExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabeledSimpleExpr
    = LabeldSimpleExpr16 SimpleExpr
    | LabeledExpr16 LABEL SimpleExpr
    | Label16 LIDENT
    | TypedLabel16 LIDENT TypeConstraint
    | OptLabel16 LIDENT
    | OptLabeledExpr16 OPTLABEL SimpleExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetBindingBodyNoPunning
    = StrictBinding ValIdent StrictBinding
    | MonoTypedBinding ValIdent TypeConstraint SeqExpr
    | PolyTypedBinding ValIdent [TypeVar] CoreType SeqExpr
    | TypedBindingTodo ValIdent [LIDENT] CoreType SeqExpr
    | PatternNoExnBindingNoPunning PatternNoExn SeqExpr
    | TypedBinding SimplePatternNotIdent CoreType SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetBindingBody
    = LetBindingBodyNoPunning LetBindingBodyNoPunning
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetBindingsNoExt
    = SingleLetBindingNoExt [Attribute] RecFlag LetBindingBody [PostItemAttribute]
    | MultipleLetBindingNoExt LetBindingsNoExt AndLetBinding
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetBindingsExt
    = SingleLetBindingExt Ext [Attribute] RecFlag LetBindingBody [PostItemAttribute]
    | MultipleLetBindingExt LetBindingsExt AndLetBinding
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndLetBinding
    = AndLetBinding [Attribute] LetBindingBody [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetopBindingBody
    = LetIdent ValIdent StrictBinding
    | LetopValIdent ValIdent
    | SimplePatternBinding SimplePattern CoreType SeqExpr
    | PatternNoExnBinding PatternNoExn SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetopBindings
    = BindingBody LetopBindingBody
    | AndOpBinding LetopBindings ANDOP LetopBindingBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StrictBinding
    = Binding SeqExpr
    | FunParams [FunParamAsList] OptionalTypeConstraint FunBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunBody
    = FunBodyFunction Ext [Attribute] [MatchCase]
    | FunBodyFinalFunExpr FunExpr
    | FunBodyFinalFunExprSemi FunExpr
    | FunBodyMoreFunExprs FunExpr SeqExpr
    | FunBodyMoreFunExprsAttr FunExpr [AttrId] SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchCase
    = MatchCase Pattern SeqExpr
    | GuardedMatchCase Pattern SeqExpr SeqExpr
    | UnreachableMatchCase Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunParamAsList
    = FunParam1 [LIDENT] | FunParam2 LabeledSimplePattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExprComma = ExprComma Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecordExprFields
    = FinalRecordExprField1 RecordExprField
    | FinalRecordExprField2 RecordExprField
    | MoreRecordExprFields RecordExprField RecordExprFields
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecordExprContent
    = RecordExprContent1 SimpleExpr RecordExprFields
    | RecordExprContent2 RecordExprFields
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalTypeConstraint
    = NoTypeConstraint | ATypeConstraint TypeConstraint
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecordExprField
    = RecordExprField LabelLongident OptionalTypeConstraint OptionalAssignExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalAssignExpr = NoAssign | AnAssign Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ObjectExprField = ObjectExprField LIDENT OptionalAssignExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeConstraint
    = TypeConstraint CoreType
    | TypeConstraintCoercion CoreType CoreType
    | TypeCoercion CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pattern
    = Pattern PatternPattern | ExceptionPattern Ext [Attribute] Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PatternNoExn = PatternNoExn PatternPatternNoExn
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PatternPattern
    = ConsPattern Pattern Pattern
    | PatternWithAttribute Pattern Attribute
    | PatternGen PatternGen
    | AsPattern Pattern ValIdent
    | TuplePattern PatternCommaListPattern
    | OrPattern Pattern Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PatternPatternNoExn
    = ConsPatternNoExn PatternNoExn Pattern
    | PatternWithAttributeNoExn PatternNoExn Attribute
    | PatternGenNoExn PatternGen
    | AsPatternNoExn PatternNoExn ValIdent
    | TuplePatternNoExn PatternCommaListPatternNoExn
    | OrPatternNoExn PatternNoExn Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PatternGen
    = SimplePatternGen SimplePattern
    | ConstrPattern ConstrLongident Pattern
    | ConstrTypePattern ConstrLongident [LIDENT] SimplePattern
    | TagPatternGen NameTag Pattern
    | LazyPattern Ext [Attribute] SimplePattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SimplePattern
    = ValIdent ValIdent | SimplePatternNotIdent SimplePatternNotIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SimplePatternNotIdent
    = ParenPattern Pattern
    | SimpleDelimitedPattern SimpleDelimitedPattern
    | ParenModule Ext [Attribute] ModuleName
    | TypedParenModule Ext [Attribute] ModuleName PackageType
    | SimplePatternNotIdent_ SimplePatternNotIdent_
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SimplePatternNotIdent_
    = UnderscorePattern
    | ConstantPattern SignedConstant
    | RangePattern SignedConstant SignedConstant
    | ConstrNamePattern ConstrLongident
    | TagPattern NameTag
    | TypeConstrPattern TypeLongident
    | DotPattern ModLongident SimpleDelimitedPattern
    | EmptyStringPattern ModLongident
    | EmptyArrayPattern_ ModLongident
    | ArrayPattern_ ModLongident Pattern
    | TypedPattern Pattern CoreType
    | ModulePattern Ext [Attribute] ModuleName PackageType
    | ExtensionPattern Extension
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SimpleDelimitedPattern
    = RecordPattern RecordPatContent
    | ListPattern [PatternSemi]
    | ArrayPattern [PatternSemi]
    | EmptyArrayPattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PatternCommaListPattern
    = MorePattern PatternCommaListPattern Pattern
    | TwoPattern Pattern Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PatternCommaListPatternNoExn
    = MorePatternNoExn PatternCommaListPatternNoExn Pattern
    | TwoPatternNoExn PatternNoExn Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PatternSemi = PatternSemi Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalSemi = NoSemi | ASemi
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecordPatContent
    = FinalRecordPattern RecordPatField OptionalSemi
    | UnderscoreRecordPattern RecordPatField OptionalSemi
    | MoreRecordPatterns RecordPatField RecordPatContent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalCoreType = NoCoreType | ACoreType CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalAssignPattern
    = NoAssignPattern | AnAssignPattern Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecordPatField
    = RecordPatField LabelLongident OptionalCoreType OptionalAssignPattern
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValueDescription
    = ValueDescription Ext [Attribute] ValIdent PolyType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PrimitiveDeclaration
    = PrmitiveDeclaration Ext [Attribute] ValIdent PolyType [STRING] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndTypeDeclaration
    = AndTypeDeclaration [Attribute] TypeParameters LIDENT TypeKind [Constraint] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSubstDeclarations
    = TypeSubstDeclarations TypeSubstDeclaration [AndTypeSubstDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AndTypeSubstDeclaration
    = AndTypeSubstDeclaration [Attribute] TypeParameters LIDENT TypeSubstKind [Constraint] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeDeclaration
    = NonrecTypeDeclaration Ext [Attribute] TypeParameters LIDENT TypeKind [Constraint] [PostItemAttribute]
    | TypeDeclaration Ext [Attribute] TypeParameters LIDENT TypeKind [Constraint] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSubstDeclaration
    = TypeSubstDeclaration Ext [Attribute] TypeParameters LIDENT TypeSubstKind [Constraint] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Constraint = Constraint Constrain
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NonemptyTypeKind
    = AbstractType CoreType
    | VariantType ConstructorDeclarations
    | OpenType
    | RecordType LabelDeclarations
    | PrivateAbstractType CoreType
    | PrivateVariantType ConstructorDeclarations
    | PrivateOpenType
    | PrivateRecordType LabelDeclarations
    | TypeSynonymVariantType CoreType ConstructorDeclarations
    | TypeSynonymPrivateVariantType CoreType ConstructorDeclarations
    | TypeSynonymOpenType CoreType
    | TypeSynonymPrivateOpenType CoreType
    | TypeSynonymRecordType CoreType LabelDeclarations
    | TypeSynonymPrivateRecordType CoreType LabelDeclarations
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeKind = NoTypeKind | TypeKind NonemptyTypeKind
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSubstKind = TypeSubstKind NonemptyTypeKind
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeParameters
    = NoTypeParameters
    | SingleTypeParameter TypeParameter
    | TypeParameters [TypeParameter]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeParameter = TypeParameter TypeVariance TypeVariable
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeVariable = TypeVariable OCamlIdent | Underscore
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeVariance
    = NoVarianceNoInjectivity
    | CovariantNoInjectivity
    | ContravariantNoInjectivity
    | NoVarianceInjective
    | CovariantInjective
    | InjectiveCovariant
    | ContravariantInjective
    | InjectiveContravariant
    | InfixOpVariance PLUSMINUSOP
    | PrefixOpVariance PREFIXOP
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstructorDeclarations
    = EmptyConstructorDeclarations
    | BarConstructorDeclarations [ConstructorDeclaration]
    | ConstructorDeclarations [ConstructorDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstructorDeclaration
    = ConstructorDeclaration ConstrIdent GeneralizedConstructorArguments [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StrExceptionDeclaration
    = SigStrExceptionDeclaration SigExceptionDeclaration
    | Exception Ext [Attribute] ConstrIdent ConstrLongident [Attribute] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SigExceptionDeclaration
    = SigExceptionDeclaration Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetExceptionDeclaration
    = LetExceptionDeclaration ConstrIdent GeneralizedConstructorArguments [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data GeneralizedConstructorArguments
    = NoGeneralizedConstructorArguments
    | GeneralizedConstructorArguments1 ConstructorArguments
    | GeneralizedConstructorArguments2 ConstructorArguments AtomicType
    | GeneralizedConstructorArguments3 [TypeVar] ConstructorArguments AtomicType
    | GeneralizedConstructorArguments4 AtomicType
    | GeneralizedConstructorArguments5 [TypeVar] AtomicType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstructorArguments
    = Arg1 [AtomicType] | Arg2 LabelDeclarations
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabelDeclarations
    = FinalLabelDeclaration LabelDeclaration
    | FinalLabelDeclarationSemi LabelDeclarationSemi
    | MoreLabelDeclarations LabelDeclarationSemi LabelDeclarations
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabelDeclaration
    = LabelDeclarationMonoType MutableFlag LIDENT AliasType [Attribute]
    | LabelDeclarationPolyType MutableFlag LIDENT [TypeVar] AliasType [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabelDeclarationSemi
    = LabelDeclarationSemiMonoType MutableFlag LIDENT AliasType [Attribute] [Attribute]
    | LabelDeclarationSemiPolyType MutableFlag LIDENT [TypeVar] AliasType [Attribute] [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StrTypeExtension
    = StrTypeExtension Ext [Attribute] TypeParameters TypeLongident PrivateFlag BarLlistExtensionConstructor [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BarLlistExtensionConstructor
    = NoExtensionConstructors
    | BarExtensionConstructors [ExtensionConstructor]
    | ExtensionConstructors [ExtensionConstructor]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SigTypeExtension
    = SigTypeExtension Ext [Attribute] TypeParameters TypeLongident PrivateFlag BarLlistExtensionConstructorDeclaration [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BarLlistExtensionConstructorDeclaration
    = NoConstructor | Constructor [ExtensionConstructorDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExtensionConstructor
    = Declaration ExtensionConstructorDeclaration
    | Rebind ExtensionConstructorRebind
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExtensionConstructorDeclaration
    = ExtensionConstructorDeclaration ConstrIdent GeneralizedConstructorArguments [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExtensionConstructorRebind
    = ExtensionConstructorRebind ConstrIdent ConstrLongident [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WithConstraint
    = WithConstraint1 TypeParameters LabelLongident WithTypeBinder AliasType [Constraint]
    | WithConstraint2 TypeParameters LabelLongident AliasType
    | WithConstraint3 ModLongident ModExtLongident
    | WithConstraint4 ModLongident ModExtLongident
    | WithConstraint5 MtyLongident ModuleType
    | WithConstraint6 MtyLongident ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WithTypeBinder
    = WithTypeBinderEqual | WithTypeBinderEqualPrivate
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeVar = TypeVarIdent OCamlIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PolyType
    = MonoCoreType CoreType | PolyCoreType [TypeVar] CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CoreType
    = CoreTypeWithoutAttribute AliasType
    | CoreTypeWithAttribute CoreType Attribute
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AliasType
    = FunctionType FunctionType | AliasType AliasType TypeVar
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionType
    = TupleType TupleType
    | FunTypeWithOptLabel OPTLABEL TupleType FunctionType
    | FunTypeWithOptionalLabel LIDENT TupleType FunctionType
    | FunTypeWithtLabel LIDENT TupleType FunctionType
    | FunTypeWithoutLabel TupleType FunctionType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TupleType
    = AtomicType AtomicType | AtomicTypes AtomicType [AtomicType]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalBar = NoBar | ABar
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DelimitedTypeSupportingLocalOpen
    = LocalOpen1 CoreType
    | LocalOpen2 Ext [Attribute] PackageType
    | LocalOpen3 TagField
    | LocalOpen4 [RowField]
    | LocalOpen5 RowField [RowField]
    | LocalOpen6 OptionalBar [RowField]
    | LocalOpen7
    | LocalOpen8 OptionalBar [RowField]
    | LocalOpen9 OptionalBar [RowField] [NameTag]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ObjectType = MethList MethList | Empty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DelimitedType
    = ObjectType ObjectType
    | DelimitedTypeExtension Extension
    | DelimitedTypeSupportingLocalOpen DelimitedTypeSupportingLocalOpen
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AtomicType
    = DelimitedType DelimitedType
    | TypeConstr TypeLongident
    | SimpleTypeApp AtomicType TypeLongident
    | ComplexTypeApp CoreType [CoreType] TypeLongident
    | ClassTypeConstr CltyLongident
    | SimpleSubTypeApp AtomicType CltyLongident
    | ComplexSubTypeApp CoreType [CoreType] CltyLongident
    | QualifiedDelimitedType ModExtLongident DelimitedTypeSupportingLocalOpen
    | TypeVar OCamlIdent
    | UnderscoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PackageType = PackageType ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RowField = TagField TagField | CoreType CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TagField
    = Of NameTag OptAmpersand [AliasType] [Attribute]
    | Tag NameTag [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptAmpersand = Ampersand | NoAmpersand
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MethList
    = FieldSemiMethListMonoType LIDENT AliasType [Attribute] [Attribute] MethList
    | FieldSemiMethListPolyType LIDENT [TypeVar] AliasType [Attribute] [Attribute] MethList
    | InheritSemiMethList AtomicType MethList
    | FieldSemiMonoType LIDENT AliasType [Attribute]
    | FieldSemiPolyType LIDENT [TypeVar] AliasType [Attribute]
    | InheritSemi AtomicType
    | FieldMonoType LIDENT AliasType [Attribute]
    | FieldPolyType LIDENT [TypeVar] AliasType [Attribute]
    | Inherit AtomicType
    | DotDot
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Constant = Int INT | Char CHAR | String STRING | Float FLOAT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SignedConstant
    = Constant Constant
    | NegInt INT
    | NegFloat FLOAT
    | PosInt INT
    | PosFloat FLOAT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OCamlIdent = Uppercase UIDENT | Lowercase LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValExtraIdent = Operator Operator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValIdent
    = LowercaseValIdent LIDENT | ValExtraIdent ValExtraIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Operator
    = PrefixOp PREFIXOP
    | LetOp LETOP
    | AndOp ANDOP
    | ArrayAccessOp DOTOP IndexMod
    | ArrayUpdateOp DOTOP IndexMod
    | StringAccessOp DOTOP IndexMod
    | StringUpdateOp DOTOP IndexMod
    | RecordAccessOp DOTOP IndexMod
    | RecordUpdateOp DOTOP IndexMod
    | HashSymbolOp HASHOP
    | BangOp
    | InfixOp InfixOperator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data InfixOperator
    = RelOp RELOP
    | InfixEqual
    | InfixLess
    | InfixGreater
    | InfixBarBar
    | InfixAmpersand
    | InfixAmpersandAmpersand
    | ConcatOp CONCATOP
    | PlusMinusOp PLUSMINUSOP
    | InfixPlus
    | InfixMinus
    | MultDivOp MULTDIVOP
    | InfixStar
    | InfixSlash
    | InfixPercent
    | PowOp POWOP
    | InfixOr
    | InfixColonEqual
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IndexMod = NoIndexMod | SemiDotDot
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstrExtraIdent = ConstrIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstrExtraNonprefixIdent
    = Brackets | Parens | FalseLiteral | TrueLiteral
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstrIdent
    = ConstrUppercaseIdent UIDENT
    | ConstrExtraIdent ConstrExtraIdent
    | ConstrExpraNonprefixIdent ConstrExtraNonprefixIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstrLongident
    = ModLongidentTodo ModLongident
    | QualifiedConstrExtraLongident ModLongident ConstrExtraIdent
    | ConstrExtraLongdent ConstrExtraIdent
    | ConstrExtraNonprefixLonident ConstrExtraNonprefixIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValLongident
    = ValLongident ValIdent
    | QualifiedValLongident ModLongident ValIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabelLongident
    = LabelLongident LIDENT
    | QualifiedLabelLongident ModLongident LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeLongident
    = TypeLongident LIDENT
    | QualifiedTypelLongident ModExtLongident LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModLongident
    = ModLongident UIDENT | QualifiedModLongident ModLongident UIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModExtLongident
    = ModExtLongident UIDENT
    | QualifiedModExtLongident ModExtLongident UIDENT
    | ParenModExtLongident ModExtLongident ModExtLongident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MtyLongident
    = MtyLongident OCamlIdent
    | QualifiedMtyLongident ModExtLongident OCamlIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CltyLongident
    = CltyLongident LIDENT
    | QualifiedCltyLongident ModExtLongident LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassLongident
    = ClassLongident LIDENT
    | QualifiedClassLongident ModLongident LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalToplevelDirectiveArgument
    = NoToplevelDirectiveArgument
    | AToplevelDirectiveArgument ToplevelDirectiveArgument
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ToplevelDirective
    = ToplevelDirectiveApp OCamlIdent ToplevelDirectiveArgument
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ToplevelDirectiveArgument
    = ToplevelString STRING
    | ToplevelInt INT
    | ValueIdent ValLongident
    | ToplevelModuleIdent ModLongident
    | ToplevelFalse
    | ToplevelTrue
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NameTag = NameTag OCamlIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RecFlag = Nonrecursive | Recursive
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DirectionFlag = UpTo | DownTo
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PrivateFlag = Public | Private
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MutableFlag = Immutable | Mutable
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VirtualFlag = Concrete | Virtual
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MutableVirtualFlags
    = ImmutableContrete
    | MutableConcrete
    | ImmutableVirtual
    | MutableVirtual
    | VirtualMutable
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PrivateVirtualFlags
    = PublicConcrete
    | PrivateConcrete
    | PublicVirtual
    | PrivateVirtual
    | VirtualPrivate
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VirtualWithMutableFlag
    = VirtualWithImmutable | MutableWithVirtual | VirtualWithMutable
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VirtualWithPrivateFlag
    = VirtualWithPublic | PrivateWithVirtual | VirtualWithPrivate
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NoOverrideFlag = NoFlag
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OverrideFlag = Fresh | Override
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Subtractive = Minus | MinusDot
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Additive = Plus | PlusDot
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AttrId
    = LowercaseAttr LIDENT
    | UppercaseAttr UIDENT
    | AndAttr
    | AsAttr
    | AssertAttr
    | BeginAttr
    | ClassAttr
    | ConstraintAttr
    | DoAttr
    | DoneAttr
    | DowntoAttr
    | ElseAttr
    | EndAttr
    | ExceptionAttr
    | ExternalAttr
    | FalseAttr
    | ForAttr
    | FunAttr
    | FunctionAttr
    | FunctorAttr
    | IfAttr
    | InAttr
    | IncludeAttr
    | InheritAttr
    | InitializerAttr
    | LazyAttr
    | LetAttr
    | MatchAttr
    | MethodAttr
    | ModuleAttr
    | MutableAttr
    | NewAttr
    | NonrecAttr
    | ObjectAttr
    | OfAttr
    | OpenAttr
    | OrAttr
    | PrivateAttr
    | RecAttr
    | SigAttr
    | StructAttr
    | ThenAttr
    | ToAttr
    | TrueAttr
    | TryAttr
    | TypeAttr
    | ValAttr
    | VirtualAttr
    | WhenAttr
    | WhileAttr
    | WithAttr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Attribute = Attribute [AttrId] AttrPayload
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PostItemAttribute = PostItemAttribute [AttrId] AttrPayload
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FloatingAttribute = FloatingAttribute [AttrId] AttrPayload
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Ext = NoExt | Ext [AttrId]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Extension
    = ExtensionPayload [AttrId] Payload
    | QuotedStringExpr QUOTED_STRING_EXPR
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ItemExtension
    = ItemExtensionPayload [AttrId] Payload
    | QuotedStringItem QUOTED_STRING_ITEM
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Payload
    = PayloadStructure Structure
    | PayloadSignature Signature
    | PayloadCoreType CoreType
    | PayloadPattern Pattern
    | PayloadGuardedPattern Pattern SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AttrPayload = AttrPayload Payload
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype CHAR = CHAR String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype FLOAT = FLOAT String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype RELOP = RELOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CONCATOP = CONCATOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype PLUSMINUSOP = PLUSMINUSOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype MULTDIVOP = MULTDIVOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype POWOP = POWOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype DOTOP = DOTOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype LETOP = LETOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype ANDOP = ANDOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype DecimalLiteral = DecimalLiteral String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype DecimalLiteralModifier = DecimalLiteralModifier String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype HexLiteral = HexLiteral String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype HexLiteralModifier = HexLiteralModifier String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype OctLiteral = OctLiteral String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype OctLiteralModifier = OctLiteralModifier String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype BinLiteral = BinLiteral String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype BinLiteralModifier = BinLiteralModifier String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype LABEL = LABEL String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype LIDENT = LIDENT String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype OPTLABEL = OPTLABEL String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype PREFIXOP = PREFIXOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype HASHOP = HASHOP String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype STRING = STRING String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype QUOTED_STRING_EXPR = QUOTED_STRING_EXPR String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype QUOTED_STRING_ITEM = QUOTED_STRING_ITEM String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype UIDENT = UIDENT String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

