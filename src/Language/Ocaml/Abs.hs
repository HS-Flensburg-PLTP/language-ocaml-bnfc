-- File generated by the BNF Converter (bnfc 2.9.6).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language ocaml.

module Language.Ocaml.Abs where

import Prelude (String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )
import qualified Data.String

import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

data INT
    = ModifiedDecimal DecimalLiteralModifier
    | Decimal DecimalLiteral
    | ModifiedHex HexLiteralModifier
    | Hex HexLiteral
    | ModifiedOct OctLiteralModifier
    | Oct OctLiteral
    | ModifiedBin BinLiteralModifier
    | Bin BinLiteral
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Implementation = Implementation Structure
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Interface = Interface Signature
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ToplevelPhrase
    = StrExpr SeqExpr [PostItemAttribute]
    | StructureItems [StructureItem]
    | ToplevelDirective ToplevelDirective
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data UseFile
    = UseFile [UseFileElement]
    | UseFileWithStrExp SeqExpr [PostItemAttribute] [UseFileElement]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data UseFileElement
    = NoUseFileElement
    | UseFileStrExp SeqExpr [PostItemAttribute]
    | UseFileStructureItem StructureItem
    | UseFileToplevelDirective ToplevelDirective
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data FunctorArg = NoFunctorArg | FunctorArg ModuleName ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModuleName = ModuleNameIdent UIDENT | ModuleNameUnderscore
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModuleExpr
    = ModuleExprStruct [Attribute] Structure
    | ModuleExprFunctor [Attribute] [FunctorArg] ModuleExpr
    | ModuleExprParen ParenModuleExpr
    | ModuleExprWithAttribute ModuleExpr Attribute
    | ModuleExprIdent ModLongident
    | ModuleExprFunctorApp ModuleExpr ParenModuleExpr
    | FunctorAppUnit ModuleExpr
    | ModuleExprExtension Extension
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ParenModuleExpr
    = ModuleExprWithType ModuleExpr ModuleType
    | ModuleExpr ModuleExpr
    | ValParenModuleExpr [Attribute] ExprColonPackageType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ExprColonPackageType
    = Expr Expr
    | ExprWithType Expr ModuleType
    | ExprWithCoercionFromTo Expr ModuleType ModuleType
    | ExprWithCoercionTo Expr ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Structure
    = WithStandaloneExpression SeqExpr [PostItemAttribute] [StructureElement]
    | WithoutStandaloneExpression [StructureElement]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data StructureElement
    = StandaloneExpression SeqExpr [PostItemAttribute]
    | StructureItem StructureItem
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data StructureItem
    = StrLetBindings LetBindingsExt
    | StrItemExtension ItemExtension [PostItemAttribute]
    | StrFloatingAttribute FloatingAttribute
    | StrPrimitiveDeclaration PrimitiveDeclaration
    | StrValueDescription ValueDescription
    | StrTypeDeclarations TypeDeclaration [AndTypeDeclaration]
    | StrTypeExtension Ext [Attribute] TypeParameters TypeLongident PLUSEQ PrivateFlag BarLlistExtensionConstructor [PostItemAttribute]
    | StrExceptionDeclaration StrExceptionDeclaration
    | StrModuleBinding Ext [Attribute] ModuleName ModuleBindingBody [PostItemAttribute]
    | StrRecModuleBindings Ext [Attribute] ModuleName ModuleBindingBody [PostItemAttribute] [AndModuleBinding]
    | StrModuleTypeDeclaration ModuleTypeDeclaration
    | StrOpenDeclaration OpenDeclaration
    | StrClassDeclarations Ext [Attribute] VirtualFlag FormalClassParameters LIDENT ClassFunBinding [PostItemAttribute] [AndClassDeclaration]
    | StrClassTypeDeclarations ClassTypeDeclarations
    | StrIncludeStatement Ext [Attribute] ModuleExpr [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModuleBindingBody
    = ModuleBinding EQUAL ModuleExpr
    | ModuleBindingWitgType ModuleType EQUAL ModuleExpr
    | FunctorBinding FunctorArg ModuleBindingBody
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AndModuleBinding
    = AndModuleBinding [Attribute] ModuleName ModuleBindingBody [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalModuleType
    = NoModuleType | AModuleType EQUAL ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModuleTypeDeclaration
    = ModuleTypeDeclaration Ext [Attribute] OCamlIdent OptionalModuleType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OpenDeclaration
    = OpenDeclaration OverrideFlag Ext [Attribute] ModuleExpr [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OpenDescription
    = OpenDescription OverrideFlag Ext [Attribute] ModExtLongident [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModuleType
    = ModuleTypeSignature [Attribute] Signature
    | ModuleTypeFunctor [Attribute] [FunctorArg] ModuleType
    | ModuleTypeOf [Attribute] ModuleExpr
    | ModuleType ModuleType
    | ModuleTypeWithAttribute ModuleType Attribute
    | ModuleTypeModuleIdent ModLongident
    | ModuleTypeNoArgFunctorApp ModuleType
    | ModuleTypeFunctorApp ModuleType ModuleType
    | ModuleTypeWith ModuleType [WithConstraint]
    | ModuleTypeExtension Extension
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Signature = Signature [SignatureElement]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SignatureElement = SigSemiSemi | SigItem SignatureItem
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SignatureItem
    = SigItemExtension ItemExtension [PostItemAttribute]
    | SigFloatingAttribute FloatingAttribute
    | SigValueDescription ValueDescription
    | SigPrimitiveDeclaration PrimitiveDeclaration
    | SigTypeDeclarations TypeDeclaration [AndTypeDeclaration]
    | SigTypeSubstDeclarations TypeSubstDeclarations
    | SigTypeExtension Ext [Attribute] TypeParameters TypeLongident PLUSEQ PrivateFlag BarLlistExtensionConstructorDeclaration [PostItemAttribute]
    | SigSigExceptionDeclaration SigExceptionDeclaration
    | SigModuleDeclaration Ext [Attribute] ModuleName ModuleDeclarationBody [PostItemAttribute]
    | SigModuleAlias Ext [Attribute] ModuleName EQUAL ModLongident [PostItemAttribute]
    | SigModuleSubst ModuleSubst
    | SigRecModuleDeclarations Ext [Attribute] ModuleName ModuleType [PostItemAttribute] [AndModuleDeclaration]
    | SigModuleTypeDeclaration ModuleTypeDeclaration
    | SigModuleTypeSubst ModuleTypeSubst
    | SigOpenDescription OpenDescription
    | SigIncludeStatement Ext [Attribute] ModuleType [PostItemAttribute]
    | SigClassDescription Ext [Attribute] VirtualFlag FormalClassParameters LIDENT ClassType [PostItemAttribute] [AndClassDescription]
    | SigClassTypeDeclarations ClassTypeDeclarations
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModuleDeclarationBody
    = ModuleBody ModuleType
    | FunctorBody FunctorArg ModuleDeclarationBody
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModuleSubst
    = ModuleSubst Ext [Attribute] UIDENT COLONEQUAL ModExtLongident [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AndModuleDeclaration
    = AndModuleDeclaration [Attribute] ModuleName ModuleType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModuleTypeSubst
    = ModuleTypeSubst Ext [Attribute] OCamlIdent COLONEQUAL ModuleType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AndClassDeclaration
    = AndClassDeclaration [Attribute] VirtualFlag FormalClassParameters LIDENT ClassFunBinding [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassFunBinding
    = ClassFunBinding EQUAL ClassExpr
    | ClassFunBindingWithType ClassType EQUAL ClassExpr
    | LabeledClassFunBinding LabeledSimplePattern ClassFunBinding
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data FormalClassParameters
    = NoFormalClassParamters | FormalClassParameters [TypeParameter]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassExpr
    = ClassSimpleExpr ClassSimpleExpr
    | ClassExprFunctor [Attribute] ClassFunDef
    | ClassExprLetBindings LetBindingsNoExt ClassExpr
    | ClassExprLetOpen OverrideFlag [Attribute] ModLongident ClassExpr
    | ClassExprWithAttribute ClassExpr Attribute
    | LabeledClassSimpleExpr ClassSimpleExpr [LabeledSimpleExpr]
    | ClassExprExtension Extension
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassSimpleExpr
    = ClassExpr ClassExpr
    | ClassName ClassLongident
    | ClassNameWithParamters [CoreType] ClassLongident
    | ClassExprWithType ClassExpr ClassType
    | ClassSimplExprObject [Attribute] ClassSelfPattern [ClassField]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassFunDef
    = ClassFun LabeledSimplePattern ClassExpr
    | LabeledClassFunDef LabeledSimplePattern ClassFunDef
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassSelfPattern
    = ClassPattern Pattern
    | ClassPatternWithType Pattern CoreType
    | NoClassSelfPattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalAs = NoAs | AAs LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassField
    = ClassFieldInherit OverrideFlag [Attribute] ClassExpr OptionalAs [PostItemAttribute]
    | ClassFieldVal Value [PostItemAttribute]
    | ClassFieldMethod Method_ [PostItemAttribute]
    | ClassFieldConstraint [Attribute] CoreType EQUAL CoreType [PostItemAttribute]
    | ClassFieldInitializer [Attribute] SeqExpr [PostItemAttribute]
    | ClassFieldItemExtension ItemExtension [PostItemAttribute]
    | ClassFieldFloatingAttribute FloatingAttribute
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Value
    = Value1 NoOverrideFlag [Attribute] VirtualWithMutableFlag LIDENT CoreType
    | Value2 OverrideFlag [Attribute] MutableFlag LIDENT EQUAL SeqExpr
    | Value3 OverrideFlag [Attribute] MutableFlag LIDENT TypeConstraint EQUAL SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Method_
    = VirtualMethod NoOverrideFlag [Attribute] VirtualWithPrivateFlag LIDENT PolyType
    | Method OverrideFlag [Attribute] PrivateFlag LIDENT StrictBinding
    | MethodWithType OverrideFlag [Attribute] PrivateFlag LIDENT PolyType EQUAL SeqExpr
    | MethodWithLocallyAbstractType OverrideFlag [Attribute] PrivateFlag LIDENT [LIDENT] CoreType EQUAL SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassType
    = ClassSignature ClassSignature
    | ClassTypeWithOptLabel OptLabel TupleType ClassType
    | ClassTypeWithOptionalLabel LIDENT TupleType ClassType
    | ClassTypeWithtLabel LIDENT TupleType ClassType
    | ClassTypeWithoutLabel TupleType ClassType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassSignature
    = ClassSignatureName CltyLongident
    | ClassSignatureNameWithParamters [CoreType] CltyLongident
    | ClassSignatureExtension Extension
    | ClassSignatureObject [Attribute] ClassSelfType [ClassSigField]
    | WithAttribute ClassSignature Attribute
    | ClassSignatureLetOpen OverrideFlag [Attribute] ModLongident ClassSignature
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassSelfType = ClassSelfType CoreType | NoClassSelfType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassSigField
    = ClassSigFieldInherit [Attribute] ClassSignature [PostItemAttribute]
    | ClassSigFieldVal [Attribute] MutableVirtualFlags LIDENT CoreType [PostItemAttribute]
    | ClassSigFieldMethod [Attribute] PrivateVirtualFlags LIDENT PolyType [PostItemAttribute]
    | ClassSigFieldConstraint [Attribute] ConstrainField [PostItemAttribute]
    | ClassSigFieldItemExtension ItemExtension [PostItemAttribute]
    | ClassSigFieldFloatingAttribute FloatingAttribute
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstrainField = ConstrainField CoreType EQUAL CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AndClassDescription
    = AndClassDescription [Attribute] VirtualFlag FormalClassParameters LIDENT ClassType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassTypeDeclarations
    = ClassTypeDeclarations Ext [Attribute] VirtualFlag FormalClassParameters LIDENT EQUAL ClassSignature [PostItemAttribute] [AndClassTypeDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AndClassTypeDeclaration
    = AndClassTypeDeclaration [Attribute] VirtualFlag FormalClassParameters LIDENT EQUAL ClassSignature [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SeqExpr
    = FinalFunExpr FunExpr
    | FinalFunExprSemi FunExpr
    | MoreFunExprs FunExpr SeqExpr
    | MoreFunExprsAttr FunExpr PERCENT [AttrId] SeqExpr
    | SeqExprFunction Ext [Attribute] [MatchCase]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LabeledSimplePattern
    = OptPattern LabelLetPattern
    | OptPatternWithDefault LabelLetPattern EQUAL SeqExpr
    | OptLabelPattern LIDENT
    | OptLabeledPattern OPTLABEL LetPattern
    | OptLabeledPatternWithDefault OPTLABEL LetPattern EQUAL SeqExpr
    | OptLabeledVar OPTLABEL PatternVar
    | LabeledPattern LabelLetPattern
    | Label LIDENT
    | LabeledSimplePattern LABEL SimplePattern
    | SimplePattern SimplePattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PatternVar = PatternVar LIDENT | UnderscorePatternVar
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LabelLetPattern
    = LabelVar LIDENT | LabelVarWithType LIDENT CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LetPattern
    = LetPattern Pattern | LetPatternWithType Pattern CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data QualifiedDotop
    = Unqualified DOTOP | Qualified ModLongident DOTOP
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalAtomicTypeAnnotation
    = NoAtomicTypeAnnotation | AnAtomicTypeAnnotation AtomicType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data FunExpr
    = SimpleExprApp SimpleExpr [LabeledSimpleExpr]
    | ConstrApp ConstrLongident SimpleExpr
    | NameTagApp NameTag SimpleExpr
    | Assert Ext [Attribute] SimpleExpr
    | Lazy Ext [Attribute] SimpleExpr
    | SimpleExpr SimpleExpr
    | Subtractive Subtractive Expr
    | Additive Additive Expr
    | PowInfix FunExpr POWOP Expr
    | MultDivInfix FunExpr MULTDIVOP Expr
    | MultInfix FunExpr STAR Expr
    | ModInfix FunExpr PERCENT Expr
    | PlusMinusInfix FunExpr PLUSMINUSOP Expr
    | PlusInfix FunExpr PLUS Expr
    | PlusDotInfix FunExpr PLUSDOT Expr
    | PlusEqInfix FunExpr PLUSEQ Expr
    | MinusInfix FunExpr MINUS Expr
    | MinusDotInfix FunExpr MINUSDOT Expr
    | Cons FunExpr Expr
    | ConcatInfix FunExpr CONCATOP Expr
    | RelInfix FunExpr RELOP Expr
    | EqualInfix FunExpr EQUAL Expr
    | LessInfix FunExpr LESS Expr
    | GreaterInfix FunExpr GREATER Expr
    | AmpersandInfix FunExpr AMPERSAND Expr
    | AmperAmperInfix FunExpr AMPERAMPER Expr
    | OrInfix FunExpr OR Expr
    | BarBarInfix FunExpr BARBAR Expr
    | Comma Expr [ExprComma]
    | UpdateExpr LIDENT Expr
    | AssignInfix FunExpr COLONEQUAL Expr
    | QualifiedDot SimpleExpr LabelLongident Expr
    | ArrayUpdateExpr SimpleExpr SeqExpr Expr
    | StringUpdateExpr SimpleExpr SeqExpr Expr
    | BigArrayUpdateExpr SimpleExpr SeqExpr Expr
    | ParenDotopUpdateExpr SimpleExpr QualifiedDotop [Expr] Expr
    | BracketDotopUpdateExpr SimpleExpr QualifiedDotop [Expr] Expr
    | BraceDotopUpdateExpr SimpleExpr QualifiedDotop [Expr] Expr
    | IfElse Ext [Attribute] SeqExpr Expr Expr
    | If Ext [Attribute] SeqExpr Expr
    | Let LetBindingsExt SeqExpr
    | LetOpBinding LETOP LetopBindings SeqExpr
    | LetModule Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match Ext [Attribute] SeqExpr [MatchCase]
    | Try Ext [Attribute] SeqExpr [MatchCase]
    | While Ext [Attribute] SeqExpr SeqExpr
    | For Ext [Attribute] Pattern EQUAL SeqExpr DirectionFlag SeqExpr SeqExpr
    | FunExprWithAttribute FunExpr Attribute
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Expr
    = Function15 Ext [Attribute] [MatchCase]
    | Let15 LetBindingsExt SeqExpr
    | LetOpBinding15 LETOP LetopBindings SeqExpr
    | LetModule15 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException15 Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen15 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun15 Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match15 Ext [Attribute] SeqExpr [MatchCase]
    | Try15 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse15 Ext [Attribute] SeqExpr Expr Expr
    | If15 Ext [Attribute] SeqExpr Expr
    | FunExpr15 FunExpr
    | Function13 Ext [Attribute] [MatchCase]
    | Let13 LetBindingsExt SeqExpr
    | LetOpBinding13 LETOP LetopBindings SeqExpr
    | LetModule13 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException13 Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen13 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun13 Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match13 Ext [Attribute] SeqExpr [MatchCase]
    | Try13 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse13 Ext [Attribute] SeqExpr Expr Expr
    | If13 Ext [Attribute] SeqExpr Expr
    | FunExpr13 FunExpr
    | Function12 Ext [Attribute] [MatchCase]
    | Let12 LetBindingsExt SeqExpr
    | LetOpBinding12 LETOP LetopBindings SeqExpr
    | LetModule12 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException12 Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen12 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun12 Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match12 Ext [Attribute] SeqExpr [MatchCase]
    | Try12 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse12 Ext [Attribute] SeqExpr Expr Expr
    | If12 Ext [Attribute] SeqExpr Expr
    | FunExpr12 FunExpr
    | Function11 Ext [Attribute] [MatchCase]
    | Let11 LetBindingsExt SeqExpr
    | LetOpBinding11 LETOP LetopBindings SeqExpr
    | LetModule11 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException11 Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen11 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun11 Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match11 Ext [Attribute] SeqExpr [MatchCase]
    | Try11 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse11 Ext [Attribute] SeqExpr Expr Expr
    | If11 Ext [Attribute] SeqExpr Expr
    | FunExpr11 FunExpr
    | Function10 Ext [Attribute] [MatchCase]
    | Let10 LetBindingsExt SeqExpr
    | LetOpBinding10 LETOP LetopBindings SeqExpr
    | LetModule10 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException10 Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen10 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun10 Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match10 Ext [Attribute] SeqExpr [MatchCase]
    | Try10 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse10 Ext [Attribute] SeqExpr Expr Expr
    | If10 Ext [Attribute] SeqExpr Expr
    | FunExpr10 FunExpr
    | Function9 Ext [Attribute] [MatchCase]
    | Let9 LetBindingsExt SeqExpr
    | LetOpBinding9 LETOP LetopBindings SeqExpr
    | LetModule9 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException9 Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen9 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun9 Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match9 Ext [Attribute] SeqExpr [MatchCase]
    | Try9 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse9 Ext [Attribute] SeqExpr Expr Expr
    | If9 Ext [Attribute] SeqExpr Expr
    | FunExpr9 FunExpr
    | Function7 Ext [Attribute] [MatchCase]
    | Let7 LetBindingsExt SeqExpr
    | LetOpBinding7 LETOP LetopBindings SeqExpr
    | LetModule7 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException7 Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen7 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun7 Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match7 Ext [Attribute] SeqExpr [MatchCase]
    | Try7 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse7 Ext [Attribute] SeqExpr Expr Expr
    | If7 Ext [Attribute] SeqExpr Expr
    | FunExpr7 FunExpr
    | Function6 Ext [Attribute] [MatchCase]
    | Let6 LetBindingsExt SeqExpr
    | LetOpBinding6 LETOP LetopBindings SeqExpr
    | LetModule6 Ext [Attribute] ModuleName ModuleBindingBody SeqExpr
    | LetException6 Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] SeqExpr
    | LetOpen6 OverrideFlag Ext [Attribute] ModuleExpr SeqExpr
    | Fun6 Ext [Attribute] [FunParam] OptionalAtomicTypeAnnotation FunBody
    | Match6 Ext [Attribute] SeqExpr [MatchCase]
    | Try6 Ext [Attribute] SeqExpr [MatchCase]
    | IfElse6 Ext [Attribute] SeqExpr Expr Expr
    | If6 Ext [Attribute] SeqExpr Expr
    | FunExpr6 FunExpr
    | Function Ext [Attribute] [MatchCase]
    | FunExpr1 FunExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SimpleExpr
    = SeqExpr SeqExpr
    | SeqExprWithType SeqExpr TypeConstraint
    | ValLongident ValLongident
    | Constant Constant
    | ConstrName ConstrLongident
    | NameTagExpr NameTag
    | ListExpr [Expr]
    | RecordExpr RecordExprContent
    | EmptyArrayExpr
    | ArrayExpr [Expr]
    | EmptyObjectExpr
    | ObjectExpr [ObjectExprField]
    | LocalOpenUnit ModLongident
    | LocalOpenExpr ModLongident SeqExpr
    | LocalOpenEmptyListExpr ModLongident
    | LocalOpenListExpr ModLongident [Expr]
    | LocalOpenRecordExpr ModLongident RecordExprContent
    | LocalOpenEmptyArrayExpr ModLongident
    | LocalOpenArrayExpr ModLongident [Expr]
    | LocalOpenObjectExpr ModLongident [ObjectExprField]
    | LocalOpenModule ModLongident Ext [Attribute] ModuleExpr ModuleType
    | BeginEnd Ext [Attribute] SeqExpr
    | EmptyBeginEnd Ext [Attribute]
    | New Ext [Attribute] ClassLongident
    | Module Ext [Attribute] ModuleExpr
    | ModuleWithType Ext [Attribute] ModuleExpr ModuleType
    | Object Ext [Attribute] ClassSelfPattern [ClassField]
    | Extension Extension
    | PrefixApp PREFIXOP SimpleExpr
    | BangApp BANG SimpleExpr
    | RecordAccessExpr SimpleExpr LabelLongident
    | ArrayAccessExpr SimpleExpr SeqExpr
    | StringAccessExpr SimpleExpr SeqExpr
    | BigArrayAccessExpr SimpleExpr SeqExpr
    | ParenDotopAccessExpr SimpleExpr QualifiedDotop [Expr]
    | BracketDotopAccessExpr SimpleExpr QualifiedDotop [Expr]
    | BraceDotopAccessExpr SimpleExpr QualifiedDotop [Expr]
    | MethodInvocation SimpleExpr LIDENT
    | HashOp SimpleExpr HASHOP SimpleExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LabeledSimpleExpr
    = ExprWithoutLabel SimpleExpr
    | LabeledExpr LABEL SimpleExpr
    | LabeExpr LIDENT
    | LabelWithTypExpr LIDENT TypeConstraint
    | OptLabelExpr LIDENT
    | OptLabeledExpr OPTLABEL SimpleExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LetBindingBodyNoPunning
    = StrictBinding ValIdent StrictBinding
    | BindingWithMonoType ValIdent TypeConstraint EQUAL SeqExpr
    | BindingWithPolyType ValIdent [TypeVar] CoreType EQUAL SeqExpr
    | BindingWithLocallyAbstractType ValIdent [LIDENT] CoreType EQUAL SeqExpr
    | PatternBinding PatternNoExn EQUAL SeqExpr
    | PatternBindingWithType SimplePatternNotIdent CoreType EQUAL SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LetBindingBody
    = LetBindingBodyNoPunning LetBindingBodyNoPunning
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LetBindingsNoExt
    = SingleLetBindingNoExt [Attribute] RecFlag LetBindingBody [PostItemAttribute]
    | MultipleLetBindingNoExt LetBindingsNoExt AndLetBinding
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LetBindingsExt
    = SingleLetBindingExt Ext [Attribute] RecFlag LetBindingBody [PostItemAttribute]
    | MultipleLetBindingExt LetBindingsExt AndLetBinding
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AndLetBinding
    = AndLetBinding [Attribute] LetBindingBody [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LetopBindingBody
    = LetopStrictBinding ValIdent StrictBinding
    | LetopValIdent ValIdent
    | LetopPatternBindingWithType SimplePattern CoreType EQUAL SeqExpr
    | LetopPatternBinding PatternNoExn EQUAL SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LetopBindings
    = BindingBody LetopBindingBody
    | AndOpBinding LetopBindings ANDOP LetopBindingBody
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data StrictBinding
    = Binding EQUAL SeqExpr
    | FunParams [FunParam] OptionalTypeConstraint EQUAL FunBody
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data FunBody
    = FunBodyFunction Ext [Attribute] [MatchCase]
    | FunBodyFinalFunExpr FunExpr
    | FunBodyFinalFunExprSemi FunExpr
    | FunBodyMoreFunExprs FunExpr SeqExpr
    | FunBodyMoreFunExprsAttr FunExpr PERCENT [AttrId] SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data MatchCase
    = MatchCase Pattern SeqExpr
    | GuardedMatchCase Pattern SeqExpr SeqExpr
    | UnreachableMatchCase Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data FunParam
    = LocallyAbstractTypeParam [LIDENT] | Param LabeledSimplePattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ExprComma = ExprComma Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data RecordExprFields
    = FinalRecordExprField1 RecordExprField
    | FinalRecordExprField2 RecordExprField
    | MoreRecordExprFields RecordExprField RecordExprFields
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data RecordExprContent
    = RecordExprContent1 SimpleExpr RecordExprFields
    | RecordExprContent2 RecordExprFields
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalTypeConstraint
    = NoTypeConstraint | ATypeConstraint TypeConstraint
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data RecordExprField
    = RecordExprField LabelLongident OptionalTypeConstraint OptionalAssignExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalAssignExpr = NoAssign | AnAssign EQUAL Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ObjectExprField = ObjectExprField LIDENT OptionalAssignExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeConstraint
    = TypeConstraint CoreType
    | CoercionFromTo CoreType CoreType
    | CoercionTo CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Pattern
    = ConsPattern Pattern Pattern
    | PatternWithAttribute Pattern Attribute
    | PatternGen PatternGen
    | AsPattern Pattern ValIdent
    | TuplePattern PatternCommaListPattern
    | OrPattern Pattern Pattern
    | ExceptionPattern Ext [Attribute] Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PatternNoExn
    = ConsPatternNoExn PatternNoExn Pattern
    | PatternWithAttributeNoExn PatternNoExn Attribute
    | PatternGenNoExn PatternGen
    | AsPatternNoExn PatternNoExn ValIdent
    | TuplePatternNoExn PatternCommaListPatternNoExn
    | OrPatternNoExn PatternNoExn Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PatternGen
    = SimplePatternGen SimplePattern
    | ConstrPattern ConstrLongident Pattern
    | ConstrPatternWithLocallyAbstractType ConstrLongident [LIDENT] SimplePattern
    | TagPatternGen NameTag Pattern
    | LazyPattern Ext [Attribute] SimplePattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SimplePattern
    = ValIdent ValIdent | SimplePatternNotIdent SimplePatternNotIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SimplePatternNotIdent
    = Pattern Pattern
    | SimpleDelimitedPattern SimpleDelimitedPattern
    | ModulePattern Ext [Attribute] ModuleName
    | ModulePatternWithType Ext [Attribute] ModuleName PackageType
    | UnderscorePattern
    | ConstantPattern SignedConstant
    | RangePattern SignedConstant SignedConstant
    | ConstrNamePattern ConstrLongident
    | TagPattern NameTag
    | TypeConstrPattern TypeLongident
    | DotPattern ModLongident SimpleDelimitedPattern
    | EmptyStringPattern ModLongident
    | EmptyArrayPattern_ ModLongident
    | ArrayPattern_ ModLongident Pattern
    | PatternWithType Pattern CoreType
    | ExtensionPattern Extension
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SimpleDelimitedPattern
    = RecordPattern RecordPatContent
    | ListPattern [Pattern]
    | ArrayPattern [Pattern]
    | EmptyArrayPattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PatternCommaListPattern
    = MorePattern PatternCommaListPattern Pattern
    | TwoPattern Pattern Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PatternCommaListPatternNoExn
    = MorePatternNoExn PatternCommaListPatternNoExn Pattern
    | TwoPatternNoExn PatternNoExn Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalSemi = NoSemi | ASemi
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data RecordPatContent
    = FinalRecordPattern RecordPatField OptionalSemi
    | UnderscoreRecordPattern RecordPatField OptionalSemi
    | MoreRecordPatterns RecordPatField RecordPatContent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalCoreType = NoCoreType | ACoreType CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalAssignPattern
    = NoAssignPattern | AnAssignPattern EQUAL Pattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data RecordPatField
    = RecordPatField LabelLongident OptionalCoreType OptionalAssignPattern
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ValueDescription
    = ValueDescription Ext [Attribute] ValIdent PolyType [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PrimitiveDeclaration
    = PrimitiveDeclaration Ext [Attribute] ValIdent PolyType EQUAL [STRING] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AndTypeDeclaration
    = AndTypeDeclaration [Attribute] TypeParameters LIDENT TypeKind [Constraint] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeSubstDeclarations
    = TypeSubstDeclarations TypeSubstDeclaration [AndTypeSubstDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AndTypeSubstDeclaration
    = AndTypeSubstDeclaration [Attribute] TypeParameters LIDENT TypeSubstKind [Constraint] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeDeclaration
    = NonrecTypeDeclaration Ext [Attribute] TypeParameters LIDENT TypeKind [Constraint] [PostItemAttribute]
    | TypeDeclaration Ext [Attribute] TypeParameters LIDENT TypeKind [Constraint] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeSubstDeclaration
    = TypeSubstDeclaration Ext [Attribute] TypeParameters LIDENT TypeSubstKind [Constraint] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Constraint = Constraint CoreType EQUAL CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data NonemptyTypeKind
    = AbstractType CoreType
    | VariantType ConstructorDeclarations
    | OpenType
    | RecordType LabelDeclarations
    | PrivateAbstractType CoreType
    | PrivateVariantType ConstructorDeclarations
    | PrivateOpenType
    | PrivateRecordType LabelDeclarations
    | TypeSynonymVariantType CoreType EQUAL ConstructorDeclarations
    | TypeSynonymPrivateVariantType CoreType EQUAL ConstructorDeclarations
    | TypeSynonymOpenType CoreType EQUAL
    | TypeSynonymPrivateOpenType CoreType EQUAL
    | TypeSynonymRecordType CoreType EQUAL LabelDeclarations
    | TypeSynonymPrivateRecordType CoreType EQUAL LabelDeclarations
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeKind = NoTypeKind | TypeKind EQUAL NonemptyTypeKind
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeSubstKind = TypeSubstKind COLONEQUAL NonemptyTypeKind
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeParameters
    = NoTypeParameters
    | SingleTypeParameter TypeParameter
    | TypeParameters [TypeParameter]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeParameter = TypeParameter TypeVariance TypeVariable
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeVariable = TypeVariable OCamlIdent | Underscore
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeVariance
    = NoVarianceNoInjectivity
    | CovariantNoInjectivity PLUS
    | ContravariantNoInjectivity MINUS
    | NoVarianceInjective BANG
    | CovariantInjective
    | InjectiveCovariant
    | ContravariantInjective
    | InjectiveContravariant
    | InfixOpVariance PLUSMINUSOP
    | PrefixOpVariance PREFIXOP
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstructorDeclarations
    = EmptyConstructorDeclarations
    | BarConstructorDeclarations [ConstructorDeclaration]
    | ConstructorDeclarations [ConstructorDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstructorDeclaration
    = ConstructorDeclaration ConstrIdent GeneralizedConstructorArguments [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data StrExceptionDeclaration
    = SigStrExceptionDeclaration SigExceptionDeclaration
    | Exception Ext [Attribute] ConstrIdent EQUAL ConstrLongident [Attribute] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SigExceptionDeclaration
    = SigExceptionDeclaration Ext [Attribute] ConstrIdent GeneralizedConstructorArguments [Attribute] [PostItemAttribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data GeneralizedConstructorArguments
    = NoGeneralizedConstructorArguments
    | GeneralizedConstructorArguments1 ConstructorArguments
    | GeneralizedConstructorArguments2 ConstructorArguments AtomicType
    | GeneralizedConstructorArguments3 [TypeVar] ConstructorArguments AtomicType
    | GeneralizedConstructorArguments4 AtomicType
    | GeneralizedConstructorArguments5 [TypeVar] AtomicType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstructorArguments = Arg1 TupleType | Arg2 LabelDeclarations
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LabelDeclarations
    = FinalLabelDeclaration LabelDeclaration
    | FinalLabelDeclarationSemi LabelDeclarationSemi
    | MoreLabelDeclarations LabelDeclarationSemi LabelDeclarations
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LabelDeclaration
    = LabelDeclarationMonoType MutableFlag LIDENT AliasType [Attribute]
    | LabelDeclarationPolyType MutableFlag LIDENT [TypeVar] AliasType [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LabelDeclarationSemi
    = LabelDeclarationSemiMonoType MutableFlag LIDENT AliasType [Attribute] [Attribute]
    | LabelDeclarationSemiPolyType MutableFlag LIDENT [TypeVar] AliasType [Attribute] [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data BarLlistExtensionConstructor
    = NoExtensionConstructors
    | BarExtensionConstructors [ExtensionConstructor]
    | ExtensionConstructors [ExtensionConstructor]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data BarLlistExtensionConstructorDeclaration
    = NoConstructor | Constructor [ExtensionConstructorDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ExtensionConstructor
    = Declaration ExtensionConstructorDeclaration
    | Rebind ExtensionConstructorRebind
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ExtensionConstructorDeclaration
    = ExtensionConstructorDeclaration ConstrIdent GeneralizedConstructorArguments [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ExtensionConstructorRebind
    = ExtensionConstructorRebind ConstrIdent EQUAL ConstrLongident [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data WithConstraint
    = WithConstraint1 TypeParameters LabelLongident WithTypeBinder AliasType [Constraint]
    | WithConstraint2 TypeParameters LabelLongident COLONEQUAL AliasType
    | WithConstraint3 ModLongident EQUAL ModExtLongident
    | WithConstraint4 ModLongident COLONEQUAL ModExtLongident
    | WithConstraint5 MtyLongident EQUAL ModuleType
    | WithConstraint6 MtyLongident COLONEQUAL ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data WithTypeBinder
    = WithTypeBinderEqual EQUAL | WithTypeBinderEqualPrivate EQUAL
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeVar = TypeVarIdent OCamlIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PolyType
    = MonoCoreType CoreType | PolyCoreType [TypeVar] CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data CoreType
    = CoreTypeWithoutAttribute AliasType
    | CoreTypeWithAttribute CoreType Attribute
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AliasType
    = FunctionType FunctionType | AliasType AliasType TypeVar
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data FunctionType
    = TupleType TupleType
    | ArgTypeWithOptLabel OptLabel TupleType FunctionType
    | ArgTypeWithLabel LIDENT TupleType FunctionType
    | ArgTypeWithoutLabel TupleType FunctionType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TupleType
    = AtomicType AtomicType | AtomicTypes AtomicType STAR TupleType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalBar = NoBar | ABar
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data DelimitedTypeSupportingLocalOpen
    = LocalOpen1 CoreType
    | LocalOpen2 Ext [Attribute] PackageType
    | LocalOpen3 TagField
    | LocalOpen4 [RowField]
    | LocalOpen5 RowField [RowField]
    | LocalOpen6 OptionalBar [RowField]
    | LocalOpen7
    | LocalOpen8 OptionalBar [RowField]
    | LocalOpen9 OptionalBar [RowField] GREATER [NameTag]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ObjectType
    = MethList LESS MethList GREATER | Empty LESS GREATER
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data DelimitedType
    = ObjectType ObjectType
    | DelimitedTypeExtension Extension
    | DelimitedTypeSupportingLocalOpen DelimitedTypeSupportingLocalOpen
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AtomicType
    = DelimitedType DelimitedType
    | TypeConstr TypeLongident
    | SimpleTypeApp AtomicType TypeLongident
    | ComplexTypeApp CoreType [CoreType] TypeLongident
    | ClassTypeConstr CltyLongident
    | SimpleSubTypeApp AtomicType CltyLongident
    | ComplexSubTypeApp CoreType [CoreType] CltyLongident
    | QualifiedDelimitedType ModExtLongident DelimitedTypeSupportingLocalOpen
    | TypeVar OCamlIdent
    | UnderscoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PackageType = PackageType ModuleType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data RowField = TagField TagField | CoreType CoreType
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TagField
    = Of NameTag OptAmpersand AmperTypeList [Attribute]
    | Tag NameTag [Attribute]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptAmpersand = Ampersand AMPERSAND | NoAmpersand
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AmperTypeList
    = AmperTypeListNil AliasType
    | AmperTypeListCons AliasType AMPERSAND AmperTypeList
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data MethList
    = FieldSemiMethListMonoType LIDENT AliasType [Attribute] [Attribute] MethList
    | FieldSemiMethListPolyType LIDENT [TypeVar] AliasType [Attribute] [Attribute] MethList
    | InheritSemiMethList AtomicType MethList
    | FieldSemiMonoType LIDENT AliasType [Attribute]
    | FieldSemiPolyType LIDENT [TypeVar] AliasType [Attribute]
    | InheritSemi AtomicType
    | FieldMonoType LIDENT AliasType [Attribute]
    | FieldPolyType LIDENT [TypeVar] AliasType [Attribute]
    | Inherit AtomicType
    | DotDot
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Constant = Int INT | Char CHAR | String STRING | Float FLOAT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data SignedConstant
    = UnsignedConstant Constant
    | NegInt MINUS INT
    | NegFloat MINUS FLOAT
    | PosInt PLUS INT
    | PosFloat PLUS FLOAT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OCamlIdent = Uppercase UIDENT | Lowercase LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ValExtraIdent = Operator Operator
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ValIdent
    = LowercaseValIdent LIDENT | ValExtraIdent ValExtraIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Operator
    = PrefixOp PREFIXOP
    | LetOp LETOP
    | AndOp ANDOP
    | ParenAccessDotop DOTOP IndexMod
    | ParenUpdateDotop DOTOP IndexMod
    | BraceAccessDotop DOTOP IndexMod
    | BraceUpdateDotop DOTOP IndexMod
    | HashSymbolOp HASHOP
    | BangOp BANG
    | RelOp RELOP
    | ConcatOp CONCATOP
    | PlusMinusOp PLUSMINUSOP
    | MultDivOp MULTDIVOP
    | PowOp POWOP
    | PlusOp PLUS
    | PlusDotOp PLUSDOT
    | PlusEqOp PLUSEQ
    | MinusOp MINUS
    | MinusDotOp MINUSDOT
    | StarOp STAR
    | PercentOp PERCENT
    | EqualOp EQUAL
    | LessOp LESS
    | GreaterOp GREATER
    | OrOp OR
    | BarBarOp BARBAR
    | AmpersandOp AMPERSAND
    | AmperAmperOp AMPERAMPER
    | ColonEqualOp COLONEQUAL
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data IndexMod = NoIndexMod | SemiDotDot
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstrExtraNonprefixIdent
    = EmptyListConstr | UnitConstr | FalseConstr | TrueConstr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstrIdent
    = ConstrIdent UIDENT
    | ListConstr
    | PrimitiveConstr ConstrExtraNonprefixIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ConstrLongident
    = QualifiedConstrIdent ModLongident
    | QualifiedListConstr ModLongident
    | UnqualifiedListConstr
    | UnqualifiedPrimitiveConstr ConstrExtraNonprefixIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ValLongident
    = UnqualifiedValLongIdent ValIdent
    | QualifiedValIdent ModLongident ValIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data LabelLongident
    = LabelLongident LIDENT
    | QualifiedLabelLongident ModLongident LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypeLongident
    = TypeLongident LIDENT
    | QualifiedTypelLongident ModExtLongident LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModLongident
    = ModLongident UIDENT | QualifiedModLongident ModLongident UIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ModExtLongident
    = ModExtLongident UIDENT
    | QualifiedModExtLongident ModExtLongident UIDENT
    | ParenModExtLongident ModExtLongident ModExtLongident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data MtyLongident
    = MtyLongident OCamlIdent
    | QualifiedMtyLongident ModExtLongident OCamlIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data CltyLongident
    = CltyLongident LIDENT
    | QualifiedCltyLongident ModExtLongident LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ClassLongident
    = ClassLongident LIDENT
    | QualifiedClassLongident ModLongident LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptionalToplevelDirectiveArgument
    = NoToplevelDirectiveArgument
    | AToplevelDirectiveArgument ToplevelDirectiveArgument
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ToplevelDirective
    = ToplevelDirectiveApp OCamlIdent ToplevelDirectiveArgument
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ToplevelDirectiveArgument
    = ToplevelString STRING
    | ToplevelInt INT
    | ValueIdent ValLongident
    | ToplevelModuleIdent ModLongident
    | ToplevelFalse
    | ToplevelTrue
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data NameTag = NameTag OCamlIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data RecFlag = Nonrecursive | Recursive
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data DirectionFlag = UpTo | DownTo
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PrivateFlag = Public | Private
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data MutableFlag = Immutable | Mutable
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data VirtualFlag = Concrete | Virtual
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data MutableVirtualFlags
    = ImmutableContrete
    | MutableConcrete
    | ImmutableVirtual
    | MutableVirtual
    | VirtualMutable
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PrivateVirtualFlags
    = PublicConcrete
    | PrivateConcrete
    | PublicVirtual
    | PrivateVirtual
    | VirtualPrivate
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data VirtualWithMutableFlag
    = VirtualWithImmutable | MutableWithVirtual | VirtualWithMutable
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data VirtualWithPrivateFlag
    = VirtualWithPublic | PrivateWithVirtual | VirtualWithPrivate
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data NoOverrideFlag = NoFlag
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OverrideFlag = Fresh | Override BANG
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Subtractive = Minus MINUS | MinusDot MINUSDOT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Additive = Plus PLUS | PlusDot PLUSDOT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data OptLabel = OptLabel OPTLABEL | OtherLabel LIDENT
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AttrId
    = LowercaseAttr LIDENT
    | UppercaseAttr UIDENT
    | AndAttr
    | AsAttr
    | AssertAttr
    | BeginAttr
    | ClassAttr
    | ConstraintAttr
    | DoAttr
    | DoneAttr
    | DowntoAttr
    | ElseAttr
    | EndAttr
    | ExceptionAttr
    | ExternalAttr
    | FalseAttr
    | ForAttr
    | FunAttr
    | FunctionAttr
    | FunctorAttr
    | IfAttr
    | InAttr
    | IncludeAttr
    | InheritAttr
    | InitializerAttr
    | LazyAttr
    | LetAttr
    | MatchAttr
    | MethodAttr
    | ModuleAttr
    | MutableAttr
    | NewAttr
    | NonrecAttr
    | ObjectAttr
    | OfAttr
    | OpenAttr
    | OrAttr OR
    | PrivateAttr
    | RecAttr
    | SigAttr
    | StructAttr
    | ThenAttr
    | ToAttr
    | TrueAttr
    | TryAttr
    | TypeAttr
    | ValAttr
    | VirtualAttr
    | WhenAttr
    | WhileAttr
    | WithAttr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Attribute = Attribute [AttrId] AttrPayload
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data PostItemAttribute = PostItemAttribute [AttrId] AttrPayload
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data FloatingAttribute = FloatingAttribute [AttrId] AttrPayload
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Ext = NoExt | Ext PERCENT [AttrId]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Extension
    = ExtensionPayload [AttrId] Payload
    | QuotedStringExpr QUOTED_STRING_EXPR
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data ItemExtension
    = ItemExtensionPayload [AttrId] Payload
    | QuotedStringItem QUOTED_STRING_ITEM
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Payload
    = PayloadStructure Structure
    | PayloadSignature Signature
    | PayloadCoreType CoreType
    | PayloadPattern Pattern
    | PayloadGuardedPattern Pattern SeqExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data AttrPayload = AttrPayload Payload
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype AMPERAMPER = AMPERAMPER ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype AMPERSAND = AMPERSAND ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype BANG = BANG ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype BARBAR = BARBAR ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype COLONEQUAL = COLONEQUAL ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype EQUAL = EQUAL ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype GREATER = GREATER ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype LESS = LESS ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype MINUS = MINUS ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype MINUSDOT = MINUSDOT ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype OR = OR ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype PERCENT = PERCENT ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype PLUS = PLUS ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype PLUSDOT = PLUSDOT ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype PLUSEQ = PLUSEQ ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype STAR = STAR ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype RELOP = RELOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype CONCATOP = CONCATOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype PLUSMINUSOP = PLUSMINUSOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype MULTDIVOP = MULTDIVOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype POWOP = POWOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype DOTOP = DOTOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype LETOP = LETOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype ANDOP = ANDOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype HASHOP = HASHOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype PREFIXOP = PREFIXOP ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype DecimalLiteral = DecimalLiteral String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype DecimalLiteralModifier = DecimalLiteralModifier String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype HexLiteral = HexLiteral String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype HexLiteralModifier = HexLiteralModifier String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype OctLiteral = OctLiteral String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype OctLiteralModifier = OctLiteralModifier String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype BinLiteral = BinLiteral String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype BinLiteralModifier = BinLiteralModifier String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype FLOAT = FLOAT String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype CHAR = CHAR String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype STRING = STRING String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype QUOTED_STRING_EXPR = QUOTED_STRING_EXPR String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype QUOTED_STRING_ITEM = QUOTED_STRING_ITEM String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype LIDENT = LIDENT ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype UIDENT = UIDENT String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype LABEL = LABEL ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype OPTLABEL = OPTLABEL ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition AMPERAMPER where
  hasPosition (AMPERAMPER (p, _)) = C.Just p

instance HasPosition AMPERSAND where
  hasPosition (AMPERSAND (p, _)) = C.Just p

instance HasPosition BANG where
  hasPosition (BANG (p, _)) = C.Just p

instance HasPosition BARBAR where
  hasPosition (BARBAR (p, _)) = C.Just p

instance HasPosition COLONEQUAL where
  hasPosition (COLONEQUAL (p, _)) = C.Just p

instance HasPosition EQUAL where
  hasPosition (EQUAL (p, _)) = C.Just p

instance HasPosition GREATER where
  hasPosition (GREATER (p, _)) = C.Just p

instance HasPosition LESS where
  hasPosition (LESS (p, _)) = C.Just p

instance HasPosition MINUS where
  hasPosition (MINUS (p, _)) = C.Just p

instance HasPosition MINUSDOT where
  hasPosition (MINUSDOT (p, _)) = C.Just p

instance HasPosition OR where
  hasPosition (OR (p, _)) = C.Just p

instance HasPosition PERCENT where
  hasPosition (PERCENT (p, _)) = C.Just p

instance HasPosition PLUS where
  hasPosition (PLUS (p, _)) = C.Just p

instance HasPosition PLUSDOT where
  hasPosition (PLUSDOT (p, _)) = C.Just p

instance HasPosition PLUSEQ where
  hasPosition (PLUSEQ (p, _)) = C.Just p

instance HasPosition STAR where
  hasPosition (STAR (p, _)) = C.Just p

instance HasPosition RELOP where
  hasPosition (RELOP (p, _)) = C.Just p

instance HasPosition CONCATOP where
  hasPosition (CONCATOP (p, _)) = C.Just p

instance HasPosition PLUSMINUSOP where
  hasPosition (PLUSMINUSOP (p, _)) = C.Just p

instance HasPosition MULTDIVOP where
  hasPosition (MULTDIVOP (p, _)) = C.Just p

instance HasPosition POWOP where
  hasPosition (POWOP (p, _)) = C.Just p

instance HasPosition DOTOP where
  hasPosition (DOTOP (p, _)) = C.Just p

instance HasPosition LETOP where
  hasPosition (LETOP (p, _)) = C.Just p

instance HasPosition ANDOP where
  hasPosition (ANDOP (p, _)) = C.Just p

instance HasPosition HASHOP where
  hasPosition (HASHOP (p, _)) = C.Just p

instance HasPosition PREFIXOP where
  hasPosition (PREFIXOP (p, _)) = C.Just p

instance HasPosition LIDENT where
  hasPosition (LIDENT (p, _)) = C.Just p

instance HasPosition LABEL where
  hasPosition (LABEL (p, _)) = C.Just p

instance HasPosition OPTLABEL where
  hasPosition (OPTLABEL (p, _)) = C.Just p

