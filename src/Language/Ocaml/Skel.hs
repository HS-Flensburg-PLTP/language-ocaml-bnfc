-- File generated by the BNF Converter (bnfc 2.9.6).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.Ocaml.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.Ocaml.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transCHAR :: Language.Ocaml.Abs.CHAR -> Result
transCHAR x = case x of
  Language.Ocaml.Abs.CHAR string -> failure x

transFLOAT :: Language.Ocaml.Abs.FLOAT -> Result
transFLOAT x = case x of
  Language.Ocaml.Abs.FLOAT string -> failure x

transRELOP :: Language.Ocaml.Abs.RELOP -> Result
transRELOP x = case x of
  Language.Ocaml.Abs.RELOP string -> failure x

transCONCATOP :: Language.Ocaml.Abs.CONCATOP -> Result
transCONCATOP x = case x of
  Language.Ocaml.Abs.CONCATOP string -> failure x

transPLUSMINUSOP :: Language.Ocaml.Abs.PLUSMINUSOP -> Result
transPLUSMINUSOP x = case x of
  Language.Ocaml.Abs.PLUSMINUSOP string -> failure x

transMULTDIVOP :: Language.Ocaml.Abs.MULTDIVOP -> Result
transMULTDIVOP x = case x of
  Language.Ocaml.Abs.MULTDIVOP string -> failure x

transPOWOP :: Language.Ocaml.Abs.POWOP -> Result
transPOWOP x = case x of
  Language.Ocaml.Abs.POWOP string -> failure x

transDOTOP :: Language.Ocaml.Abs.DOTOP -> Result
transDOTOP x = case x of
  Language.Ocaml.Abs.DOTOP string -> failure x

transLETOP :: Language.Ocaml.Abs.LETOP -> Result
transLETOP x = case x of
  Language.Ocaml.Abs.LETOP string -> failure x

transANDOP :: Language.Ocaml.Abs.ANDOP -> Result
transANDOP x = case x of
  Language.Ocaml.Abs.ANDOP string -> failure x

transDecimalLiteral :: Language.Ocaml.Abs.DecimalLiteral -> Result
transDecimalLiteral x = case x of
  Language.Ocaml.Abs.DecimalLiteral string -> failure x

transDecimalLiteralModifier :: Language.Ocaml.Abs.DecimalLiteralModifier -> Result
transDecimalLiteralModifier x = case x of
  Language.Ocaml.Abs.DecimalLiteralModifier string -> failure x

transHexLiteral :: Language.Ocaml.Abs.HexLiteral -> Result
transHexLiteral x = case x of
  Language.Ocaml.Abs.HexLiteral string -> failure x

transHexLiteralModifier :: Language.Ocaml.Abs.HexLiteralModifier -> Result
transHexLiteralModifier x = case x of
  Language.Ocaml.Abs.HexLiteralModifier string -> failure x

transOctLiteral :: Language.Ocaml.Abs.OctLiteral -> Result
transOctLiteral x = case x of
  Language.Ocaml.Abs.OctLiteral string -> failure x

transOctLiteralModifier :: Language.Ocaml.Abs.OctLiteralModifier -> Result
transOctLiteralModifier x = case x of
  Language.Ocaml.Abs.OctLiteralModifier string -> failure x

transBinLiteral :: Language.Ocaml.Abs.BinLiteral -> Result
transBinLiteral x = case x of
  Language.Ocaml.Abs.BinLiteral string -> failure x

transBinLiteralModifier :: Language.Ocaml.Abs.BinLiteralModifier -> Result
transBinLiteralModifier x = case x of
  Language.Ocaml.Abs.BinLiteralModifier string -> failure x

transLABEL :: Language.Ocaml.Abs.LABEL -> Result
transLABEL x = case x of
  Language.Ocaml.Abs.LABEL string -> failure x

transLIDENT :: Language.Ocaml.Abs.LIDENT -> Result
transLIDENT x = case x of
  Language.Ocaml.Abs.LIDENT string -> failure x

transOPTLABEL :: Language.Ocaml.Abs.OPTLABEL -> Result
transOPTLABEL x = case x of
  Language.Ocaml.Abs.OPTLABEL string -> failure x

transPREFIXOP :: Language.Ocaml.Abs.PREFIXOP -> Result
transPREFIXOP x = case x of
  Language.Ocaml.Abs.PREFIXOP string -> failure x

transHASHOP :: Language.Ocaml.Abs.HASHOP -> Result
transHASHOP x = case x of
  Language.Ocaml.Abs.HASHOP string -> failure x

transSTRING :: Language.Ocaml.Abs.STRING -> Result
transSTRING x = case x of
  Language.Ocaml.Abs.STRING string -> failure x

transQUOTED_STRING_EXPR :: Language.Ocaml.Abs.QUOTED_STRING_EXPR -> Result
transQUOTED_STRING_EXPR x = case x of
  Language.Ocaml.Abs.QUOTED_STRING_EXPR string -> failure x

transQUOTED_STRING_ITEM :: Language.Ocaml.Abs.QUOTED_STRING_ITEM -> Result
transQUOTED_STRING_ITEM x = case x of
  Language.Ocaml.Abs.QUOTED_STRING_ITEM string -> failure x

transUIDENT :: Language.Ocaml.Abs.UIDENT -> Result
transUIDENT x = case x of
  Language.Ocaml.Abs.UIDENT string -> failure x

transINT :: Language.Ocaml.Abs.INT -> Result
transINT x = case x of
  Language.Ocaml.Abs.ModifiedDecimal decimalliteralmodifier -> failure x
  Language.Ocaml.Abs.Decimal decimalliteral -> failure x
  Language.Ocaml.Abs.ModifiedHex hexliteralmodifier -> failure x
  Language.Ocaml.Abs.Hex hexliteral -> failure x
  Language.Ocaml.Abs.ModifiedOct octliteralmodifier -> failure x
  Language.Ocaml.Abs.Oct octliteral -> failure x
  Language.Ocaml.Abs.ModifiedBin binliteralmodifier -> failure x
  Language.Ocaml.Abs.Bin binliteral -> failure x

transImplementation :: Language.Ocaml.Abs.Implementation -> Result
transImplementation x = case x of
  Language.Ocaml.Abs.Implementation structure -> failure x

transInterface :: Language.Ocaml.Abs.Interface -> Result
transInterface x = case x of
  Language.Ocaml.Abs.Interface signature -> failure x

transToplevelPhrase :: Language.Ocaml.Abs.ToplevelPhrase -> Result
transToplevelPhrase x = case x of
  Language.Ocaml.Abs.StrExpr seqexpr postitemattributes -> failure x
  Language.Ocaml.Abs.StructureItems structureitems -> failure x
  Language.Ocaml.Abs.ToplevelDirective topleveldirective -> failure x

transUseFile :: Language.Ocaml.Abs.UseFile -> Result
transUseFile x = case x of
  Language.Ocaml.Abs.UseFile usefileelements -> failure x
  Language.Ocaml.Abs.UseFileWithStrExp seqexpr postitemattributes usefileelements -> failure x

transUseFileElement :: Language.Ocaml.Abs.UseFileElement -> Result
transUseFileElement x = case x of
  Language.Ocaml.Abs.NoUseFileElement -> failure x
  Language.Ocaml.Abs.UseFileStrExp seqexpr postitemattributes -> failure x
  Language.Ocaml.Abs.UseFileStructureItem structureitem -> failure x
  Language.Ocaml.Abs.UseFileToplevelDirective topleveldirective -> failure x

transFunctorArg :: Language.Ocaml.Abs.FunctorArg -> Result
transFunctorArg x = case x of
  Language.Ocaml.Abs.NoFunctorArg -> failure x
  Language.Ocaml.Abs.FunctorArg modulename moduletype -> failure x

transModuleName :: Language.Ocaml.Abs.ModuleName -> Result
transModuleName x = case x of
  Language.Ocaml.Abs.ModuleNameIdent uident -> failure x
  Language.Ocaml.Abs.ModuleNameUnderscore -> failure x

transModuleExpr :: Language.Ocaml.Abs.ModuleExpr -> Result
transModuleExpr x = case x of
  Language.Ocaml.Abs.ModuleExprStruct attributes structure -> failure x
  Language.Ocaml.Abs.ModuleExprFunctor attributes functorargs moduleexpr -> failure x
  Language.Ocaml.Abs.ModuleExprParen parenmoduleexpr -> failure x
  Language.Ocaml.Abs.ModuleExprWithAttribute moduleexpr attribute -> failure x
  Language.Ocaml.Abs.ModuleExprIdent modlongident -> failure x
  Language.Ocaml.Abs.ModuleExprFunctorApp moduleexpr parenmoduleexpr -> failure x
  Language.Ocaml.Abs.FunctorAppUnit moduleexpr -> failure x
  Language.Ocaml.Abs.ModuleExprExtension extension -> failure x

transParenModuleExpr :: Language.Ocaml.Abs.ParenModuleExpr -> Result
transParenModuleExpr x = case x of
  Language.Ocaml.Abs.ModuleExprWithType moduleexpr moduletype -> failure x
  Language.Ocaml.Abs.ModuleExpr moduleexpr -> failure x
  Language.Ocaml.Abs.ValParenModuleExpr attributes exprcolonpackagetype -> failure x

transExprColonPackageType :: Language.Ocaml.Abs.ExprColonPackageType -> Result
transExprColonPackageType x = case x of
  Language.Ocaml.Abs.Expr expr -> failure x
  Language.Ocaml.Abs.ExprWithType expr moduletype -> failure x
  Language.Ocaml.Abs.ExprWithCoercionFromTo expr moduletype1 moduletype2 -> failure x
  Language.Ocaml.Abs.ExprWithCoercionTo expr moduletype -> failure x

transStructure :: Language.Ocaml.Abs.Structure -> Result
transStructure x = case x of
  Language.Ocaml.Abs.NoStructure -> failure x
  Language.Ocaml.Abs.StandaloneExpression seqexpr postitemattributes -> failure x
  Language.Ocaml.Abs.StandaloneExpressionAndStructureElements seqexpr postitemattributes structureelements -> failure x
  Language.Ocaml.Abs.StructureElements structureelements -> failure x

transStructureElement :: Language.Ocaml.Abs.StructureElement -> Result
transStructureElement x = case x of
  Language.Ocaml.Abs.StructureSemiSemi -> failure x
  Language.Ocaml.Abs.StructureStrExpr seqexpr postitemattributes -> failure x
  Language.Ocaml.Abs.StructureItem structureitem -> failure x

transStructureItem :: Language.Ocaml.Abs.StructureItem -> Result
transStructureItem x = case x of
  Language.Ocaml.Abs.StrLetBindings letbindingsext -> failure x
  Language.Ocaml.Abs.StrItemExtension itemextension postitemattributes -> failure x
  Language.Ocaml.Abs.StrFloatingAttribute floatingattribute -> failure x
  Language.Ocaml.Abs.StrPrimitiveDeclaration primitivedeclaration -> failure x
  Language.Ocaml.Abs.StrValueDescription valuedescription -> failure x
  Language.Ocaml.Abs.StrTypeDeclarations typedeclaration andtypedeclarations -> failure x
  Language.Ocaml.Abs.StrTypeExtension ext attributes typeparameters typelongident privateflag barllistextensionconstructor postitemattributes -> failure x
  Language.Ocaml.Abs.StrExceptionDeclaration strexceptiondeclaration -> failure x
  Language.Ocaml.Abs.StrModuleBinding ext attributes modulename modulebindingbody postitemattributes -> failure x
  Language.Ocaml.Abs.StrRecModuleBindings ext attributes modulename modulebindingbody postitemattributes andmodulebindings -> failure x
  Language.Ocaml.Abs.StrModuleTypeDeclaration moduletypedeclaration -> failure x
  Language.Ocaml.Abs.StrOpenDeclaration opendeclaration -> failure x
  Language.Ocaml.Abs.StrClassDeclarations ext attributes virtualflag formalclassparameters lident classfunbinding postitemattributes andclassdeclarations -> failure x
  Language.Ocaml.Abs.StrClassTypeDeclarations classtypedeclarations -> failure x
  Language.Ocaml.Abs.StrIncludeStatement ext attributes moduleexpr postitemattributes -> failure x

transModuleBindingBody :: Language.Ocaml.Abs.ModuleBindingBody -> Result
transModuleBindingBody x = case x of
  Language.Ocaml.Abs.ModuleBinding moduleexpr -> failure x
  Language.Ocaml.Abs.ModuleBindingWitgType moduletype moduleexpr -> failure x
  Language.Ocaml.Abs.FunctorBinding functorarg modulebindingbody -> failure x

transAndModuleBinding :: Language.Ocaml.Abs.AndModuleBinding -> Result
transAndModuleBinding x = case x of
  Language.Ocaml.Abs.AndModuleBinding attributes modulename modulebindingbody postitemattributes -> failure x

transOptionalModuleType :: Language.Ocaml.Abs.OptionalModuleType -> Result
transOptionalModuleType x = case x of
  Language.Ocaml.Abs.NoModuleType -> failure x
  Language.Ocaml.Abs.AModuleType moduletype -> failure x

transModuleTypeDeclaration :: Language.Ocaml.Abs.ModuleTypeDeclaration -> Result
transModuleTypeDeclaration x = case x of
  Language.Ocaml.Abs.ModuleTypeDeclaration attributes ocamlident optionalmoduletype postitemattributes -> failure x

transOpenDeclaration :: Language.Ocaml.Abs.OpenDeclaration -> Result
transOpenDeclaration x = case x of
  Language.Ocaml.Abs.OpenDeclaration overrideflag ext attributes moduleexpr postitemattributes -> failure x

transOpenDescription :: Language.Ocaml.Abs.OpenDescription -> Result
transOpenDescription x = case x of
  Language.Ocaml.Abs.OpenDescription overrideflag ext attributes modextlongident postitemattributes -> failure x

transModuleType :: Language.Ocaml.Abs.ModuleType -> Result
transModuleType x = case x of
  Language.Ocaml.Abs.ModuleTypeSignature attributes signature -> failure x
  Language.Ocaml.Abs.ModuleTypeFunctor attributes functorargs moduletype -> failure x
  Language.Ocaml.Abs.ModuleTypeOf attributes moduleexpr -> failure x
  Language.Ocaml.Abs.ModuleType moduletype -> failure x
  Language.Ocaml.Abs.ModuleTypeWithAttribute moduletype attribute -> failure x
  Language.Ocaml.Abs.ModuleTypeModuleIdent modlongident -> failure x
  Language.Ocaml.Abs.ModuleTypeNoArgFunctorApp moduletype -> failure x
  Language.Ocaml.Abs.ModuleTypeFunctorApp moduletype1 moduletype2 -> failure x
  Language.Ocaml.Abs.ModuleTypeWith moduletype withconstraints -> failure x
  Language.Ocaml.Abs.ModuleTypeExtension extension -> failure x

transSignature :: Language.Ocaml.Abs.Signature -> Result
transSignature x = case x of
  Language.Ocaml.Abs.Signature signatureelements -> failure x

transSignatureElement :: Language.Ocaml.Abs.SignatureElement -> Result
transSignatureElement x = case x of
  Language.Ocaml.Abs.SigSemiSemi -> failure x
  Language.Ocaml.Abs.SigItem signatureitem -> failure x

transSignatureItem :: Language.Ocaml.Abs.SignatureItem -> Result
transSignatureItem x = case x of
  Language.Ocaml.Abs.SigItemExtension itemextension postitemattributes -> failure x
  Language.Ocaml.Abs.SigFloatingAttribute floatingattribute -> failure x
  Language.Ocaml.Abs.SigValueDescription valuedescription -> failure x
  Language.Ocaml.Abs.SigPrimitiveDeclaration primitivedeclaration -> failure x
  Language.Ocaml.Abs.SigTypeDeclarations typedeclaration andtypedeclarations -> failure x
  Language.Ocaml.Abs.SigTypeSubstDeclarations typesubstdeclarations -> failure x
  Language.Ocaml.Abs.SigTypeExtension ext attributes typeparameters typelongident privateflag barllistextensionconstructordeclaration postitemattributes -> failure x
  Language.Ocaml.Abs.SigSigExceptionDeclaration sigexceptiondeclaration -> failure x
  Language.Ocaml.Abs.SigModuleDeclaration ext attributes modulename moduledeclarationbody postitemattributes -> failure x
  Language.Ocaml.Abs.SigModuleAlias ext attributes modulename modlongident postitemattributes -> failure x
  Language.Ocaml.Abs.SigModuleSubst modulesubst -> failure x
  Language.Ocaml.Abs.SigRecModuleDeclarations ext attributes modulename moduletype postitemattributes andmoduledeclarations -> failure x
  Language.Ocaml.Abs.SigModuleTypeDeclaration moduletypedeclaration -> failure x
  Language.Ocaml.Abs.SigModuleTypeSubst moduletypesubst -> failure x
  Language.Ocaml.Abs.SigOpenDescription opendescription -> failure x
  Language.Ocaml.Abs.SigIncludeStatement ext attributes moduletype postitemattributes -> failure x
  Language.Ocaml.Abs.SigClassDescription ext attributes virtualflag formalclassparameters lident classtype postitemattributes andclassdescriptions -> failure x
  Language.Ocaml.Abs.SigClassTypeDeclarations classtypedeclarations -> failure x

transModuleDeclarationBody :: Language.Ocaml.Abs.ModuleDeclarationBody -> Result
transModuleDeclarationBody x = case x of
  Language.Ocaml.Abs.ModuleBody moduletype -> failure x
  Language.Ocaml.Abs.FunctorBody functorarg moduledeclarationbody -> failure x

transModuleSubst :: Language.Ocaml.Abs.ModuleSubst -> Result
transModuleSubst x = case x of
  Language.Ocaml.Abs.ModuleSubst ext attributes uident modextlongident postitemattributes -> failure x

transAndModuleDeclaration :: Language.Ocaml.Abs.AndModuleDeclaration -> Result
transAndModuleDeclaration x = case x of
  Language.Ocaml.Abs.AndModuleDeclaration attributes modulename moduletype postitemattributes -> failure x

transModuleTypeSubst :: Language.Ocaml.Abs.ModuleTypeSubst -> Result
transModuleTypeSubst x = case x of
  Language.Ocaml.Abs.ModuleTypeSubst ext attributes ocamlident moduletype postitemattributes -> failure x

transAndClassDeclaration :: Language.Ocaml.Abs.AndClassDeclaration -> Result
transAndClassDeclaration x = case x of
  Language.Ocaml.Abs.AndClassDeclaration attributes virtualflag formalclassparameters lident classfunbinding postitemattributes -> failure x

transClassFunBinding :: Language.Ocaml.Abs.ClassFunBinding -> Result
transClassFunBinding x = case x of
  Language.Ocaml.Abs.ClassFunBinding classexpr -> failure x
  Language.Ocaml.Abs.ClassFunBindingWithType classtype classexpr -> failure x
  Language.Ocaml.Abs.LabeledClassFunBinding labeledsimplepattern classfunbinding -> failure x

transFormalClassParameters :: Language.Ocaml.Abs.FormalClassParameters -> Result
transFormalClassParameters x = case x of
  Language.Ocaml.Abs.NoFormalClassParamters -> failure x
  Language.Ocaml.Abs.FormalClassParameters typeparameters -> failure x

transClassExpr :: Language.Ocaml.Abs.ClassExpr -> Result
transClassExpr x = case x of
  Language.Ocaml.Abs.ClassSimpleExpr classsimpleexpr -> failure x
  Language.Ocaml.Abs.ClassExprFunctor attributes classfundef -> failure x
  Language.Ocaml.Abs.ClassExprLetBindings letbindingsnoext classexpr -> failure x
  Language.Ocaml.Abs.ClassExprLetOpen overrideflag attributes modlongident classexpr -> failure x
  Language.Ocaml.Abs.ClassExprWithAttribute classexpr attribute -> failure x
  Language.Ocaml.Abs.LabeledClassSimpleExpr classsimpleexpr labeledsimpleexprs -> failure x
  Language.Ocaml.Abs.ClassExprExtension extension -> failure x

transClassSimpleExpr :: Language.Ocaml.Abs.ClassSimpleExpr -> Result
transClassSimpleExpr x = case x of
  Language.Ocaml.Abs.ClassExpr classexpr -> failure x
  Language.Ocaml.Abs.ClassName classlongident -> failure x
  Language.Ocaml.Abs.ClassNameWithParamters coretypes classlongident -> failure x
  Language.Ocaml.Abs.ClassExprWithType classexpr classtype -> failure x
  Language.Ocaml.Abs.ClassSimplExprObject attributes classselfpattern classfields -> failure x

transClassFunDef :: Language.Ocaml.Abs.ClassFunDef -> Result
transClassFunDef x = case x of
  Language.Ocaml.Abs.ClassFun labeledsimplepattern classexpr -> failure x
  Language.Ocaml.Abs.LabeledClassFunDef labeledsimplepattern classfundef -> failure x

transClassSelfPattern :: Language.Ocaml.Abs.ClassSelfPattern -> Result
transClassSelfPattern x = case x of
  Language.Ocaml.Abs.ClassPattern pattern_ -> failure x
  Language.Ocaml.Abs.ClassPatternWithType pattern_ coretype -> failure x
  Language.Ocaml.Abs.NoClassSelfPattern -> failure x

transOptionalAs :: Language.Ocaml.Abs.OptionalAs -> Result
transOptionalAs x = case x of
  Language.Ocaml.Abs.NoAs -> failure x
  Language.Ocaml.Abs.AAs lident -> failure x

transClassField :: Language.Ocaml.Abs.ClassField -> Result
transClassField x = case x of
  Language.Ocaml.Abs.ClassFieldInherit overrideflag attributes classexpr optionalas postitemattributes -> failure x
  Language.Ocaml.Abs.ClassFieldVal value postitemattributes -> failure x
  Language.Ocaml.Abs.ClassFieldMethod method postitemattributes -> failure x
  Language.Ocaml.Abs.ClassFieldConstraint attributes coretype1 coretype2 postitemattributes -> failure x
  Language.Ocaml.Abs.ClassFieldInitializer attributes seqexpr postitemattributes -> failure x
  Language.Ocaml.Abs.ClassFieldItemExtension itemextension postitemattributes -> failure x
  Language.Ocaml.Abs.ClassFieldFloatingAttribute floatingattribute -> failure x

transValue :: Language.Ocaml.Abs.Value -> Result
transValue x = case x of
  Language.Ocaml.Abs.Value1 nooverrideflag attributes virtualwithmutableflag lident coretype -> failure x
  Language.Ocaml.Abs.Value2 overrideflag attributes mutableflag lident seqexpr -> failure x
  Language.Ocaml.Abs.Value3 overrideflag attributes mutableflag lident typeconstraint seqexpr -> failure x

transMethod_ :: Language.Ocaml.Abs.Method_ -> Result
transMethod_ x = case x of
  Language.Ocaml.Abs.VirtualMethod nooverrideflag attributes virtualwithprivateflag lident polytype -> failure x
  Language.Ocaml.Abs.Method overrideflag attributes privateflag lident strictbinding -> failure x
  Language.Ocaml.Abs.MethodWithType overrideflag attributes privateflag lident polytype seqexpr -> failure x
  Language.Ocaml.Abs.MethodWithLocallyAbstractType overrideflag attributes privateflag lident lidents coretype seqexpr -> failure x

transClassType :: Language.Ocaml.Abs.ClassType -> Result
transClassType x = case x of
  Language.Ocaml.Abs.ClassSignature classsignature -> failure x
  Language.Ocaml.Abs.ClassTypeWithOptLabel optlabel tupletype classtype -> failure x
  Language.Ocaml.Abs.ClassTypeWithOptionalLabel lident tupletype classtype -> failure x
  Language.Ocaml.Abs.ClassTypeWithtLabel lident tupletype classtype -> failure x
  Language.Ocaml.Abs.ClassTypeWithoutLabel tupletype classtype -> failure x

transClassSignature :: Language.Ocaml.Abs.ClassSignature -> Result
transClassSignature x = case x of
  Language.Ocaml.Abs.ClassSignatureName cltylongident -> failure x
  Language.Ocaml.Abs.ClassSignatureNameWithParamters coretypes cltylongident -> failure x
  Language.Ocaml.Abs.ClassSignatureExtension extension -> failure x
  Language.Ocaml.Abs.ClassSignatureObject attributes classselftype classsigfields -> failure x
  Language.Ocaml.Abs.WithAttribute classsignature attribute -> failure x
  Language.Ocaml.Abs.ClassSignatureLetOpen overrideflag attributes modlongident classsignature -> failure x

transClassSelfType :: Language.Ocaml.Abs.ClassSelfType -> Result
transClassSelfType x = case x of
  Language.Ocaml.Abs.ClassSelfType coretype -> failure x
  Language.Ocaml.Abs.NoClassSelfType -> failure x

transClassSigField :: Language.Ocaml.Abs.ClassSigField -> Result
transClassSigField x = case x of
  Language.Ocaml.Abs.ClassSigFieldInherit attributes classsignature postitemattributes -> failure x
  Language.Ocaml.Abs.ClassSigFieldVal attributes mutablevirtualflags lident coretype postitemattributes -> failure x
  Language.Ocaml.Abs.ClassSigFieldMethod attributes privatevirtualflags lident polytype postitemattributes -> failure x
  Language.Ocaml.Abs.ClassSigFieldConstraint attributes constrainfield postitemattributes -> failure x
  Language.Ocaml.Abs.ClassSigFieldItemExtension itemextension postitemattributes -> failure x
  Language.Ocaml.Abs.ClassSigFieldFloatingAttribute floatingattribute -> failure x

transConstrainField :: Language.Ocaml.Abs.ConstrainField -> Result
transConstrainField x = case x of
  Language.Ocaml.Abs.ConstrainField coretype1 coretype2 -> failure x

transAndClassDescription :: Language.Ocaml.Abs.AndClassDescription -> Result
transAndClassDescription x = case x of
  Language.Ocaml.Abs.AndClassDescription attributes virtualflag formalclassparameters lident classtype postitemattributes -> failure x

transClassTypeDeclarations :: Language.Ocaml.Abs.ClassTypeDeclarations -> Result
transClassTypeDeclarations x = case x of
  Language.Ocaml.Abs.ClassTypeDeclarations ext attributes virtualflag formalclassparameters lident classsignature postitemattributes andclasstypedeclarations -> failure x

transAndClassTypeDeclaration :: Language.Ocaml.Abs.AndClassTypeDeclaration -> Result
transAndClassTypeDeclaration x = case x of
  Language.Ocaml.Abs.AndClassTypeDeclaration attributes virtualflag formalclassparameters lident classsignature postitemattributes -> failure x

transSeqExpr :: Language.Ocaml.Abs.SeqExpr -> Result
transSeqExpr x = case x of
  Language.Ocaml.Abs.FinalFunExpr funexpr -> failure x
  Language.Ocaml.Abs.FinalFunExprSemi funexpr -> failure x
  Language.Ocaml.Abs.MoreFunExprs funexpr seqexpr -> failure x
  Language.Ocaml.Abs.MoreFunExprsAttr funexpr attrids seqexpr -> failure x
  Language.Ocaml.Abs.SeqExprFunction ext attributes matchcases -> failure x

transLabeledSimplePattern :: Language.Ocaml.Abs.LabeledSimplePattern -> Result
transLabeledSimplePattern x = case x of
  Language.Ocaml.Abs.OptPattern labelletpattern -> failure x
  Language.Ocaml.Abs.OptPatternWithDefault labelletpattern seqexpr -> failure x
  Language.Ocaml.Abs.OptLabel lident -> failure x
  Language.Ocaml.Abs.OptLabeledPattern optlabel letpattern -> failure x
  Language.Ocaml.Abs.OptLabeledPatternWithDefault optlabel letpattern seqexpr -> failure x
  Language.Ocaml.Abs.OptLabeledVar optlabel patternvar -> failure x
  Language.Ocaml.Abs.LabeledPattern labelletpattern -> failure x
  Language.Ocaml.Abs.Label lident -> failure x
  Language.Ocaml.Abs.LabeledSimplePattern label simplepattern -> failure x
  Language.Ocaml.Abs.SimplePattern simplepattern -> failure x

transPatternVar :: Language.Ocaml.Abs.PatternVar -> Result
transPatternVar x = case x of
  Language.Ocaml.Abs.PatternVar lident -> failure x
  Language.Ocaml.Abs.UnderscorePatternVar -> failure x

transLabelLetPattern :: Language.Ocaml.Abs.LabelLetPattern -> Result
transLabelLetPattern x = case x of
  Language.Ocaml.Abs.LabelVar lident -> failure x
  Language.Ocaml.Abs.LabelVarWithType lident coretype -> failure x

transLetPattern :: Language.Ocaml.Abs.LetPattern -> Result
transLetPattern x = case x of
  Language.Ocaml.Abs.LetPattern pattern_ -> failure x
  Language.Ocaml.Abs.LetPatternWithType pattern_ coretype -> failure x

transQualifiedDotop :: Language.Ocaml.Abs.QualifiedDotop -> Result
transQualifiedDotop x = case x of
  Language.Ocaml.Abs.Unqualified dotop -> failure x
  Language.Ocaml.Abs.Qualified modlongident dotop -> failure x

transOptionalAtomicTypeAnnotation :: Language.Ocaml.Abs.OptionalAtomicTypeAnnotation -> Result
transOptionalAtomicTypeAnnotation x = case x of
  Language.Ocaml.Abs.NoAtomicTypeAnnotation -> failure x
  Language.Ocaml.Abs.AnAtomicTypeAnnotation atomictype -> failure x

transFunExpr :: Language.Ocaml.Abs.FunExpr -> Result
transFunExpr x = case x of
  Language.Ocaml.Abs.ConstrName_ constrlongident -> failure x
  Language.Ocaml.Abs.NameTagApp nametag simpleexpr -> failure x
  Language.Ocaml.Abs.SimpleExprApp simpleexpr labeledsimpleexprs -> failure x
  Language.Ocaml.Abs.Assert ext attributes simpleexpr -> failure x
  Language.Ocaml.Abs.Lazy ext attributes simpleexpr -> failure x
  Language.Ocaml.Abs.SimpleExpr simpleexpr -> failure x
  Language.Ocaml.Abs.Subtractive subtractive expr -> failure x
  Language.Ocaml.Abs.Additive additive expr -> failure x
  Language.Ocaml.Abs.PowInfix funexpr powop expr -> failure x
  Language.Ocaml.Abs.MultDivInfix funexpr multdivop expr -> failure x
  Language.Ocaml.Abs.MultInfix funexpr expr -> failure x
  Language.Ocaml.Abs.DivInfix funexpr expr -> failure x
  Language.Ocaml.Abs.ModInfix funexpr expr -> failure x
  Language.Ocaml.Abs.PlusMinusInfix funexpr plusminusop expr -> failure x
  Language.Ocaml.Abs.PlusInfix funexpr expr -> failure x
  Language.Ocaml.Abs.PlusDotInfix funexpr expr -> failure x
  Language.Ocaml.Abs.MinusInfix funexpr expr -> failure x
  Language.Ocaml.Abs.MinusDotInfix funexpr expr -> failure x
  Language.Ocaml.Abs.Cons funexpr expr -> failure x
  Language.Ocaml.Abs.ConcatInfix funexpr concatop expr -> failure x
  Language.Ocaml.Abs.RelInfix funexpr relop expr -> failure x
  Language.Ocaml.Abs.EqualInfix funexpr expr -> failure x
  Language.Ocaml.Abs.LessInfix funexpr expr -> failure x
  Language.Ocaml.Abs.GreaterInfix funexpr expr -> failure x
  Language.Ocaml.Abs.Infix funexpr expr -> failure x
  Language.Ocaml.Abs.OrInfix funexpr expr -> failure x
  Language.Ocaml.Abs.BarBarInfix funexpr expr -> failure x
  Language.Ocaml.Abs.Comma expr exprcommas -> failure x
  Language.Ocaml.Abs.UpdateExpr lident expr -> failure x
  Language.Ocaml.Abs.AssignInfix funexpr expr -> failure x
  Language.Ocaml.Abs.QualifiedDot simpleexpr labellongident expr -> failure x
  Language.Ocaml.Abs.ArrayUpdateExpr simpleexpr seqexpr expr -> failure x
  Language.Ocaml.Abs.StringUpdateExpr simpleexpr seqexpr expr -> failure x
  Language.Ocaml.Abs.BigArrayUpdateExpr simpleexpr seqexpr expr -> failure x
  Language.Ocaml.Abs.ParenDotopUpdateExpr simpleexpr qualifieddotop exprs expr -> failure x
  Language.Ocaml.Abs.BracketDotopUpdateExpr simpleexpr qualifieddotop exprs expr -> failure x
  Language.Ocaml.Abs.BraceDotopUpdateExpr simpleexpr qualifieddotop exprs expr -> failure x
  Language.Ocaml.Abs.IfElse ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.Let letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.While ext attributes seqexpr1 seqexpr2 -> failure x
  Language.Ocaml.Abs.For ext attributes pattern_ seqexpr1 directionflag seqexpr2 seqexpr3 -> failure x
  Language.Ocaml.Abs.FunExprWithAttribute funexpr attribute -> failure x

transExpr :: Language.Ocaml.Abs.Expr -> Result
transExpr x = case x of
  Language.Ocaml.Abs.Function15 ext attributes matchcases -> failure x
  Language.Ocaml.Abs.Let15 letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding15 letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule15 ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException15 ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen15 overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun15 ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match15 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try15 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.IfElse15 ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If15 ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.FunExpr15 funexpr -> failure x
  Language.Ocaml.Abs.Function13 ext attributes matchcases -> failure x
  Language.Ocaml.Abs.Let13 letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding13 letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule13 ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException13 ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen13 overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun13 ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match13 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try13 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.IfElse13 ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If13 ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.FunExpr13 funexpr -> failure x
  Language.Ocaml.Abs.Function12 ext attributes matchcases -> failure x
  Language.Ocaml.Abs.Let12 letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding12 letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule12 ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException12 ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen12 overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun12 ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match12 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try12 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.IfElse12 ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If12 ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.FunExpr12 funexpr -> failure x
  Language.Ocaml.Abs.Function11 ext attributes matchcases -> failure x
  Language.Ocaml.Abs.Let11 letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding11 letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule11 ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException11 ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen11 overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun11 ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match11 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try11 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.IfElse11 ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If11 ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.FunExpr11 funexpr -> failure x
  Language.Ocaml.Abs.Function10 ext attributes matchcases -> failure x
  Language.Ocaml.Abs.Let10 letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding10 letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule10 ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException10 ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen10 overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun10 ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match10 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try10 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.IfElse10 ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If10 ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.FunExpr10 funexpr -> failure x
  Language.Ocaml.Abs.Function9 ext attributes matchcases -> failure x
  Language.Ocaml.Abs.Let9 letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding9 letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule9 ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException9 ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen9 overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun9 ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match9 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try9 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.IfElse9 ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If9 ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.FunExpr9 funexpr -> failure x
  Language.Ocaml.Abs.Function7 ext attributes matchcases -> failure x
  Language.Ocaml.Abs.Let7 letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding7 letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule7 ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException7 ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen7 overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun7 ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match7 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try7 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.IfElse7 ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If7 ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.FunExpr7 funexpr -> failure x
  Language.Ocaml.Abs.Function6 ext attributes matchcases -> failure x
  Language.Ocaml.Abs.Let6 letbindingsext seqexpr -> failure x
  Language.Ocaml.Abs.LetOpBinding6 letop letopbindings seqexpr -> failure x
  Language.Ocaml.Abs.LetModule6 ext attributes modulename modulebindingbody seqexpr -> failure x
  Language.Ocaml.Abs.LetException6 ext attributes1 constrident generalizedconstructorarguments attributes2 seqexpr -> failure x
  Language.Ocaml.Abs.LetOpen6 overrideflag ext attributes moduleexpr seqexpr -> failure x
  Language.Ocaml.Abs.Fun6 ext attributes funparams optionalatomictypeannotation funbody -> failure x
  Language.Ocaml.Abs.Match6 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.Try6 ext attributes seqexpr matchcases -> failure x
  Language.Ocaml.Abs.IfElse6 ext attributes seqexpr expr1 expr2 -> failure x
  Language.Ocaml.Abs.If6 ext attributes seqexpr expr -> failure x
  Language.Ocaml.Abs.FunExpr6 funexpr -> failure x
  Language.Ocaml.Abs.Function ext attributes matchcases -> failure x
  Language.Ocaml.Abs.FunExpr1 funexpr -> failure x

transSimpleExpr :: Language.Ocaml.Abs.SimpleExpr -> Result
transSimpleExpr x = case x of
  Language.Ocaml.Abs.SeqExpr seqexpr -> failure x
  Language.Ocaml.Abs.SeqExprWithType seqexpr typeconstraint -> failure x
  Language.Ocaml.Abs.ValLongident vallongident -> failure x
  Language.Ocaml.Abs.Constant constant -> failure x
  Language.Ocaml.Abs.ConstrName constrlongident -> failure x
  Language.Ocaml.Abs.NameTagExpr nametag -> failure x
  Language.Ocaml.Abs.ListExpr exprs -> failure x
  Language.Ocaml.Abs.RecordExpr recordexprcontent -> failure x
  Language.Ocaml.Abs.EmptyArrayExpr -> failure x
  Language.Ocaml.Abs.ArrayExpr exprs -> failure x
  Language.Ocaml.Abs.EmptyObjectExpr -> failure x
  Language.Ocaml.Abs.ObjectExpr objectexprfields -> failure x
  Language.Ocaml.Abs.LocalOpenUnit modlongident -> failure x
  Language.Ocaml.Abs.LocalOpenExpr modlongident seqexpr -> failure x
  Language.Ocaml.Abs.LocalOpenEmptyListExpr modlongident -> failure x
  Language.Ocaml.Abs.LocalOpenListExpr modlongident exprs -> failure x
  Language.Ocaml.Abs.LocalOpenRecordExpr modlongident recordexprcontent -> failure x
  Language.Ocaml.Abs.LocalOpenEmptyArrayExpr modlongident -> failure x
  Language.Ocaml.Abs.LocalOpenArrayExpr modlongident exprs -> failure x
  Language.Ocaml.Abs.LocalOpenObjectExpr modlongident objectexprfields -> failure x
  Language.Ocaml.Abs.LocalOpenModule modlongident ext attributes moduleexpr moduletype -> failure x
  Language.Ocaml.Abs.BeginEnd ext attributes seqexpr -> failure x
  Language.Ocaml.Abs.EmptyBeginEnd ext attributes -> failure x
  Language.Ocaml.Abs.New ext attributes classlongident -> failure x
  Language.Ocaml.Abs.Module ext attributes moduleexpr -> failure x
  Language.Ocaml.Abs.ModuleWithType ext attributes moduleexpr moduletype -> failure x
  Language.Ocaml.Abs.Object ext attributes classselfpattern classfields -> failure x
  Language.Ocaml.Abs.Extension extension -> failure x
  Language.Ocaml.Abs.PrefixApp prefixop simpleexpr -> failure x
  Language.Ocaml.Abs.BangApp simpleexpr -> failure x
  Language.Ocaml.Abs.RecordAccessExpr simpleexpr labellongident -> failure x
  Language.Ocaml.Abs.ArrayAccessExpr simpleexpr seqexpr -> failure x
  Language.Ocaml.Abs.StringAccessExpr simpleexpr seqexpr -> failure x
  Language.Ocaml.Abs.BigArrayAccessExpr simpleexpr seqexpr -> failure x
  Language.Ocaml.Abs.ParenDotopAccessExpr simpleexpr qualifieddotop exprs -> failure x
  Language.Ocaml.Abs.BracketDotopAccessExpr simpleexpr qualifieddotop exprs -> failure x
  Language.Ocaml.Abs.BraceDotopAccessExpr simpleexpr qualifieddotop exprs -> failure x
  Language.Ocaml.Abs.MethodInvocation simpleexpr lident -> failure x
  Language.Ocaml.Abs.HashOp simpleexpr1 hashop simpleexpr2 -> failure x

transLabeledSimpleExpr :: Language.Ocaml.Abs.LabeledSimpleExpr -> Result
transLabeledSimpleExpr x = case x of
  Language.Ocaml.Abs.ExprWithoutLabel simpleexpr -> failure x
  Language.Ocaml.Abs.LabeledExpr label simpleexpr -> failure x
  Language.Ocaml.Abs.LabeExpr lident -> failure x
  Language.Ocaml.Abs.LabelWithTypExpr lident typeconstraint -> failure x
  Language.Ocaml.Abs.OptLabelExpr lident -> failure x
  Language.Ocaml.Abs.OptLabeledExpr optlabel simpleexpr -> failure x

transLetBindingBodyNoPunning :: Language.Ocaml.Abs.LetBindingBodyNoPunning -> Result
transLetBindingBodyNoPunning x = case x of
  Language.Ocaml.Abs.StrictBinding valident strictbinding -> failure x
  Language.Ocaml.Abs.BindingWithMonoType valident typeconstraint seqexpr -> failure x
  Language.Ocaml.Abs.BindingWithPolyType valident typevars coretype seqexpr -> failure x
  Language.Ocaml.Abs.BindingWithLocallyAbstractType valident lidents coretype seqexpr -> failure x
  Language.Ocaml.Abs.PatternBinding patternnoexn seqexpr -> failure x
  Language.Ocaml.Abs.PatternBindingWithType simplepatternnotident coretype seqexpr -> failure x

transLetBindingBody :: Language.Ocaml.Abs.LetBindingBody -> Result
transLetBindingBody x = case x of
  Language.Ocaml.Abs.LetBindingBodyNoPunning letbindingbodynopunning -> failure x

transLetBindingsNoExt :: Language.Ocaml.Abs.LetBindingsNoExt -> Result
transLetBindingsNoExt x = case x of
  Language.Ocaml.Abs.SingleLetBindingNoExt attributes recflag letbindingbody postitemattributes -> failure x
  Language.Ocaml.Abs.MultipleLetBindingNoExt letbindingsnoext andletbinding -> failure x

transLetBindingsExt :: Language.Ocaml.Abs.LetBindingsExt -> Result
transLetBindingsExt x = case x of
  Language.Ocaml.Abs.SingleLetBindingExt ext attributes recflag letbindingbody postitemattributes -> failure x
  Language.Ocaml.Abs.MultipleLetBindingExt letbindingsext andletbinding -> failure x

transAndLetBinding :: Language.Ocaml.Abs.AndLetBinding -> Result
transAndLetBinding x = case x of
  Language.Ocaml.Abs.AndLetBinding attributes letbindingbody postitemattributes -> failure x

transLetopBindingBody :: Language.Ocaml.Abs.LetopBindingBody -> Result
transLetopBindingBody x = case x of
  Language.Ocaml.Abs.LetopStrictBinding valident strictbinding -> failure x
  Language.Ocaml.Abs.LetopValIdent valident -> failure x
  Language.Ocaml.Abs.LetopPatternBindingWithType simplepattern coretype seqexpr -> failure x
  Language.Ocaml.Abs.LetopPatternBinding patternnoexn seqexpr -> failure x

transLetopBindings :: Language.Ocaml.Abs.LetopBindings -> Result
transLetopBindings x = case x of
  Language.Ocaml.Abs.BindingBody letopbindingbody -> failure x
  Language.Ocaml.Abs.AndOpBinding letopbindings andop letopbindingbody -> failure x

transStrictBinding :: Language.Ocaml.Abs.StrictBinding -> Result
transStrictBinding x = case x of
  Language.Ocaml.Abs.Binding seqexpr -> failure x
  Language.Ocaml.Abs.FunParams funparams optionaltypeconstraint funbody -> failure x

transFunBody :: Language.Ocaml.Abs.FunBody -> Result
transFunBody x = case x of
  Language.Ocaml.Abs.FunBodyFunction ext attributes matchcases -> failure x
  Language.Ocaml.Abs.FunBodyFinalFunExpr funexpr -> failure x
  Language.Ocaml.Abs.FunBodyFinalFunExprSemi funexpr -> failure x
  Language.Ocaml.Abs.FunBodyMoreFunExprs funexpr seqexpr -> failure x
  Language.Ocaml.Abs.FunBodyMoreFunExprsAttr funexpr attrids seqexpr -> failure x

transMatchCase :: Language.Ocaml.Abs.MatchCase -> Result
transMatchCase x = case x of
  Language.Ocaml.Abs.MatchCase pattern_ seqexpr -> failure x
  Language.Ocaml.Abs.GuardedMatchCase pattern_ seqexpr1 seqexpr2 -> failure x
  Language.Ocaml.Abs.UnreachableMatchCase pattern_ -> failure x

transFunParam :: Language.Ocaml.Abs.FunParam -> Result
transFunParam x = case x of
  Language.Ocaml.Abs.LocallyAbstractTypeParam lidents -> failure x
  Language.Ocaml.Abs.Param labeledsimplepattern -> failure x

transExprComma :: Language.Ocaml.Abs.ExprComma -> Result
transExprComma x = case x of
  Language.Ocaml.Abs.ExprComma expr -> failure x

transRecordExprFields :: Language.Ocaml.Abs.RecordExprFields -> Result
transRecordExprFields x = case x of
  Language.Ocaml.Abs.FinalRecordExprField1 recordexprfield -> failure x
  Language.Ocaml.Abs.FinalRecordExprField2 recordexprfield -> failure x
  Language.Ocaml.Abs.MoreRecordExprFields recordexprfield recordexprfields -> failure x

transRecordExprContent :: Language.Ocaml.Abs.RecordExprContent -> Result
transRecordExprContent x = case x of
  Language.Ocaml.Abs.RecordExprContent1 simpleexpr recordexprfields -> failure x
  Language.Ocaml.Abs.RecordExprContent2 recordexprfields -> failure x

transOptionalTypeConstraint :: Language.Ocaml.Abs.OptionalTypeConstraint -> Result
transOptionalTypeConstraint x = case x of
  Language.Ocaml.Abs.NoTypeConstraint -> failure x
  Language.Ocaml.Abs.ATypeConstraint typeconstraint -> failure x

transRecordExprField :: Language.Ocaml.Abs.RecordExprField -> Result
transRecordExprField x = case x of
  Language.Ocaml.Abs.RecordExprField labellongident optionaltypeconstraint optionalassignexpr -> failure x

transOptionalAssignExpr :: Language.Ocaml.Abs.OptionalAssignExpr -> Result
transOptionalAssignExpr x = case x of
  Language.Ocaml.Abs.NoAssign -> failure x
  Language.Ocaml.Abs.AnAssign expr -> failure x

transObjectExprField :: Language.Ocaml.Abs.ObjectExprField -> Result
transObjectExprField x = case x of
  Language.Ocaml.Abs.ObjectExprField lident optionalassignexpr -> failure x

transTypeConstraint :: Language.Ocaml.Abs.TypeConstraint -> Result
transTypeConstraint x = case x of
  Language.Ocaml.Abs.TypeConstraint coretype -> failure x
  Language.Ocaml.Abs.CoercionFromTo coretype1 coretype2 -> failure x
  Language.Ocaml.Abs.CoercionTo coretype -> failure x

transPattern :: Language.Ocaml.Abs.Pattern -> Result
transPattern x = case x of
  Language.Ocaml.Abs.ConsPattern pattern_1 pattern_2 -> failure x
  Language.Ocaml.Abs.PatternWithAttribute pattern_ attribute -> failure x
  Language.Ocaml.Abs.PatternGen patterngen -> failure x
  Language.Ocaml.Abs.AsPattern pattern_ valident -> failure x
  Language.Ocaml.Abs.TuplePattern patterncommalistpattern -> failure x
  Language.Ocaml.Abs.OrPattern pattern_1 pattern_2 -> failure x
  Language.Ocaml.Abs.ExceptionPattern ext attributes pattern_ -> failure x

transPatternNoExn :: Language.Ocaml.Abs.PatternNoExn -> Result
transPatternNoExn x = case x of
  Language.Ocaml.Abs.ConsPatternNoExn patternnoexn pattern_ -> failure x
  Language.Ocaml.Abs.PatternWithAttributeNoExn patternnoexn attribute -> failure x
  Language.Ocaml.Abs.PatternGenNoExn patterngen -> failure x
  Language.Ocaml.Abs.AsPatternNoExn patternnoexn valident -> failure x
  Language.Ocaml.Abs.TuplePatternNoExn patterncommalistpatternnoexn -> failure x
  Language.Ocaml.Abs.OrPatternNoExn patternnoexn pattern_ -> failure x

transPatternGen :: Language.Ocaml.Abs.PatternGen -> Result
transPatternGen x = case x of
  Language.Ocaml.Abs.SimplePatternGen simplepattern -> failure x
  Language.Ocaml.Abs.ConstrPattern constrlongident pattern_ -> failure x
  Language.Ocaml.Abs.ConstrPatternWithLocallyAbstractType constrlongident lidents simplepattern -> failure x
  Language.Ocaml.Abs.TagPatternGen nametag pattern_ -> failure x
  Language.Ocaml.Abs.LazyPattern ext attributes simplepattern -> failure x

transSimplePattern :: Language.Ocaml.Abs.SimplePattern -> Result
transSimplePattern x = case x of
  Language.Ocaml.Abs.ValIdent valident -> failure x
  Language.Ocaml.Abs.SimplePatternNotIdent simplepatternnotident -> failure x

transSimplePatternNotIdent :: Language.Ocaml.Abs.SimplePatternNotIdent -> Result
transSimplePatternNotIdent x = case x of
  Language.Ocaml.Abs.Pattern pattern_ -> failure x
  Language.Ocaml.Abs.SimpleDelimitedPattern simpledelimitedpattern -> failure x
  Language.Ocaml.Abs.ModulePattern ext attributes modulename -> failure x
  Language.Ocaml.Abs.ModulePatternWithType ext attributes modulename packagetype -> failure x
  Language.Ocaml.Abs.UnderscorePattern -> failure x
  Language.Ocaml.Abs.ConstantPattern signedconstant -> failure x
  Language.Ocaml.Abs.RangePattern signedconstant1 signedconstant2 -> failure x
  Language.Ocaml.Abs.ConstrNamePattern constrlongident -> failure x
  Language.Ocaml.Abs.TagPattern nametag -> failure x
  Language.Ocaml.Abs.TypeConstrPattern typelongident -> failure x
  Language.Ocaml.Abs.DotPattern modlongident simpledelimitedpattern -> failure x
  Language.Ocaml.Abs.EmptyStringPattern modlongident -> failure x
  Language.Ocaml.Abs.EmptyArrayPattern_ modlongident -> failure x
  Language.Ocaml.Abs.ArrayPattern_ modlongident pattern_ -> failure x
  Language.Ocaml.Abs.PatternWithType pattern_ coretype -> failure x
  Language.Ocaml.Abs.ExtensionPattern extension -> failure x

transSimpleDelimitedPattern :: Language.Ocaml.Abs.SimpleDelimitedPattern -> Result
transSimpleDelimitedPattern x = case x of
  Language.Ocaml.Abs.RecordPattern recordpatcontent -> failure x
  Language.Ocaml.Abs.ListPattern patterns -> failure x
  Language.Ocaml.Abs.ArrayPattern patterns -> failure x
  Language.Ocaml.Abs.EmptyArrayPattern -> failure x

transPatternCommaListPattern :: Language.Ocaml.Abs.PatternCommaListPattern -> Result
transPatternCommaListPattern x = case x of
  Language.Ocaml.Abs.MorePattern patterncommalistpattern pattern_ -> failure x
  Language.Ocaml.Abs.TwoPattern pattern_1 pattern_2 -> failure x

transPatternCommaListPatternNoExn :: Language.Ocaml.Abs.PatternCommaListPatternNoExn -> Result
transPatternCommaListPatternNoExn x = case x of
  Language.Ocaml.Abs.MorePatternNoExn patterncommalistpatternnoexn pattern_ -> failure x
  Language.Ocaml.Abs.TwoPatternNoExn patternnoexn pattern_ -> failure x

transOptionalSemi :: Language.Ocaml.Abs.OptionalSemi -> Result
transOptionalSemi x = case x of
  Language.Ocaml.Abs.NoSemi -> failure x
  Language.Ocaml.Abs.ASemi -> failure x

transRecordPatContent :: Language.Ocaml.Abs.RecordPatContent -> Result
transRecordPatContent x = case x of
  Language.Ocaml.Abs.FinalRecordPattern recordpatfield optionalsemi -> failure x
  Language.Ocaml.Abs.UnderscoreRecordPattern recordpatfield optionalsemi -> failure x
  Language.Ocaml.Abs.MoreRecordPatterns recordpatfield recordpatcontent -> failure x

transOptionalCoreType :: Language.Ocaml.Abs.OptionalCoreType -> Result
transOptionalCoreType x = case x of
  Language.Ocaml.Abs.NoCoreType -> failure x
  Language.Ocaml.Abs.ACoreType coretype -> failure x

transOptionalAssignPattern :: Language.Ocaml.Abs.OptionalAssignPattern -> Result
transOptionalAssignPattern x = case x of
  Language.Ocaml.Abs.NoAssignPattern -> failure x
  Language.Ocaml.Abs.AnAssignPattern pattern_ -> failure x

transRecordPatField :: Language.Ocaml.Abs.RecordPatField -> Result
transRecordPatField x = case x of
  Language.Ocaml.Abs.RecordPatField labellongident optionalcoretype optionalassignpattern -> failure x

transValueDescription :: Language.Ocaml.Abs.ValueDescription -> Result
transValueDescription x = case x of
  Language.Ocaml.Abs.ValueDescription ext attributes valident polytype postitemattributes -> failure x

transPrimitiveDeclaration :: Language.Ocaml.Abs.PrimitiveDeclaration -> Result
transPrimitiveDeclaration x = case x of
  Language.Ocaml.Abs.PrimitiveDeclaration ext attributes valident polytype strings postitemattributes -> failure x

transAndTypeDeclaration :: Language.Ocaml.Abs.AndTypeDeclaration -> Result
transAndTypeDeclaration x = case x of
  Language.Ocaml.Abs.AndTypeDeclaration attributes typeparameters lident typekind constraints postitemattributes -> failure x

transTypeSubstDeclarations :: Language.Ocaml.Abs.TypeSubstDeclarations -> Result
transTypeSubstDeclarations x = case x of
  Language.Ocaml.Abs.TypeSubstDeclarations typesubstdeclaration andtypesubstdeclarations -> failure x

transAndTypeSubstDeclaration :: Language.Ocaml.Abs.AndTypeSubstDeclaration -> Result
transAndTypeSubstDeclaration x = case x of
  Language.Ocaml.Abs.AndTypeSubstDeclaration attributes typeparameters lident typesubstkind constraints postitemattributes -> failure x

transTypeDeclaration :: Language.Ocaml.Abs.TypeDeclaration -> Result
transTypeDeclaration x = case x of
  Language.Ocaml.Abs.NonrecTypeDeclaration ext attributes typeparameters lident typekind constraints postitemattributes -> failure x
  Language.Ocaml.Abs.TypeDeclaration ext attributes typeparameters lident typekind constraints postitemattributes -> failure x

transTypeSubstDeclaration :: Language.Ocaml.Abs.TypeSubstDeclaration -> Result
transTypeSubstDeclaration x = case x of
  Language.Ocaml.Abs.TypeSubstDeclaration ext attributes typeparameters lident typesubstkind constraints postitemattributes -> failure x

transConstraint :: Language.Ocaml.Abs.Constraint -> Result
transConstraint x = case x of
  Language.Ocaml.Abs.Constraint coretype1 coretype2 -> failure x

transNonemptyTypeKind :: Language.Ocaml.Abs.NonemptyTypeKind -> Result
transNonemptyTypeKind x = case x of
  Language.Ocaml.Abs.AbstractType coretype -> failure x
  Language.Ocaml.Abs.VariantType constructordeclarations -> failure x
  Language.Ocaml.Abs.OpenType -> failure x
  Language.Ocaml.Abs.RecordType labeldeclarations -> failure x
  Language.Ocaml.Abs.PrivateAbstractType coretype -> failure x
  Language.Ocaml.Abs.PrivateVariantType constructordeclarations -> failure x
  Language.Ocaml.Abs.PrivateOpenType -> failure x
  Language.Ocaml.Abs.PrivateRecordType labeldeclarations -> failure x
  Language.Ocaml.Abs.TypeSynonymVariantType coretype constructordeclarations -> failure x
  Language.Ocaml.Abs.TypeSynonymPrivateVariantType coretype constructordeclarations -> failure x
  Language.Ocaml.Abs.TypeSynonymOpenType coretype -> failure x
  Language.Ocaml.Abs.TypeSynonymPrivateOpenType coretype -> failure x
  Language.Ocaml.Abs.TypeSynonymRecordType coretype labeldeclarations -> failure x
  Language.Ocaml.Abs.TypeSynonymPrivateRecordType coretype labeldeclarations -> failure x

transTypeKind :: Language.Ocaml.Abs.TypeKind -> Result
transTypeKind x = case x of
  Language.Ocaml.Abs.NoTypeKind -> failure x
  Language.Ocaml.Abs.TypeKind nonemptytypekind -> failure x

transTypeSubstKind :: Language.Ocaml.Abs.TypeSubstKind -> Result
transTypeSubstKind x = case x of
  Language.Ocaml.Abs.TypeSubstKind nonemptytypekind -> failure x

transTypeParameters :: Language.Ocaml.Abs.TypeParameters -> Result
transTypeParameters x = case x of
  Language.Ocaml.Abs.NoTypeParameters -> failure x
  Language.Ocaml.Abs.SingleTypeParameter typeparameter -> failure x
  Language.Ocaml.Abs.TypeParameters typeparameters -> failure x

transTypeParameter :: Language.Ocaml.Abs.TypeParameter -> Result
transTypeParameter x = case x of
  Language.Ocaml.Abs.TypeParameter typevariance typevariable -> failure x

transTypeVariable :: Language.Ocaml.Abs.TypeVariable -> Result
transTypeVariable x = case x of
  Language.Ocaml.Abs.TypeVariable ocamlident -> failure x
  Language.Ocaml.Abs.Underscore -> failure x

transTypeVariance :: Language.Ocaml.Abs.TypeVariance -> Result
transTypeVariance x = case x of
  Language.Ocaml.Abs.NoVarianceNoInjectivity -> failure x
  Language.Ocaml.Abs.CovariantNoInjectivity -> failure x
  Language.Ocaml.Abs.ContravariantNoInjectivity -> failure x
  Language.Ocaml.Abs.NoVarianceInjective -> failure x
  Language.Ocaml.Abs.CovariantInjective -> failure x
  Language.Ocaml.Abs.InjectiveCovariant -> failure x
  Language.Ocaml.Abs.ContravariantInjective -> failure x
  Language.Ocaml.Abs.InjectiveContravariant -> failure x
  Language.Ocaml.Abs.InfixOpVariance plusminusop -> failure x
  Language.Ocaml.Abs.PrefixOpVariance prefixop -> failure x

transConstructorDeclarations :: Language.Ocaml.Abs.ConstructorDeclarations -> Result
transConstructorDeclarations x = case x of
  Language.Ocaml.Abs.EmptyConstructorDeclarations -> failure x
  Language.Ocaml.Abs.BarConstructorDeclarations constructordeclarations -> failure x
  Language.Ocaml.Abs.ConstructorDeclarations constructordeclarations -> failure x

transConstructorDeclaration :: Language.Ocaml.Abs.ConstructorDeclaration -> Result
transConstructorDeclaration x = case x of
  Language.Ocaml.Abs.ConstructorDeclaration constrident generalizedconstructorarguments attributes -> failure x

transStrExceptionDeclaration :: Language.Ocaml.Abs.StrExceptionDeclaration -> Result
transStrExceptionDeclaration x = case x of
  Language.Ocaml.Abs.SigStrExceptionDeclaration sigexceptiondeclaration -> failure x
  Language.Ocaml.Abs.Exception ext attributes1 constrident constrlongident attributes2 postitemattributes -> failure x

transSigExceptionDeclaration :: Language.Ocaml.Abs.SigExceptionDeclaration -> Result
transSigExceptionDeclaration x = case x of
  Language.Ocaml.Abs.SigExceptionDeclaration ext attributes1 constrident generalizedconstructorarguments attributes2 postitemattributes -> failure x

transGeneralizedConstructorArguments :: Language.Ocaml.Abs.GeneralizedConstructorArguments -> Result
transGeneralizedConstructorArguments x = case x of
  Language.Ocaml.Abs.NoGeneralizedConstructorArguments -> failure x
  Language.Ocaml.Abs.GeneralizedConstructorArguments1 constructorarguments -> failure x
  Language.Ocaml.Abs.GeneralizedConstructorArguments2 constructorarguments atomictype -> failure x
  Language.Ocaml.Abs.GeneralizedConstructorArguments3 typevars constructorarguments atomictype -> failure x
  Language.Ocaml.Abs.GeneralizedConstructorArguments4 atomictype -> failure x
  Language.Ocaml.Abs.GeneralizedConstructorArguments5 typevars atomictype -> failure x

transConstructorArguments :: Language.Ocaml.Abs.ConstructorArguments -> Result
transConstructorArguments x = case x of
  Language.Ocaml.Abs.Arg1 atomictypes -> failure x
  Language.Ocaml.Abs.Arg2 labeldeclarations -> failure x

transLabelDeclarations :: Language.Ocaml.Abs.LabelDeclarations -> Result
transLabelDeclarations x = case x of
  Language.Ocaml.Abs.FinalLabelDeclaration labeldeclaration -> failure x
  Language.Ocaml.Abs.FinalLabelDeclarationSemi labeldeclarationsemi -> failure x
  Language.Ocaml.Abs.MoreLabelDeclarations labeldeclarationsemi labeldeclarations -> failure x

transLabelDeclaration :: Language.Ocaml.Abs.LabelDeclaration -> Result
transLabelDeclaration x = case x of
  Language.Ocaml.Abs.LabelDeclarationMonoType mutableflag lident aliastype attributes -> failure x
  Language.Ocaml.Abs.LabelDeclarationPolyType mutableflag lident typevars aliastype attributes -> failure x

transLabelDeclarationSemi :: Language.Ocaml.Abs.LabelDeclarationSemi -> Result
transLabelDeclarationSemi x = case x of
  Language.Ocaml.Abs.LabelDeclarationSemiMonoType mutableflag lident aliastype attributes1 attributes2 -> failure x
  Language.Ocaml.Abs.LabelDeclarationSemiPolyType mutableflag lident typevars aliastype attributes1 attributes2 -> failure x

transBarLlistExtensionConstructor :: Language.Ocaml.Abs.BarLlistExtensionConstructor -> Result
transBarLlistExtensionConstructor x = case x of
  Language.Ocaml.Abs.NoExtensionConstructors -> failure x
  Language.Ocaml.Abs.BarExtensionConstructors extensionconstructors -> failure x
  Language.Ocaml.Abs.ExtensionConstructors extensionconstructors -> failure x

transBarLlistExtensionConstructorDeclaration :: Language.Ocaml.Abs.BarLlistExtensionConstructorDeclaration -> Result
transBarLlistExtensionConstructorDeclaration x = case x of
  Language.Ocaml.Abs.NoConstructor -> failure x
  Language.Ocaml.Abs.Constructor extensionconstructordeclarations -> failure x

transExtensionConstructor :: Language.Ocaml.Abs.ExtensionConstructor -> Result
transExtensionConstructor x = case x of
  Language.Ocaml.Abs.Declaration extensionconstructordeclaration -> failure x
  Language.Ocaml.Abs.Rebind extensionconstructorrebind -> failure x

transExtensionConstructorDeclaration :: Language.Ocaml.Abs.ExtensionConstructorDeclaration -> Result
transExtensionConstructorDeclaration x = case x of
  Language.Ocaml.Abs.ExtensionConstructorDeclaration constrident generalizedconstructorarguments attributes -> failure x

transExtensionConstructorRebind :: Language.Ocaml.Abs.ExtensionConstructorRebind -> Result
transExtensionConstructorRebind x = case x of
  Language.Ocaml.Abs.ExtensionConstructorRebind constrident constrlongident attributes -> failure x

transWithConstraint :: Language.Ocaml.Abs.WithConstraint -> Result
transWithConstraint x = case x of
  Language.Ocaml.Abs.WithConstraint1 typeparameters labellongident withtypebinder aliastype constraints -> failure x
  Language.Ocaml.Abs.WithConstraint2 typeparameters labellongident aliastype -> failure x
  Language.Ocaml.Abs.WithConstraint3 modlongident modextlongident -> failure x
  Language.Ocaml.Abs.WithConstraint4 modlongident modextlongident -> failure x
  Language.Ocaml.Abs.WithConstraint5 mtylongident moduletype -> failure x
  Language.Ocaml.Abs.WithConstraint6 mtylongident moduletype -> failure x

transWithTypeBinder :: Language.Ocaml.Abs.WithTypeBinder -> Result
transWithTypeBinder x = case x of
  Language.Ocaml.Abs.WithTypeBinderEqual -> failure x
  Language.Ocaml.Abs.WithTypeBinderEqualPrivate -> failure x

transTypeVar :: Language.Ocaml.Abs.TypeVar -> Result
transTypeVar x = case x of
  Language.Ocaml.Abs.TypeVarIdent ocamlident -> failure x

transPolyType :: Language.Ocaml.Abs.PolyType -> Result
transPolyType x = case x of
  Language.Ocaml.Abs.MonoCoreType coretype -> failure x
  Language.Ocaml.Abs.PolyCoreType typevars coretype -> failure x

transCoreType :: Language.Ocaml.Abs.CoreType -> Result
transCoreType x = case x of
  Language.Ocaml.Abs.CoreTypeWithoutAttribute aliastype -> failure x
  Language.Ocaml.Abs.CoreTypeWithAttribute coretype attribute -> failure x

transAliasType :: Language.Ocaml.Abs.AliasType -> Result
transAliasType x = case x of
  Language.Ocaml.Abs.FunctionType functiontype -> failure x
  Language.Ocaml.Abs.AliasType aliastype typevar -> failure x

transFunctionType :: Language.Ocaml.Abs.FunctionType -> Result
transFunctionType x = case x of
  Language.Ocaml.Abs.TupleType tupletype -> failure x
  Language.Ocaml.Abs.ArgTypeWithOptLabel optlabel tupletype functiontype -> failure x
  Language.Ocaml.Abs.ArgTypeWithLabel lident tupletype functiontype -> failure x
  Language.Ocaml.Abs.ArgTypeWithoutLabel tupletype functiontype -> failure x

transTupleType :: Language.Ocaml.Abs.TupleType -> Result
transTupleType x = case x of
  Language.Ocaml.Abs.AtomicType atomictype -> failure x
  Language.Ocaml.Abs.AtomicTypes atomictype atomictypes -> failure x

transOptionalBar :: Language.Ocaml.Abs.OptionalBar -> Result
transOptionalBar x = case x of
  Language.Ocaml.Abs.NoBar -> failure x
  Language.Ocaml.Abs.ABar -> failure x

transDelimitedTypeSupportingLocalOpen :: Language.Ocaml.Abs.DelimitedTypeSupportingLocalOpen -> Result
transDelimitedTypeSupportingLocalOpen x = case x of
  Language.Ocaml.Abs.LocalOpen1 coretype -> failure x
  Language.Ocaml.Abs.LocalOpen2 ext attributes packagetype -> failure x
  Language.Ocaml.Abs.LocalOpen3 tagfield -> failure x
  Language.Ocaml.Abs.LocalOpen4 rowfields -> failure x
  Language.Ocaml.Abs.LocalOpen5 rowfield rowfields -> failure x
  Language.Ocaml.Abs.LocalOpen6 optionalbar rowfields -> failure x
  Language.Ocaml.Abs.LocalOpen7 -> failure x
  Language.Ocaml.Abs.LocalOpen8 optionalbar rowfields -> failure x
  Language.Ocaml.Abs.LocalOpen9 optionalbar rowfields nametags -> failure x

transObjectType :: Language.Ocaml.Abs.ObjectType -> Result
transObjectType x = case x of
  Language.Ocaml.Abs.MethList methlist -> failure x
  Language.Ocaml.Abs.Empty -> failure x

transDelimitedType :: Language.Ocaml.Abs.DelimitedType -> Result
transDelimitedType x = case x of
  Language.Ocaml.Abs.ObjectType objecttype -> failure x
  Language.Ocaml.Abs.DelimitedTypeExtension extension -> failure x
  Language.Ocaml.Abs.DelimitedTypeSupportingLocalOpen delimitedtypesupportinglocalopen -> failure x

transAtomicType :: Language.Ocaml.Abs.AtomicType -> Result
transAtomicType x = case x of
  Language.Ocaml.Abs.DelimitedType delimitedtype -> failure x
  Language.Ocaml.Abs.TypeConstr typelongident -> failure x
  Language.Ocaml.Abs.SimpleTypeApp atomictype typelongident -> failure x
  Language.Ocaml.Abs.ComplexTypeApp coretype coretypes typelongident -> failure x
  Language.Ocaml.Abs.ClassTypeConstr cltylongident -> failure x
  Language.Ocaml.Abs.SimpleSubTypeApp atomictype cltylongident -> failure x
  Language.Ocaml.Abs.ComplexSubTypeApp coretype coretypes cltylongident -> failure x
  Language.Ocaml.Abs.QualifiedDelimitedType modextlongident delimitedtypesupportinglocalopen -> failure x
  Language.Ocaml.Abs.TypeVar ocamlident -> failure x
  Language.Ocaml.Abs.UnderscoreType -> failure x

transPackageType :: Language.Ocaml.Abs.PackageType -> Result
transPackageType x = case x of
  Language.Ocaml.Abs.PackageType moduletype -> failure x

transRowField :: Language.Ocaml.Abs.RowField -> Result
transRowField x = case x of
  Language.Ocaml.Abs.TagField tagfield -> failure x
  Language.Ocaml.Abs.CoreType coretype -> failure x

transTagField :: Language.Ocaml.Abs.TagField -> Result
transTagField x = case x of
  Language.Ocaml.Abs.Of nametag optampersand aliastypes attributes -> failure x
  Language.Ocaml.Abs.Tag nametag attributes -> failure x

transOptAmpersand :: Language.Ocaml.Abs.OptAmpersand -> Result
transOptAmpersand x = case x of
  Language.Ocaml.Abs.Ampersand -> failure x
  Language.Ocaml.Abs.NoAmpersand -> failure x

transMethList :: Language.Ocaml.Abs.MethList -> Result
transMethList x = case x of
  Language.Ocaml.Abs.FieldSemiMethListMonoType lident aliastype attributes1 attributes2 methlist -> failure x
  Language.Ocaml.Abs.FieldSemiMethListPolyType lident typevars aliastype attributes1 attributes2 methlist -> failure x
  Language.Ocaml.Abs.InheritSemiMethList atomictype methlist -> failure x
  Language.Ocaml.Abs.FieldSemiMonoType lident aliastype attributes -> failure x
  Language.Ocaml.Abs.FieldSemiPolyType lident typevars aliastype attributes -> failure x
  Language.Ocaml.Abs.InheritSemi atomictype -> failure x
  Language.Ocaml.Abs.FieldMonoType lident aliastype attributes -> failure x
  Language.Ocaml.Abs.FieldPolyType lident typevars aliastype attributes -> failure x
  Language.Ocaml.Abs.Inherit atomictype -> failure x
  Language.Ocaml.Abs.DotDot -> failure x

transConstant :: Language.Ocaml.Abs.Constant -> Result
transConstant x = case x of
  Language.Ocaml.Abs.Int int -> failure x
  Language.Ocaml.Abs.Char char -> failure x
  Language.Ocaml.Abs.String string -> failure x
  Language.Ocaml.Abs.Float float -> failure x

transSignedConstant :: Language.Ocaml.Abs.SignedConstant -> Result
transSignedConstant x = case x of
  Language.Ocaml.Abs.UnsignedConstant constant -> failure x
  Language.Ocaml.Abs.NegInt int -> failure x
  Language.Ocaml.Abs.NegFloat float -> failure x
  Language.Ocaml.Abs.PosInt int -> failure x
  Language.Ocaml.Abs.PosFloat float -> failure x

transOCamlIdent :: Language.Ocaml.Abs.OCamlIdent -> Result
transOCamlIdent x = case x of
  Language.Ocaml.Abs.Uppercase uident -> failure x
  Language.Ocaml.Abs.Lowercase lident -> failure x

transValExtraIdent :: Language.Ocaml.Abs.ValExtraIdent -> Result
transValExtraIdent x = case x of
  Language.Ocaml.Abs.Operator operator -> failure x

transValIdent :: Language.Ocaml.Abs.ValIdent -> Result
transValIdent x = case x of
  Language.Ocaml.Abs.LowercaseValIdent lident -> failure x
  Language.Ocaml.Abs.ValExtraIdent valextraident -> failure x

transOperator :: Language.Ocaml.Abs.Operator -> Result
transOperator x = case x of
  Language.Ocaml.Abs.PrefixOp prefixop -> failure x
  Language.Ocaml.Abs.LetOp letop -> failure x
  Language.Ocaml.Abs.AndOp andop -> failure x
  Language.Ocaml.Abs.ParenAccessDotop dotop indexmod -> failure x
  Language.Ocaml.Abs.ParenUpdateDotop dotop indexmod -> failure x
  Language.Ocaml.Abs.BraceAccessDotop dotop indexmod -> failure x
  Language.Ocaml.Abs.BraceUpdateDotop dotop indexmod -> failure x
  Language.Ocaml.Abs.HashSymbolOp hashop -> failure x
  Language.Ocaml.Abs.BangOp -> failure x
  Language.Ocaml.Abs.RelOp relop -> failure x
  Language.Ocaml.Abs.InfixEqual -> failure x
  Language.Ocaml.Abs.InfixLess -> failure x
  Language.Ocaml.Abs.InfixGreater -> failure x
  Language.Ocaml.Abs.InfixBarBar -> failure x
  Language.Ocaml.Abs.InfixAmpersand -> failure x
  Language.Ocaml.Abs.InfixAmpersandAmpersand -> failure x
  Language.Ocaml.Abs.ConcatOp concatop -> failure x
  Language.Ocaml.Abs.PlusMinusOp plusminusop -> failure x
  Language.Ocaml.Abs.InfixPlus -> failure x
  Language.Ocaml.Abs.InfixMinus -> failure x
  Language.Ocaml.Abs.MultDivOp multdivop -> failure x
  Language.Ocaml.Abs.InfixStar -> failure x
  Language.Ocaml.Abs.InfixSlash -> failure x
  Language.Ocaml.Abs.InfixPercent -> failure x
  Language.Ocaml.Abs.PowOp powop -> failure x
  Language.Ocaml.Abs.InfixOr -> failure x
  Language.Ocaml.Abs.InfixColonEqual -> failure x

transIndexMod :: Language.Ocaml.Abs.IndexMod -> Result
transIndexMod x = case x of
  Language.Ocaml.Abs.NoIndexMod -> failure x
  Language.Ocaml.Abs.SemiDotDot -> failure x

transConstrExtraIdent :: Language.Ocaml.Abs.ConstrExtraIdent -> Result
transConstrExtraIdent x = case x of
  Language.Ocaml.Abs.ConstrIdent -> failure x

transConstrExtraNonprefixIdent :: Language.Ocaml.Abs.ConstrExtraNonprefixIdent -> Result
transConstrExtraNonprefixIdent x = case x of
  Language.Ocaml.Abs.Brackets -> failure x
  Language.Ocaml.Abs.Parens -> failure x
  Language.Ocaml.Abs.FalseLiteral -> failure x
  Language.Ocaml.Abs.TrueLiteral -> failure x

transConstrIdent :: Language.Ocaml.Abs.ConstrIdent -> Result
transConstrIdent x = case x of
  Language.Ocaml.Abs.ConstrUppercaseIdent uident -> failure x
  Language.Ocaml.Abs.ConstrExtraIdent constrextraident -> failure x
  Language.Ocaml.Abs.ConstrExpraNonprefixIdent constrextranonprefixident -> failure x

transConstrLongident :: Language.Ocaml.Abs.ConstrLongident -> Result
transConstrLongident x = case x of
  Language.Ocaml.Abs.ModLongidentTodo modlongident -> failure x
  Language.Ocaml.Abs.QualifiedConstrExtraLongident modlongident constrextraident -> failure x
  Language.Ocaml.Abs.ConstrExtraLongdent constrextraident -> failure x
  Language.Ocaml.Abs.ConstrExtraNonprefixLonident constrextranonprefixident -> failure x

transValLongident :: Language.Ocaml.Abs.ValLongident -> Result
transValLongident x = case x of
  Language.Ocaml.Abs.UnqualifiedValLongIdent valident -> failure x
  Language.Ocaml.Abs.QualifiedValIdent modlongident valident -> failure x

transLabelLongident :: Language.Ocaml.Abs.LabelLongident -> Result
transLabelLongident x = case x of
  Language.Ocaml.Abs.LabelLongident lident -> failure x
  Language.Ocaml.Abs.QualifiedLabelLongident modlongident lident -> failure x

transTypeLongident :: Language.Ocaml.Abs.TypeLongident -> Result
transTypeLongident x = case x of
  Language.Ocaml.Abs.TypeLongident lident -> failure x
  Language.Ocaml.Abs.QualifiedTypelLongident modextlongident lident -> failure x

transModLongident :: Language.Ocaml.Abs.ModLongident -> Result
transModLongident x = case x of
  Language.Ocaml.Abs.ModLongident uident -> failure x
  Language.Ocaml.Abs.QualifiedModLongident modlongident uident -> failure x

transModExtLongident :: Language.Ocaml.Abs.ModExtLongident -> Result
transModExtLongident x = case x of
  Language.Ocaml.Abs.ModExtLongident uident -> failure x
  Language.Ocaml.Abs.QualifiedModExtLongident modextlongident uident -> failure x
  Language.Ocaml.Abs.ParenModExtLongident modextlongident1 modextlongident2 -> failure x

transMtyLongident :: Language.Ocaml.Abs.MtyLongident -> Result
transMtyLongident x = case x of
  Language.Ocaml.Abs.MtyLongident ocamlident -> failure x
  Language.Ocaml.Abs.QualifiedMtyLongident modextlongident ocamlident -> failure x

transCltyLongident :: Language.Ocaml.Abs.CltyLongident -> Result
transCltyLongident x = case x of
  Language.Ocaml.Abs.CltyLongident lident -> failure x
  Language.Ocaml.Abs.QualifiedCltyLongident modextlongident lident -> failure x

transClassLongident :: Language.Ocaml.Abs.ClassLongident -> Result
transClassLongident x = case x of
  Language.Ocaml.Abs.ClassLongident lident -> failure x
  Language.Ocaml.Abs.QualifiedClassLongident modlongident lident -> failure x

transOptionalToplevelDirectiveArgument :: Language.Ocaml.Abs.OptionalToplevelDirectiveArgument -> Result
transOptionalToplevelDirectiveArgument x = case x of
  Language.Ocaml.Abs.NoToplevelDirectiveArgument -> failure x
  Language.Ocaml.Abs.AToplevelDirectiveArgument topleveldirectiveargument -> failure x

transToplevelDirective :: Language.Ocaml.Abs.ToplevelDirective -> Result
transToplevelDirective x = case x of
  Language.Ocaml.Abs.ToplevelDirectiveApp ocamlident topleveldirectiveargument -> failure x

transToplevelDirectiveArgument :: Language.Ocaml.Abs.ToplevelDirectiveArgument -> Result
transToplevelDirectiveArgument x = case x of
  Language.Ocaml.Abs.ToplevelString string -> failure x
  Language.Ocaml.Abs.ToplevelInt int -> failure x
  Language.Ocaml.Abs.ValueIdent vallongident -> failure x
  Language.Ocaml.Abs.ToplevelModuleIdent modlongident -> failure x
  Language.Ocaml.Abs.ToplevelFalse -> failure x
  Language.Ocaml.Abs.ToplevelTrue -> failure x

transNameTag :: Language.Ocaml.Abs.NameTag -> Result
transNameTag x = case x of
  Language.Ocaml.Abs.NameTag ocamlident -> failure x

transRecFlag :: Language.Ocaml.Abs.RecFlag -> Result
transRecFlag x = case x of
  Language.Ocaml.Abs.Nonrecursive -> failure x
  Language.Ocaml.Abs.Recursive -> failure x

transDirectionFlag :: Language.Ocaml.Abs.DirectionFlag -> Result
transDirectionFlag x = case x of
  Language.Ocaml.Abs.UpTo -> failure x
  Language.Ocaml.Abs.DownTo -> failure x

transPrivateFlag :: Language.Ocaml.Abs.PrivateFlag -> Result
transPrivateFlag x = case x of
  Language.Ocaml.Abs.Public -> failure x
  Language.Ocaml.Abs.Private -> failure x

transMutableFlag :: Language.Ocaml.Abs.MutableFlag -> Result
transMutableFlag x = case x of
  Language.Ocaml.Abs.Immutable -> failure x
  Language.Ocaml.Abs.Mutable -> failure x

transVirtualFlag :: Language.Ocaml.Abs.VirtualFlag -> Result
transVirtualFlag x = case x of
  Language.Ocaml.Abs.Concrete -> failure x
  Language.Ocaml.Abs.Virtual -> failure x

transMutableVirtualFlags :: Language.Ocaml.Abs.MutableVirtualFlags -> Result
transMutableVirtualFlags x = case x of
  Language.Ocaml.Abs.ImmutableContrete -> failure x
  Language.Ocaml.Abs.MutableConcrete -> failure x
  Language.Ocaml.Abs.ImmutableVirtual -> failure x
  Language.Ocaml.Abs.MutableVirtual -> failure x
  Language.Ocaml.Abs.VirtualMutable -> failure x

transPrivateVirtualFlags :: Language.Ocaml.Abs.PrivateVirtualFlags -> Result
transPrivateVirtualFlags x = case x of
  Language.Ocaml.Abs.PublicConcrete -> failure x
  Language.Ocaml.Abs.PrivateConcrete -> failure x
  Language.Ocaml.Abs.PublicVirtual -> failure x
  Language.Ocaml.Abs.PrivateVirtual -> failure x
  Language.Ocaml.Abs.VirtualPrivate -> failure x

transVirtualWithMutableFlag :: Language.Ocaml.Abs.VirtualWithMutableFlag -> Result
transVirtualWithMutableFlag x = case x of
  Language.Ocaml.Abs.VirtualWithImmutable -> failure x
  Language.Ocaml.Abs.MutableWithVirtual -> failure x
  Language.Ocaml.Abs.VirtualWithMutable -> failure x

transVirtualWithPrivateFlag :: Language.Ocaml.Abs.VirtualWithPrivateFlag -> Result
transVirtualWithPrivateFlag x = case x of
  Language.Ocaml.Abs.VirtualWithPublic -> failure x
  Language.Ocaml.Abs.PrivateWithVirtual -> failure x
  Language.Ocaml.Abs.VirtualWithPrivate -> failure x

transNoOverrideFlag :: Language.Ocaml.Abs.NoOverrideFlag -> Result
transNoOverrideFlag x = case x of
  Language.Ocaml.Abs.NoFlag -> failure x

transOverrideFlag :: Language.Ocaml.Abs.OverrideFlag -> Result
transOverrideFlag x = case x of
  Language.Ocaml.Abs.Fresh -> failure x
  Language.Ocaml.Abs.Override -> failure x

transSubtractive :: Language.Ocaml.Abs.Subtractive -> Result
transSubtractive x = case x of
  Language.Ocaml.Abs.Minus -> failure x
  Language.Ocaml.Abs.MinusDot -> failure x

transAdditive :: Language.Ocaml.Abs.Additive -> Result
transAdditive x = case x of
  Language.Ocaml.Abs.Plus -> failure x
  Language.Ocaml.Abs.PlusDot -> failure x

transAttrId :: Language.Ocaml.Abs.AttrId -> Result
transAttrId x = case x of
  Language.Ocaml.Abs.LowercaseAttr lident -> failure x
  Language.Ocaml.Abs.UppercaseAttr uident -> failure x
  Language.Ocaml.Abs.AndAttr -> failure x
  Language.Ocaml.Abs.AsAttr -> failure x
  Language.Ocaml.Abs.AssertAttr -> failure x
  Language.Ocaml.Abs.BeginAttr -> failure x
  Language.Ocaml.Abs.ClassAttr -> failure x
  Language.Ocaml.Abs.ConstraintAttr -> failure x
  Language.Ocaml.Abs.DoAttr -> failure x
  Language.Ocaml.Abs.DoneAttr -> failure x
  Language.Ocaml.Abs.DowntoAttr -> failure x
  Language.Ocaml.Abs.ElseAttr -> failure x
  Language.Ocaml.Abs.EndAttr -> failure x
  Language.Ocaml.Abs.ExceptionAttr -> failure x
  Language.Ocaml.Abs.ExternalAttr -> failure x
  Language.Ocaml.Abs.FalseAttr -> failure x
  Language.Ocaml.Abs.ForAttr -> failure x
  Language.Ocaml.Abs.FunAttr -> failure x
  Language.Ocaml.Abs.FunctionAttr -> failure x
  Language.Ocaml.Abs.FunctorAttr -> failure x
  Language.Ocaml.Abs.IfAttr -> failure x
  Language.Ocaml.Abs.InAttr -> failure x
  Language.Ocaml.Abs.IncludeAttr -> failure x
  Language.Ocaml.Abs.InheritAttr -> failure x
  Language.Ocaml.Abs.InitializerAttr -> failure x
  Language.Ocaml.Abs.LazyAttr -> failure x
  Language.Ocaml.Abs.LetAttr -> failure x
  Language.Ocaml.Abs.MatchAttr -> failure x
  Language.Ocaml.Abs.MethodAttr -> failure x
  Language.Ocaml.Abs.ModuleAttr -> failure x
  Language.Ocaml.Abs.MutableAttr -> failure x
  Language.Ocaml.Abs.NewAttr -> failure x
  Language.Ocaml.Abs.NonrecAttr -> failure x
  Language.Ocaml.Abs.ObjectAttr -> failure x
  Language.Ocaml.Abs.OfAttr -> failure x
  Language.Ocaml.Abs.OpenAttr -> failure x
  Language.Ocaml.Abs.OrAttr -> failure x
  Language.Ocaml.Abs.PrivateAttr -> failure x
  Language.Ocaml.Abs.RecAttr -> failure x
  Language.Ocaml.Abs.SigAttr -> failure x
  Language.Ocaml.Abs.StructAttr -> failure x
  Language.Ocaml.Abs.ThenAttr -> failure x
  Language.Ocaml.Abs.ToAttr -> failure x
  Language.Ocaml.Abs.TrueAttr -> failure x
  Language.Ocaml.Abs.TryAttr -> failure x
  Language.Ocaml.Abs.TypeAttr -> failure x
  Language.Ocaml.Abs.ValAttr -> failure x
  Language.Ocaml.Abs.VirtualAttr -> failure x
  Language.Ocaml.Abs.WhenAttr -> failure x
  Language.Ocaml.Abs.WhileAttr -> failure x
  Language.Ocaml.Abs.WithAttr -> failure x

transAttribute :: Language.Ocaml.Abs.Attribute -> Result
transAttribute x = case x of
  Language.Ocaml.Abs.Attribute attrids attrpayload -> failure x

transPostItemAttribute :: Language.Ocaml.Abs.PostItemAttribute -> Result
transPostItemAttribute x = case x of
  Language.Ocaml.Abs.PostItemAttribute attrids attrpayload -> failure x

transFloatingAttribute :: Language.Ocaml.Abs.FloatingAttribute -> Result
transFloatingAttribute x = case x of
  Language.Ocaml.Abs.FloatingAttribute attrids attrpayload -> failure x

transExt :: Language.Ocaml.Abs.Ext -> Result
transExt x = case x of
  Language.Ocaml.Abs.NoExt -> failure x
  Language.Ocaml.Abs.Ext attrids -> failure x

transExtension :: Language.Ocaml.Abs.Extension -> Result
transExtension x = case x of
  Language.Ocaml.Abs.ExtensionPayload attrids payload -> failure x
  Language.Ocaml.Abs.QuotedStringExpr quotedstringexpr -> failure x

transItemExtension :: Language.Ocaml.Abs.ItemExtension -> Result
transItemExtension x = case x of
  Language.Ocaml.Abs.ItemExtensionPayload attrids payload -> failure x
  Language.Ocaml.Abs.QuotedStringItem quotedstringitem -> failure x

transPayload :: Language.Ocaml.Abs.Payload -> Result
transPayload x = case x of
  Language.Ocaml.Abs.PayloadStructure structure -> failure x
  Language.Ocaml.Abs.PayloadSignature signature -> failure x
  Language.Ocaml.Abs.PayloadCoreType coretype -> failure x
  Language.Ocaml.Abs.PayloadPattern pattern_ -> failure x
  Language.Ocaml.Abs.PayloadGuardedPattern pattern_ seqexpr -> failure x

transAttrPayload :: Language.Ocaml.Abs.AttrPayload -> Result
transAttrPayload x = case x of
  Language.Ocaml.Abs.AttrPayload payload -> failure x
