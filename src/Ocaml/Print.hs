{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Ocaml.
--   Generated by the BNF converter.

module Ocaml.Print where

import qualified Ocaml.Abs
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ocaml.Abs.Ident where
  prt _ (Ocaml.Abs.Ident i) = doc (showString i)

instance Print Ocaml.Abs.CHAR where
  prt _ (Ocaml.Abs.CHAR i) = doc (showString i)

instance Print Ocaml.Abs.FLOAT where
  prt _ (Ocaml.Abs.FLOAT i) = doc (showString i)

instance Print Ocaml.Abs.RELOP where
  prt _ (Ocaml.Abs.RELOP i) = doc (showString i)

instance Print Ocaml.Abs.CONCATOP where
  prt _ (Ocaml.Abs.CONCATOP i) = doc (showString i)

instance Print Ocaml.Abs.PLUSMINUSOP where
  prt _ (Ocaml.Abs.PLUSMINUSOP i) = doc (showString i)

instance Print Ocaml.Abs.MULTDIVOP where
  prt _ (Ocaml.Abs.MULTDIVOP i) = doc (showString i)

instance Print Ocaml.Abs.POWOP where
  prt _ (Ocaml.Abs.POWOP i) = doc (showString i)

instance Print Ocaml.Abs.DOTOP where
  prt _ (Ocaml.Abs.DOTOP i) = doc (showString i)

instance Print Ocaml.Abs.LETOP where
  prt _ (Ocaml.Abs.LETOP i) = doc (showString i)

instance Print Ocaml.Abs.ANDOP where
  prt _ (Ocaml.Abs.ANDOP i) = doc (showString i)

instance Print Ocaml.Abs.DecimalLiteral where
  prt _ (Ocaml.Abs.DecimalLiteral i) = doc (showString i)

instance Print Ocaml.Abs.DecimalLiteralModifier where
  prt _ (Ocaml.Abs.DecimalLiteralModifier i) = doc (showString i)

instance Print Ocaml.Abs.HexLiteral where
  prt _ (Ocaml.Abs.HexLiteral i) = doc (showString i)

instance Print Ocaml.Abs.HexLiteralModifier where
  prt _ (Ocaml.Abs.HexLiteralModifier i) = doc (showString i)

instance Print Ocaml.Abs.OctLiteral where
  prt _ (Ocaml.Abs.OctLiteral i) = doc (showString i)

instance Print Ocaml.Abs.OctLiteralModifier where
  prt _ (Ocaml.Abs.OctLiteralModifier i) = doc (showString i)

instance Print Ocaml.Abs.BinLiteral where
  prt _ (Ocaml.Abs.BinLiteral i) = doc (showString i)

instance Print Ocaml.Abs.BinLiteralModifier where
  prt _ (Ocaml.Abs.BinLiteralModifier i) = doc (showString i)

instance Print Ocaml.Abs.LABEL where
  prt _ (Ocaml.Abs.LABEL i) = doc (showString i)

instance Print Ocaml.Abs.LIDENT where
  prt _ (Ocaml.Abs.LIDENT i) = doc (showString i)
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.OPTLABEL where
  prt _ (Ocaml.Abs.OPTLABEL i) = doc (showString i)

instance Print Ocaml.Abs.PREFIXOP where
  prt _ (Ocaml.Abs.PREFIXOP i) = doc (showString i)

instance Print Ocaml.Abs.HASHOP where
  prt _ (Ocaml.Abs.HASHOP i) = doc (showString i)

instance Print Ocaml.Abs.STRING where
  prt _ (Ocaml.Abs.STRING i) = doc (showString i)

instance Print Ocaml.Abs.ExtAttrIdent where
  prt _ (Ocaml.Abs.ExtAttrIdent i) = doc (showString i)

instance Print Ocaml.Abs.UIDENT where
  prt _ (Ocaml.Abs.UIDENT i) = doc (showString i)

instance Print Ocaml.Abs.INT where
  prt i e = case e of
    Ocaml.Abs.ModifiedDecimal decimalliteralmodifier -> prPrec i 0 (concatD [prt 0 decimalliteralmodifier])
    Ocaml.Abs.Decimal decimalliteral -> prPrec i 0 (concatD [prt 0 decimalliteral])
    Ocaml.Abs.ModifiedHex hexliteralmodifier -> prPrec i 0 (concatD [prt 0 hexliteralmodifier])
    Ocaml.Abs.Hex hexliteral -> prPrec i 0 (concatD [prt 0 hexliteral])
    Ocaml.Abs.ModifiedOct octliteralmodifier -> prPrec i 0 (concatD [prt 0 octliteralmodifier])
    Ocaml.Abs.Oct octliteral -> prPrec i 0 (concatD [prt 0 octliteral])
    Ocaml.Abs.ModifiedBin binliteralmodifier -> prPrec i 0 (concatD [prt 0 binliteralmodifier])
    Ocaml.Abs.Bin binliteral -> prPrec i 0 (concatD [prt 0 binliteral])

instance Print Ocaml.Abs.QUOTED_STRING_EXPR where
  prt i e = case e of
    Ocaml.Abs.Quoted_String_Expr1 extattrident -> prPrec i 0 (concatD [doc (showString "{%"), prt 0 extattrident, doc (showString "|")])

instance Print Ocaml.Abs.QUOTED_STRING_ITEM where
  prt i e = case e of
    Ocaml.Abs.Quoted_String_Item1 extattrident -> prPrec i 0 (concatD [doc (showString "{%%"), prt 0 extattrident, doc (showString "|")])

instance Print Ocaml.Abs.Implementation where
  prt i e = case e of
    Ocaml.Abs.Implementation structure -> prPrec i 0 (concatD [prt 0 structure])

instance Print Ocaml.Abs.Interface where
  prt i e = case e of
    Ocaml.Abs.Interface signature -> prPrec i 0 (concatD [prt 0 signature])

instance Print [Ocaml.Abs.StructureItem] where
  prt = prtList

instance Print Ocaml.Abs.ToplevelPhrase where
  prt i e = case e of
    Ocaml.Abs.StrExpr strexpr -> prPrec i 0 (concatD [prt 0 strexpr, doc (showString ";;")])
    Ocaml.Abs.StructureItems structureitems -> prPrec i 0 (concatD [prt 0 structureitems, doc (showString ";;")])
    Ocaml.Abs.ToplevelDirective topleveldirective -> prPrec i 0 (concatD [prt 0 topleveldirective, doc (showString ";;")])

instance Print [Ocaml.Abs.FunctorArg] where
  prt = prtList

instance Print Ocaml.Abs.FunctorArg where
  prt i e = case e of
    Ocaml.Abs.NoFunctorArg -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])
    Ocaml.Abs.FunctorArg modulename moduletype -> prPrec i 0 (concatD [doc (showString "("), prt 0 modulename, doc (showString ":"), prt 0 moduletype, doc (showString ")")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.ModuleName where
  prt i e = case e of
    Ocaml.Abs.ModuleNameIdent uident -> prPrec i 0 (concatD [prt 0 uident])
    Ocaml.Abs.ModuleNameUnderscore -> prPrec i 0 (concatD [doc (showString "_")])

instance Print Ocaml.Abs.ModuleExpr where
  prt i e = case e of
    Ocaml.Abs.ModuleExprStruct attributes structure -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 attributes, prt 0 structure, doc (showString "end")])
    Ocaml.Abs.ModuleExprFunctor attributes functorargs moduleexpr -> prPrec i 0 (concatD [doc (showString "functor"), prt 0 attributes, prt 0 functorargs, doc (showString "->"), prt 0 moduleexpr])
    Ocaml.Abs.ModuleExprParen parenmoduleexpr -> prPrec i 0 (concatD [prt 0 parenmoduleexpr])
    Ocaml.Abs.ModuleExpr moduleexpr attribute -> prPrec i 0 (concatD [prt 0 moduleexpr, prt 0 attribute])
    Ocaml.Abs.ModuleExprIdent modlongident -> prPrec i 0 (concatD [prt 0 modlongident])
    Ocaml.Abs.ModuleExprFunctorApp moduleexpr parenmoduleexpr -> prPrec i 0 (concatD [prt 0 moduleexpr, prt 0 parenmoduleexpr])
    Ocaml.Abs.FunctorAppUnit moduleexpr -> prPrec i 0 (concatD [prt 0 moduleexpr, doc (showString "("), doc (showString ")")])
    Ocaml.Abs.ModuleExprExtension extension -> prPrec i 0 (concatD [prt 0 extension])

instance Print Ocaml.Abs.ParenModuleExpr where
  prt i e = case e of
    Ocaml.Abs.TypedParenModuleExpr moduleexpr moduletype -> prPrec i 0 (concatD [doc (showString "("), prt 0 moduleexpr, doc (showString ":"), prt 0 moduletype, doc (showString ")")])
    Ocaml.Abs.ParenModuleExpr moduleexpr -> prPrec i 0 (concatD [doc (showString "("), prt 0 moduleexpr, doc (showString ")")])
    Ocaml.Abs.ValParenModuleExpr attributes exprcolonpackagetype -> prPrec i 0 (concatD [doc (showString "("), doc (showString "val"), prt 0 attributes, prt 0 exprcolonpackagetype, doc (showString ")")])

instance Print Ocaml.Abs.ExprColonPackageType where
  prt i e = case e of
    Ocaml.Abs.Expr expr -> prPrec i 0 (concatD [prt 0 expr])
    Ocaml.Abs.TypedExpr expr moduletype -> prPrec i 0 (concatD [prt 0 expr, doc (showString ":"), prt 0 moduletype])
    Ocaml.Abs.TypedCoercionExpr expr moduletype1 moduletype2 -> prPrec i 0 (concatD [prt 0 expr, doc (showString ":"), prt 0 moduletype1, doc (showString ":>"), prt 0 moduletype2])
    Ocaml.Abs.CoercionExpr expr moduletype -> prPrec i 0 (concatD [prt 0 expr, doc (showString ":>"), prt 0 moduletype])

instance Print [Ocaml.Abs.StructureElement] where
  prt = prtList

instance Print Ocaml.Abs.Structure where
  prt i e = case e of
    Ocaml.Abs.Structure optionalstructurestandaloneexpression structureelements -> prPrec i 0 (concatD [prt 0 optionalstructurestandaloneexpression, prt 0 structureelements])

instance Print Ocaml.Abs.OptionalStructureStandaloneExpression where
  prt i e = case e of
    Ocaml.Abs.NoStructureStandaloneExpression -> prPrec i 0 (concatD [])
    Ocaml.Abs.AStructureStandaloneExpression strexpr -> prPrec i 0 (concatD [prt 0 strexpr])

instance Print Ocaml.Abs.StrExpr where
  prt i e = case e of
    Ocaml.Abs.SeqExpr seqexpr -> prPrec i 0 (concatD [prt 0 seqexpr])

instance Print Ocaml.Abs.StructureElement where
  prt i e = case e of
    Ocaml.Abs.StructureElement optionalstructurestandaloneexpression -> prPrec i 0 (concatD [doc (showString ";;"), prt 0 optionalstructurestandaloneexpression])
    Ocaml.Abs.StructureItem structureitem -> prPrec i 0 (concatD [prt 0 structureitem])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.StructureItem where
  prt i e = case e of
    Ocaml.Abs.StructureLetBindings letbindingsext -> prPrec i 0 (concatD [prt 0 letbindingsext])
    Ocaml.Abs.StructureItemExtension itemextension postitemattributes -> prPrec i 0 (concatD [prt 0 itemextension, prt 0 postitemattributes])
    Ocaml.Abs.StructureFloatingAttribute floatingattribute -> prPrec i 0 (concatD [prt 0 floatingattribute])
    Ocaml.Abs.StructurePrimitiveDeclaration primitivedeclaration -> prPrec i 0 (concatD [prt 0 primitivedeclaration])
    Ocaml.Abs.StructureValueDescription valuedescription -> prPrec i 0 (concatD [prt 0 valuedescription])
    Ocaml.Abs.StructureTypeDeclarations typedeclarations -> prPrec i 0 (concatD [prt 0 typedeclarations])
    Ocaml.Abs.StructureStrTypeExtension strtypeextension -> prPrec i 0 (concatD [prt 0 strtypeextension])
    Ocaml.Abs.StrExceptionDeclaration strexceptiondeclaration -> prPrec i 0 (concatD [prt 0 strexceptiondeclaration])
    Ocaml.Abs.StructureModuleBinding ext attributes modulename modulebindingbody postitemattributes -> prPrec i 0 (concatD [doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 modulename, prt 0 modulebindingbody, prt 0 postitemattributes])
    Ocaml.Abs.StructureRecModuleBindings recmodulebinding andmodulebindings -> prPrec i 0 (concatD [prt 0 recmodulebinding, prt 0 andmodulebindings])
    Ocaml.Abs.StructureModuleTypeDeclaration moduletypedeclaration -> prPrec i 0 (concatD [prt 0 moduletypedeclaration])
    Ocaml.Abs.StructureOpenDeclaration opendeclaration -> prPrec i 0 (concatD [prt 0 opendeclaration])
    Ocaml.Abs.StructureClassDeclarations classdeclarations -> prPrec i 0 (concatD [prt 0 classdeclarations])
    Ocaml.Abs.StructureClassTypeDeclarations classtypedeclarations -> prPrec i 0 (concatD [prt 0 classtypedeclarations])
    Ocaml.Abs.StructureIncludeStatement moduleexprincludestatement -> prPrec i 0 (concatD [prt 0 moduleexprincludestatement])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.ModuleExprIncludeStatement where
  prt i e = case e of
    Ocaml.Abs.ModuleExprIncludeStatement ext attributes moduleexpr postitemattributes -> prPrec i 0 (concatD [doc (showString "include"), prt 0 ext, prt 0 attributes, prt 0 moduleexpr, prt 0 postitemattributes])

instance Print Ocaml.Abs.ModuleBindingBody where
  prt i e = case e of
    Ocaml.Abs.ModuleBinding moduleexpr -> prPrec i 0 (concatD [doc (showString "="), prt 0 moduleexpr])
    Ocaml.Abs.TypedModuleBinding moduletype moduleexpr -> prPrec i 0 (concatD [doc (showString ":"), prt 0 moduletype, doc (showString "="), prt 0 moduleexpr])
    Ocaml.Abs.FunctorBinding functorarg modulebindingbody -> prPrec i 0 (concatD [prt 0 functorarg, prt 0 modulebindingbody])

instance Print [Ocaml.Abs.AndModuleBinding] where
  prt = prtList

instance Print Ocaml.Abs.RecModuleBinding where
  prt i e = case e of
    Ocaml.Abs.RecModuleBinding ext attributes modulename modulebindingbody postitemattributes -> prPrec i 0 (concatD [doc (showString "module"), prt 0 ext, prt 0 attributes, doc (showString "rec"), prt 0 modulename, prt 0 modulebindingbody, prt 0 postitemattributes])

instance Print Ocaml.Abs.AndModuleBinding where
  prt i e = case e of
    Ocaml.Abs.AndModuleBinding attributes modulename modulebindingbody postitemattributes -> prPrec i 0 (concatD [prt 0 attributes, prt 0 modulename, prt 0 modulebindingbody, prt 0 postitemattributes])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [doc (showString "and"), prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.OptionalModuleType where
  prt i e = case e of
    Ocaml.Abs.NoModuleType -> prPrec i 0 (concatD [])
    Ocaml.Abs.AModuleType moduletype -> prPrec i 0 (concatD [doc (showString "="), prt 0 moduletype])

instance Print Ocaml.Abs.ModuleTypeDeclaration where
  prt i e = case e of
    Ocaml.Abs.ModuleTypeDeclaration attributes ocamlident optionalmoduletype postitemattributes -> prPrec i 0 (concatD [doc (showString "module"), doc (showString "type"), prt 0 attributes, prt 0 ocamlident, prt 0 optionalmoduletype, prt 0 postitemattributes])

instance Print Ocaml.Abs.OpenDeclaration where
  prt i e = case e of
    Ocaml.Abs.OpenDeclaration overrideflag ext attributes moduleexpr postitemattributes -> prPrec i 0 (concatD [doc (showString "open"), prt 0 overrideflag, prt 0 ext, prt 0 attributes, prt 0 moduleexpr, prt 0 postitemattributes])

instance Print Ocaml.Abs.OpenDescription where
  prt i e = case e of
    Ocaml.Abs.OpenDescription overrideflag ext attributes modextlongident postitemattributes -> prPrec i 0 (concatD [doc (showString "open"), prt 0 overrideflag, prt 0 ext, prt 0 attributes, prt 0 modextlongident, prt 0 postitemattributes])

instance Print Ocaml.Abs.OpenDotDeclaration where
  prt i e = case e of
    Ocaml.Abs.OpenDotDeclaration modlongident -> prPrec i 0 (concatD [prt 0 modlongident])

instance Print [Ocaml.Abs.WithConstraint] where
  prt = prtList

instance Print Ocaml.Abs.ModuleType where
  prt i e = case e of
    Ocaml.Abs.ModuleTypeSignature attributes signature -> prPrec i 0 (concatD [doc (showString "sig"), prt 0 attributes, prt 0 signature, doc (showString "end")])
    Ocaml.Abs.ModuleTypeFunctor attributes functorargs moduletype -> prPrec i 0 (concatD [doc (showString "functor"), prt 0 attributes, prt 0 functorargs, doc (showString "->"), prt 0 moduletype])
    Ocaml.Abs.ModuleTypeOf attributes moduleexpr -> prPrec i 0 (concatD [doc (showString "module"), doc (showString "type"), doc (showString "of"), prt 0 attributes, prt 0 moduleexpr])
    Ocaml.Abs.ParenModuleType moduletype -> prPrec i 0 (concatD [doc (showString "("), prt 0 moduletype, doc (showString ")")])
    Ocaml.Abs.ModuleTypeWithAttribute moduletype attribute -> prPrec i 0 (concatD [prt 0 moduletype, prt 0 attribute])
    Ocaml.Abs.ModuleTypeModuleIdent modlongident -> prPrec i 0 (concatD [prt 0 modlongident])
    Ocaml.Abs.ModuleTypeNoArgFunctorApp moduletype -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")"), doc (showString "->"), prt 0 moduletype])
    Ocaml.Abs.ModuleTypeFunctorApp moduletype1 moduletype2 -> prPrec i 0 (concatD [prt 0 moduletype1, doc (showString "->"), prt 0 moduletype2])
    Ocaml.Abs.ModuleTypeWith moduletype withconstraints -> prPrec i 0 (concatD [prt 0 moduletype, doc (showString "with"), prt 0 withconstraints])
    Ocaml.Abs.ModuleTypeExtension extension -> prPrec i 0 (concatD [prt 0 extension])

instance Print Ocaml.Abs.Signature where
  prt i e = case e of
    Ocaml.Abs.Signature signatureelements -> prPrec i 0 (concatD [prt 0 signatureelements])

instance Print [Ocaml.Abs.SignatureElement] where
  prt = prtList

instance Print Ocaml.Abs.SignatureElement where
  prt i e = case e of
    Ocaml.Abs.SemiSemi -> prPrec i 0 (concatD [doc (showString ";;")])
    Ocaml.Abs.SignatureItem signatureitem -> prPrec i 0 (concatD [prt 0 signatureitem])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.SignatureItem where
  prt i e = case e of
    Ocaml.Abs.SigItemExtension itemextension postitemattributes -> prPrec i 0 (concatD [prt 0 itemextension, prt 0 postitemattributes])
    Ocaml.Abs.SigFloatingAttribute floatingattribute -> prPrec i 0 (concatD [prt 0 floatingattribute])
    Ocaml.Abs.SigValueDescription valuedescription -> prPrec i 0 (concatD [prt 0 valuedescription])
    Ocaml.Abs.SigPrimitiveDeclaration primitivedeclaration -> prPrec i 0 (concatD [prt 0 primitivedeclaration])
    Ocaml.Abs.SigTypeDeclarations typedeclarations -> prPrec i 0 (concatD [prt 0 typedeclarations])
    Ocaml.Abs.SigTypeSubstDeclarations typesubstdeclarations -> prPrec i 0 (concatD [prt 0 typesubstdeclarations])
    Ocaml.Abs.SigSigTypeExtension sigtypeextension -> prPrec i 0 (concatD [prt 0 sigtypeextension])
    Ocaml.Abs.SigSigExceptionDeclaration sigexceptiondeclaration -> prPrec i 0 (concatD [prt 0 sigexceptiondeclaration])
    Ocaml.Abs.SigModuleDeclaration moduledeclaration -> prPrec i 0 (concatD [prt 0 moduledeclaration])
    Ocaml.Abs.SigModuleAlias modulealias -> prPrec i 0 (concatD [prt 0 modulealias])
    Ocaml.Abs.SigModuleSubst modulesubst -> prPrec i 0 (concatD [prt 0 modulesubst])
    Ocaml.Abs.SigRecModuleDeclarations recmoduledeclaration andmoduledeclarations -> prPrec i 0 (concatD [prt 0 recmoduledeclaration, prt 0 andmoduledeclarations])
    Ocaml.Abs.SigModuleTypeDeclaration moduletypedeclaration -> prPrec i 0 (concatD [prt 0 moduletypedeclaration])
    Ocaml.Abs.SigModuleTypeSubst moduletypesubst -> prPrec i 0 (concatD [prt 0 moduletypesubst])
    Ocaml.Abs.SigOpenDescription opendescription -> prPrec i 0 (concatD [prt 0 opendescription])
    Ocaml.Abs.SigIncludeStatement moduletypeincludestatement -> prPrec i 0 (concatD [prt 0 moduletypeincludestatement])
    Ocaml.Abs.SigClassDeclarations classdeclarations -> prPrec i 0 (concatD [prt 0 classdeclarations])
    Ocaml.Abs.SigClassTypeDeclarations classtypedeclarations -> prPrec i 0 (concatD [prt 0 classtypedeclarations])

instance Print Ocaml.Abs.ModuleTypeIncludeStatement where
  prt i e = case e of
    Ocaml.Abs.ModuleTypeIncludeStatement ext attributes moduletype postitemattributes -> prPrec i 0 (concatD [doc (showString "include"), prt 0 ext, prt 0 attributes, prt 0 moduletype, prt 0 postitemattributes])

instance Print Ocaml.Abs.ModuleDeclaration where
  prt i e = case e of
    Ocaml.Abs.ModuleDeclaration ext attributes modulename moduledeclarationbody postitemattributes -> prPrec i 0 (concatD [doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 modulename, prt 0 moduledeclarationbody, prt 0 postitemattributes])

instance Print Ocaml.Abs.ModuleDeclarationBody where
  prt i e = case e of
    Ocaml.Abs.ModuleBody moduletype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 moduletype])
    Ocaml.Abs.FunctorBody functorarg moduledeclarationbody -> prPrec i 0 (concatD [prt 0 functorarg, prt 0 moduledeclarationbody])

instance Print Ocaml.Abs.ModuleAlias where
  prt i e = case e of
    Ocaml.Abs.ModuleAlias ext attributes modulename moduleexpralias postitemattributes -> prPrec i 0 (concatD [doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 modulename, doc (showString "="), prt 0 moduleexpralias, prt 0 postitemattributes])

instance Print Ocaml.Abs.ModuleExprAlias where
  prt i e = case e of
    Ocaml.Abs.ModuleExprAlias modlongident -> prPrec i 0 (concatD [prt 0 modlongident])

instance Print Ocaml.Abs.ModuleSubst where
  prt i e = case e of
    Ocaml.Abs.ModuleSubst ext attributes uident modextlongident postitemattributes -> prPrec i 0 (concatD [doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 uident, doc (showString ":="), prt 0 modextlongident, prt 0 postitemattributes])

instance Print Ocaml.Abs.RecModuleDeclaration where
  prt i e = case e of
    Ocaml.Abs.RecModuleDeclaration ext attributes modulename moduletype postitemattributes -> prPrec i 0 (concatD [doc (showString "module"), prt 0 ext, prt 0 attributes, doc (showString "rec"), prt 0 modulename, doc (showString ":"), prt 0 moduletype, prt 0 postitemattributes])

instance Print Ocaml.Abs.AndModuleDeclaration where
  prt i e = case e of
    Ocaml.Abs.AndModuleDeclaration attributes modulename moduletype postitemattributes -> prPrec i 0 (concatD [prt 0 attributes, prt 0 modulename, doc (showString ":"), prt 0 moduletype, prt 0 postitemattributes])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print [Ocaml.Abs.AndModuleDeclaration] where
  prt = prtList

instance Print Ocaml.Abs.ModuleTypeSubst where
  prt i e = case e of
    Ocaml.Abs.ModuleTypeSubst ext attributes ocamlident moduletype postitemattributes -> prPrec i 0 (concatD [doc (showString "module"), doc (showString "type"), prt 0 ext, prt 0 attributes, prt 0 ocamlident, doc (showString ":="), prt 0 moduletype, prt 0 postitemattributes])

instance Print Ocaml.Abs.ClassDeclarations where
  prt i e = case e of
    Ocaml.Abs.ClassDeclarations ext classdeclarations -> prPrec i 0 (concatD [doc (showString "class"), prt 0 ext, prt 0 classdeclarations])

instance Print [Ocaml.Abs.ClassDeclaration] where
  prt = prtList

instance Print Ocaml.Abs.ClassDeclaration where
  prt i e = case e of
    Ocaml.Abs.ClassDeclaration attributes virtualflag formalclassparameters lident classfunbinding postitemattributes -> prPrec i 0 (concatD [prt 0 attributes, prt 0 virtualflag, prt 0 formalclassparameters, prt 0 lident, prt 0 classfunbinding, prt 0 postitemattributes])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print Ocaml.Abs.ClassFunBinding where
  prt i e = case e of
    Ocaml.Abs.ClassFunBinding classexpr -> prPrec i 0 (concatD [doc (showString "="), prt 0 classexpr])
    Ocaml.Abs.TypedClassFunBinding classtype classexpr -> prPrec i 0 (concatD [doc (showString ":"), prt 0 classtype, doc (showString "="), prt 0 classexpr])
    Ocaml.Abs.LabeledClassFunBinding labeledsimplepattern classfunbinding -> prPrec i 0 (concatD [prt 0 labeledsimplepattern, prt 0 classfunbinding])

instance Print Ocaml.Abs.FormalClassParameters where
  prt i e = case e of
    Ocaml.Abs.NoFormalClassParamters -> prPrec i 0 (concatD [])
    Ocaml.Abs.FormalClassParameters typeparameters -> prPrec i 0 (concatD [doc (showString "["), prt 0 typeparameters, doc (showString "]")])

instance Print Ocaml.Abs.ClassExpr where
  prt i e = case e of
    Ocaml.Abs.ClassSimpleExpr classsimpleexpr -> prPrec i 0 (concatD [prt 0 classsimpleexpr])
    Ocaml.Abs.ClassExprFunctor attributes classfundef -> prPrec i 0 (concatD [doc (showString "fun"), prt 0 attributes, prt 0 classfundef])
    Ocaml.Abs.ClassExprLetBindings letbindingsnoext classexpr -> prPrec i 0 (concatD [prt 0 letbindingsnoext, doc (showString "in"), prt 0 classexpr])
    Ocaml.Abs.ClassExprLetOpen overrideflag attributes modlongident classexpr -> prPrec i 0 (concatD [doc (showString "let"), doc (showString "open"), prt 0 overrideflag, prt 0 attributes, prt 0 modlongident, doc (showString "in"), prt 0 classexpr])
    Ocaml.Abs.ClassExpr classexpr attribute -> prPrec i 0 (concatD [prt 0 classexpr, prt 0 attribute])
    Ocaml.Abs.LabeledClassSimpleExpr classsimpleexpr labeledsimpleexprs -> prPrec i 0 (concatD [prt 0 classsimpleexpr, prt 0 labeledsimpleexprs])
    Ocaml.Abs.ClassExprExtension extension -> prPrec i 0 (concatD [prt 0 extension])

instance Print Ocaml.Abs.ClassSimpleExpr where
  prt i e = case e of
    Ocaml.Abs.ParenClassExpr classexpr -> prPrec i 0 (concatD [doc (showString "("), prt 0 classexpr, doc (showString ")")])
    Ocaml.Abs.ClassName actualclassparameters classlongident -> prPrec i 0 (concatD [prt 0 actualclassparameters, prt 0 classlongident])
    Ocaml.Abs.TypedClassExpr classexpr classtype -> prPrec i 0 (concatD [doc (showString "("), prt 0 classexpr, doc (showString ":"), prt 0 classtype, doc (showString ")")])
    Ocaml.Abs.ClassSimplExprObject attributes classstructure -> prPrec i 0 (concatD [doc (showString "object"), prt 0 attributes, prt 0 classstructure, doc (showString "end")])

instance Print Ocaml.Abs.ClassFunDef where
  prt i e = case e of
    Ocaml.Abs.ClassFun labeledsimplepattern classexpr -> prPrec i 0 (concatD [prt 0 labeledsimplepattern, doc (showString "->"), prt 0 classexpr])
    Ocaml.Abs.LabeledClassFunDef labeledsimplepattern classfundef -> prPrec i 0 (concatD [prt 0 labeledsimplepattern, prt 0 classfundef])

instance Print Ocaml.Abs.ClassStructure where
  prt i e = case e of
    Ocaml.Abs.ClassSelfPattern classselfpattern classfields -> prPrec i 0 (concatD [prt 0 classselfpattern, prt 0 classfields])

instance Print Ocaml.Abs.ClassSelfPattern where
  prt i e = case e of
    Ocaml.Abs.ParenClassPattern pattern -> prPrec i 0 (concatD [doc (showString "("), prt 0 pattern, doc (showString ")")])
    Ocaml.Abs.TypedClassPattern pattern coretype -> prPrec i 0 (concatD [doc (showString "("), prt 0 pattern, doc (showString ":"), prt 0 coretype, doc (showString ")")])
    Ocaml.Abs.NoClassSelfPattern -> prPrec i 0 (concatD [])

instance Print [Ocaml.Abs.ClassField] where
  prt = prtList

instance Print Ocaml.Abs.OptionalAs where
  prt i e = case e of
    Ocaml.Abs.NoAs -> prPrec i 0 (concatD [])
    Ocaml.Abs.AAs lident -> prPrec i 0 (concatD [doc (showString "as"), prt 0 lident])

instance Print Ocaml.Abs.ClassField where
  prt i e = case e of
    Ocaml.Abs.ClassFieldInherit overrideflag attributes classexpr optionalas postitemattributes -> prPrec i 0 (concatD [doc (showString "inherit"), prt 0 overrideflag, prt 0 attributes, prt 0 classexpr, prt 0 optionalas, prt 0 postitemattributes])
    Ocaml.Abs.ClassFieldVal value postitemattributes -> prPrec i 0 (concatD [doc (showString "val"), prt 0 value, prt 0 postitemattributes])
    Ocaml.Abs.ClassFieldMethod method postitemattributes -> prPrec i 0 (concatD [doc (showString "method"), prt 0 method, prt 0 postitemattributes])
    Ocaml.Abs.ClassFieldConstraint attributes coretype1 coretype2 postitemattributes -> prPrec i 0 (concatD [doc (showString "constraint"), prt 0 attributes, prt 0 coretype1, doc (showString "="), prt 0 coretype2, prt 0 postitemattributes])
    Ocaml.Abs.ClassFieldInitializer attributes seqexpr postitemattributes -> prPrec i 0 (concatD [doc (showString "initializer"), prt 0 attributes, prt 0 seqexpr, prt 0 postitemattributes])
    Ocaml.Abs.ClassFieldItemExtension itemextension postitemattributes -> prPrec i 0 (concatD [prt 0 itemextension, prt 0 postitemattributes])
    Ocaml.Abs.ClassFieldFloatingAttribute floatingattribute -> prPrec i 0 (concatD [prt 0 floatingattribute])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.Value where
  prt i e = case e of
    Ocaml.Abs.Value1 nooverrideflag attributes virtualwithmutableflag label coretype -> prPrec i 0 (concatD [prt 0 nooverrideflag, prt 0 attributes, prt 0 virtualwithmutableflag, prt 0 label, doc (showString ":"), prt 0 coretype])
    Ocaml.Abs.Value2 overrideflag attributes mutableflag label seqexpr -> prPrec i 0 (concatD [prt 0 overrideflag, prt 0 attributes, prt 0 mutableflag, prt 0 label, doc (showString "="), prt 0 seqexpr])
    Ocaml.Abs.Value3 overrideflag attributes mutableflag label typeconstraint seqexpr -> prPrec i 0 (concatD [prt 0 overrideflag, prt 0 attributes, prt 0 mutableflag, prt 0 label, prt 0 typeconstraint, doc (showString "="), prt 0 seqexpr])

instance Print Ocaml.Abs.Method_ where
  prt i e = case e of
    Ocaml.Abs.Method1 nooverrideflag attributes virtualwithprivateflag label polytype -> prPrec i 0 (concatD [prt 0 nooverrideflag, prt 0 attributes, prt 0 virtualwithprivateflag, prt 0 label, doc (showString ":"), prt 0 polytype])
    Ocaml.Abs.Method2 overrideflag attributes privateflag label strictbinding -> prPrec i 0 (concatD [prt 0 overrideflag, prt 0 attributes, prt 0 privateflag, prt 0 label, prt 0 strictbinding])
    Ocaml.Abs.Method3 overrideflag attributes privateflag label polytype seqexpr -> prPrec i 0 (concatD [prt 0 overrideflag, prt 0 attributes, prt 0 privateflag, prt 0 label, doc (showString ":"), prt 0 polytype, doc (showString "="), prt 0 seqexpr])
    Ocaml.Abs.Method4 overrideflag attributes privateflag label lidents coretype seqexpr -> prPrec i 0 (concatD [prt 0 overrideflag, prt 0 attributes, prt 0 privateflag, prt 0 label, doc (showString ":"), doc (showString "type"), prt 0 lidents, doc (showString "."), prt 0 coretype, doc (showString "="), prt 0 seqexpr])

instance Print Ocaml.Abs.ClassType where
  prt i e = case e of
    Ocaml.Abs.ClassSignature classsignature -> prPrec i 0 (concatD [prt 0 classsignature])
    Ocaml.Abs.ClassType arglabel tupletype classtype -> prPrec i 0 (concatD [prt 0 arglabel, prt 0 tupletype, doc (showString "->"), prt 0 classtype])

instance Print Ocaml.Abs.ClassSignature where
  prt i e = case e of
    Ocaml.Abs.ClassSignatureName actualclassparameters cltylongident -> prPrec i 0 (concatD [prt 0 actualclassparameters, prt 0 cltylongident])
    Ocaml.Abs.ClassSignatureExtension extension -> prPrec i 0 (concatD [prt 0 extension])
    Ocaml.Abs.ClassSignatureObject attributes classselftype classsigfields -> prPrec i 0 (concatD [doc (showString "object"), prt 0 attributes, prt 0 classselftype, prt 0 classsigfields, doc (showString "end")])
    Ocaml.Abs.WithAttribute classsignature attribute -> prPrec i 0 (concatD [prt 0 classsignature, prt 0 attribute])
    Ocaml.Abs.ClassSignatureLetOpen overrideflag attributes modlongident classsignature -> prPrec i 0 (concatD [doc (showString "let"), doc (showString "open"), prt 0 overrideflag, prt 0 attributes, prt 0 modlongident, doc (showString "in"), prt 0 classsignature])

instance Print Ocaml.Abs.ClassSelfType where
  prt i e = case e of
    Ocaml.Abs.ClassSelfType coretype -> prPrec i 0 (concatD [doc (showString "("), prt 0 coretype, doc (showString ")")])
    Ocaml.Abs.NoClassSelfType -> prPrec i 0 (concatD [])

instance Print Ocaml.Abs.ActualClassParameters where
  prt i e = case e of
    Ocaml.Abs.NoActualClassParameters -> prPrec i 0 (concatD [])
    Ocaml.Abs.ActualClassParameters coretypes -> prPrec i 0 (concatD [doc (showString "["), prt 0 coretypes, doc (showString "]")])

instance Print [Ocaml.Abs.CoreType] where
  prt = prtList

instance Print Ocaml.Abs.ClassSigField where
  prt i e = case e of
    Ocaml.Abs.ClassSigFieldInherit attributes classsignature postitemattributes -> prPrec i 0 (concatD [doc (showString "inherit"), prt 0 attributes, prt 0 classsignature, prt 0 postitemattributes])
    Ocaml.Abs.ClassSigFieldVal attributes mutablevirtualflags label coretype postitemattributes -> prPrec i 0 (concatD [doc (showString "val"), prt 0 attributes, prt 0 mutablevirtualflags, prt 0 label, doc (showString ":"), prt 0 coretype, prt 0 postitemattributes])
    Ocaml.Abs.ClassSigFieldMethod attributes privatevirtualflags label polytype postitemattributes -> prPrec i 0 (concatD [doc (showString "method"), prt 0 attributes, prt 0 privatevirtualflags, prt 0 label, doc (showString ":"), prt 0 polytype, prt 0 postitemattributes])
    Ocaml.Abs.ClassSigFieldConstraint attributes coretype1 coretype2 postitemattributes -> prPrec i 0 (concatD [doc (showString "constraint"), prt 0 attributes, prt 0 coretype1, doc (showString "="), prt 0 coretype2, prt 0 postitemattributes])
    Ocaml.Abs.ClassSigFieldItemExtension itemextension postitemattributes -> prPrec i 0 (concatD [prt 0 itemextension, prt 0 postitemattributes])
    Ocaml.Abs.ClassSigFieldFloatingAttribute floatingattribute -> prPrec i 0 (concatD [prt 0 floatingattribute])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Ocaml.Abs.ClassSigField] where
  prt = prtList

instance Print Ocaml.Abs.Constrain where
  prt i e = case e of
    Ocaml.Abs.Constrain coretype1 coretype2 -> prPrec i 0 (concatD [prt 0 coretype1, doc (showString "="), prt 0 coretype2])

instance Print Ocaml.Abs.ClassTypeDeclarations where
  prt i e = case e of
    Ocaml.Abs.ClassTypeDeclarations classtypedeclaration andclasstypedeclarations -> prPrec i 0 (concatD [prt 0 classtypedeclaration, prt 0 andclasstypedeclarations])

instance Print Ocaml.Abs.ClassTypeDeclaration where
  prt i e = case e of
    Ocaml.Abs.ClassTypeDeclaration ext attributes virtualflag formalclassparameters lident classsignature postitemattributes -> prPrec i 0 (concatD [doc (showString "class"), doc (showString "type"), prt 0 ext, prt 0 attributes, prt 0 virtualflag, prt 0 formalclassparameters, prt 0 lident, doc (showString "="), prt 0 classsignature, prt 0 postitemattributes])

instance Print Ocaml.Abs.AndClassTypeDeclaration where
  prt i e = case e of
    Ocaml.Abs.AndClassTypeDeclaration attributes virtualflag formalclassparameters lident classsignature postitemattributes -> prPrec i 0 (concatD [prt 0 attributes, prt 0 virtualflag, prt 0 formalclassparameters, prt 0 lident, doc (showString "="), prt 0 classsignature, prt 0 postitemattributes])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print [Ocaml.Abs.AndClassTypeDeclaration] where
  prt = prtList

instance Print Ocaml.Abs.FunSeqExpr where
  prt i e = case e of
    Ocaml.Abs.FunExpr1 funexpr -> prPrec i 0 (concatD [prt 0 funexpr])
    Ocaml.Abs.FunExpr2 funexpr -> prPrec i 0 (concatD [prt 0 funexpr, doc (showString ";")])
    Ocaml.Abs.FunExpr3 funexpr seqexpr -> prPrec i 0 (concatD [prt 0 funexpr, doc (showString ";"), prt 0 seqexpr])
    Ocaml.Abs.FunExpr4 funexpr attrids seqexpr -> prPrec i 0 (concatD [prt 0 funexpr, doc (showString ";"), doc (showString "%"), prt 0 attrids, prt 0 seqexpr])

instance Print Ocaml.Abs.SeqExpr where
  prt i e = case e of
    Ocaml.Abs.SeqExprFunSeqExpr funseqexpr -> prPrec i 0 (concatD [prt 0 funseqexpr])
    Ocaml.Abs.SeqExprFunction ext attributes matchcases -> prPrec i 0 (concatD [doc (showString "function"), prt 0 ext, prt 0 attributes, prt 0 matchcases])

instance Print Ocaml.Abs.LabeledSimplePattern where
  prt i e = case e of
    Ocaml.Abs.OptPattern labelletpattern optdefault -> prPrec i 0 (concatD [doc (showString "?"), doc (showString "("), prt 0 labelletpattern, prt 0 optdefault, doc (showString ")")])
    Ocaml.Abs.OptLabelVar labelvar -> prPrec i 0 (concatD [doc (showString "?"), prt 0 labelvar])
    Ocaml.Abs.OptLabeledPattern optlabel letpattern optdefault -> prPrec i 0 (concatD [prt 0 optlabel, doc (showString "("), prt 0 letpattern, prt 0 optdefault, doc (showString ")")])
    Ocaml.Abs.OptLabeledVar optlabel patternvar -> prPrec i 0 (concatD [prt 0 optlabel, prt 0 patternvar])
    Ocaml.Abs.LabeledPattern labelletpattern -> prPrec i 0 (concatD [doc (showString "~"), doc (showString "("), prt 0 labelletpattern, doc (showString ")")])
    Ocaml.Abs.LabeledVar labelvar -> prPrec i 0 (concatD [doc (showString "~"), prt 0 labelvar])
    Ocaml.Abs.LabeledSimplePattern label simplepattern -> prPrec i 0 (concatD [prt 0 label, prt 0 simplepattern])
    Ocaml.Abs.SimplePattern simplepattern -> prPrec i 0 (concatD [prt 0 simplepattern])

instance Print Ocaml.Abs.PatternVar where
  prt i e = case e of
    Ocaml.Abs.PatternVar lident -> prPrec i 0 (concatD [prt 0 lident])
    Ocaml.Abs.UnderscorePatternVar -> prPrec i 0 (concatD [doc (showString "_")])

instance Print Ocaml.Abs.OptDefault where
  prt i e = case e of
    Ocaml.Abs.NoDefault -> prPrec i 0 (concatD [])
    Ocaml.Abs.Default seqexpr -> prPrec i 0 (concatD [doc (showString "="), prt 0 seqexpr])

instance Print Ocaml.Abs.LabelLetPattern where
  prt i e = case e of
    Ocaml.Abs.LabelLetPattern labelvar -> prPrec i 0 (concatD [prt 0 labelvar])
    Ocaml.Abs.TypedLabelLetPattern labelvar coretype -> prPrec i 0 (concatD [prt 0 labelvar, doc (showString ":"), prt 0 coretype])

instance Print Ocaml.Abs.LabelVar where
  prt i e = case e of
    Ocaml.Abs.LabelVar lident -> prPrec i 0 (concatD [prt 0 lident])

instance Print Ocaml.Abs.LetPattern where
  prt i e = case e of
    Ocaml.Abs.LetPattern pattern -> prPrec i 0 (concatD [prt 0 pattern])
    Ocaml.Abs.TypedLetPattern pattern coretype -> prPrec i 0 (concatD [prt 0 pattern, doc (showString ":"), prt 0 coretype])

instance Print Ocaml.Abs.QualifiedDotop where
  prt i e = case e of
    Ocaml.Abs.Unqualified dotop -> prPrec i 0 (concatD [prt 0 dotop])
    Ocaml.Abs.Qualified modlongident dotop -> prPrec i 0 (concatD [doc (showString "."), prt 0 modlongident, prt 0 dotop])

instance Print Ocaml.Abs.FunExpr where
  prt i e = case e of
    Ocaml.Abs.SimpleExpr simpleexpr -> prPrec i 0 (concatD [prt 0 simpleexpr])
    Ocaml.Abs.FunExprAttrs funexprattrs -> prPrec i 0 (concatD [prt 0 funexprattrs])
    Ocaml.Abs.Expr_ expr -> prPrec i 0 (concatD [prt 0 expr])
    Ocaml.Abs.Let letbindingsext -> prPrec i 0 (concatD [prt 0 letbindingsext])
    Ocaml.Abs.LetOpBinding letop letopbindings seqexpr -> prPrec i 0 (concatD [prt 0 letop, prt 0 letopbindings, doc (showString "in"), prt 0 seqexpr])
    Ocaml.Abs.Cons funexpr expr -> prPrec i 0 (concatD [prt 0 funexpr, doc (showString "::"), prt 0 expr])
    Ocaml.Abs.UpdateExpr label expr -> prPrec i 0 (concatD [prt 0 label, doc (showString "<-"), prt 0 expr])
    Ocaml.Abs.QualifiedDot simpleexpr labellongident expr -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "."), prt 0 labellongident, doc (showString "<-"), prt 0 expr])
    Ocaml.Abs.ArrayUpdateExpr simpleexpr seqexpr expr -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "."), doc (showString "("), prt 0 seqexpr, doc (showString ")"), doc (showString "<-"), prt 0 expr])
    Ocaml.Abs.RecordUpdateExpr simpleexpr seqexpr expr -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "."), doc (showString "{"), prt 0 seqexpr, doc (showString "}"), doc (showString "<-"), prt 0 expr])
    Ocaml.Abs.StringUpdateExpr simpleexpr seqexpr expr -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "."), doc (showString "["), prt 0 seqexpr, doc (showString "]"), doc (showString "<-"), prt 0 expr])
    Ocaml.Abs.ArrayUpdateDotopExpr simpleexpr qualifieddotop exprs expr -> prPrec i 0 (concatD [prt 0 simpleexpr, prt 0 qualifieddotop, doc (showString "("), prt 0 exprs, doc (showString ")"), doc (showString "<-"), prt 0 expr])
    Ocaml.Abs.RecordUpdateDotopExpr simpleexpr qualifieddotop exprs expr -> prPrec i 0 (concatD [prt 0 simpleexpr, prt 0 qualifieddotop, doc (showString "{"), prt 0 exprs, doc (showString "}"), doc (showString "<-"), prt 0 expr])
    Ocaml.Abs.StringUpdateDotopExpr simpleexpr qualifieddotop exprs expr -> prPrec i 0 (concatD [prt 0 simpleexpr, prt 0 qualifieddotop, doc (showString "["), prt 0 exprs, doc (showString "]"), doc (showString "<-"), prt 0 expr])
    Ocaml.Abs.FunExprWithAttribute funexpr attribute -> prPrec i 0 (concatD [prt 0 funexpr, prt 0 attribute])

instance Print Ocaml.Abs.Expr where
  prt i e = case e of
    Ocaml.Abs.FunExpr funexpr -> prPrec i 0 (concatD [prt 0 funexpr])
    Ocaml.Abs.Function ext attributes matchcases -> prPrec i 0 (concatD [doc (showString "function"), prt 0 ext, prt 0 attributes, prt 0 matchcases])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Ocaml.Abs.OptionalAtomicTypeAnnotation where
  prt i e = case e of
    Ocaml.Abs.NoAtomicTypeAnnotation -> prPrec i 0 (concatD [])
    Ocaml.Abs.AnAtomicTypeAnnotation atomictype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 atomictype])

instance Print Ocaml.Abs.FunExprAttrs where
  prt i e = case e of
    Ocaml.Abs.LetModule ext attributes modulename modulebindingbody seqexpr -> prPrec i 0 (concatD [doc (showString "let"), doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 modulename, prt 0 modulebindingbody, doc (showString "in"), prt 0 seqexpr])
    Ocaml.Abs.LetException ext attributes letexceptiondeclaration seqexpr -> prPrec i 0 (concatD [doc (showString "let"), doc (showString "exception"), prt 0 ext, prt 0 attributes, prt 0 letexceptiondeclaration, doc (showString "in"), prt 0 seqexpr])
    Ocaml.Abs.LetOpen overrideflag ext attributes moduleexpr seqexpr -> prPrec i 0 (concatD [doc (showString "let"), doc (showString "open"), prt 0 overrideflag, prt 0 ext, prt 0 attributes, prt 0 moduleexpr, doc (showString "in"), prt 0 seqexpr])
    Ocaml.Abs.Fun ext attributes funparamaslists optionalatomictypeannotation funbody -> prPrec i 0 (concatD [doc (showString "fun"), prt 0 ext, prt 0 attributes, prt 0 funparamaslists, prt 0 optionalatomictypeannotation, doc (showString "->"), prt 0 funbody])
    Ocaml.Abs.Match ext attributes seqexpr matchcases -> prPrec i 0 (concatD [doc (showString "match"), prt 0 ext, prt 0 attributes, prt 0 seqexpr, doc (showString "with"), prt 0 matchcases])
    Ocaml.Abs.Try ext attributes seqexpr matchcases -> prPrec i 0 (concatD [doc (showString "try"), prt 0 ext, prt 0 attributes, prt 0 seqexpr, doc (showString "with"), prt 0 matchcases])
    Ocaml.Abs.IfElse ext attributes seqexpr expr1 expr2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 ext, prt 0 attributes, prt 0 seqexpr, doc (showString "then"), prt 0 expr1, doc (showString "else"), prt 0 expr2])
    Ocaml.Abs.If ext attributes seqexpr expr -> prPrec i 0 (concatD [doc (showString "if"), prt 0 ext, prt 0 attributes, prt 0 seqexpr, doc (showString "then"), prt 0 expr])
    Ocaml.Abs.While ext attributes seqexpr dodoneexpr -> prPrec i 0 (concatD [doc (showString "while"), prt 0 ext, prt 0 attributes, prt 0 seqexpr, prt 0 dodoneexpr])
    Ocaml.Abs.For ext attributes pattern seqexpr1 directionflag seqexpr2 dodoneexpr -> prPrec i 0 (concatD [doc (showString "for"), prt 0 ext, prt 0 attributes, prt 0 pattern, doc (showString "="), prt 0 seqexpr1, prt 0 directionflag, prt 0 seqexpr2, prt 0 dodoneexpr])
    Ocaml.Abs.Assert ext attributes simpleexpr -> prPrec i 0 (concatD [doc (showString "assert"), prt 0 ext, prt 0 attributes, prt 0 simpleexpr])
    Ocaml.Abs.Lazy ext attributes simpleexpr -> prPrec i 0 (concatD [doc (showString "lazy"), prt 0 ext, prt 0 attributes, prt 0 simpleexpr])

instance Print Ocaml.Abs.DoDoneExpr where
  prt i e = case e of
    Ocaml.Abs.DoDone seqexpr -> prPrec i 0 (concatD [doc (showString "do"), prt 0 seqexpr, doc (showString "done")])

instance Print [Ocaml.Abs.LabeledSimpleExpr] where
  prt = prtList

instance Print Ocaml.Abs.Expr_ where
  prt i e = case e of
    Ocaml.Abs.SimpleExprApp simpleexpr labeledsimpleexprs -> prPrec i 0 (concatD [prt 0 simpleexpr, prt 0 labeledsimpleexprs])
    Ocaml.Abs.Comma expr exprcommas -> prPrec i 0 (concatD [prt 0 expr, doc (showString ","), prt 0 exprcommas])
    Ocaml.Abs.ConstrName_ constrlongident -> prPrec i 0 (concatD [prt 0 constrlongident])
    Ocaml.Abs.NameTagApp nametag simpleexpr -> prPrec i 0 (concatD [prt 0 nametag, prt 0 simpleexpr])
    Ocaml.Abs.Infix funexpr infixoperator expr -> prPrec i 0 (concatD [prt 0 funexpr, prt 0 infixoperator, prt 0 expr])
    Ocaml.Abs.Subtractive subtractive expr -> prPrec i 0 (concatD [prt 0 subtractive, prt 0 expr])
    Ocaml.Abs.Additive additive expr -> prPrec i 0 (concatD [prt 0 additive, prt 0 expr])

instance Print Ocaml.Abs.SimpleExpr where
  prt i e = case e of
    Ocaml.Abs.ParenSeqExpr seqexpr -> prPrec i 0 (concatD [doc (showString "("), prt 0 seqexpr, doc (showString ")")])
    Ocaml.Abs.TypedSeqExpr seqexpr typeconstraint -> prPrec i 0 (concatD [doc (showString "("), prt 0 seqexpr, prt 0 typeconstraint, doc (showString ")")])
    Ocaml.Abs.ArrayExpr simpleexpr seqexpr -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "."), doc (showString "("), prt 0 seqexpr, doc (showString ")")])
    Ocaml.Abs.RecordExpr simpleexpr seqexpr -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "."), doc (showString "{"), prt 0 seqexpr, doc (showString "}")])
    Ocaml.Abs.StringExpr simpleexpr seqexpr -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "."), doc (showString "["), prt 0 seqexpr, doc (showString "]")])
    Ocaml.Abs.QualifiedArrayExpr simpleexpr qualifieddotop exprs -> prPrec i 0 (concatD [prt 0 simpleexpr, prt 0 qualifieddotop, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Ocaml.Abs.QualifiedRecordExpr simpleexpr qualifieddotop exprs -> prPrec i 0 (concatD [prt 0 simpleexpr, prt 0 qualifieddotop, doc (showString "{"), prt 0 exprs, doc (showString "}")])
    Ocaml.Abs.QualifiedStringExpr simpleexpr qualifieddotop exprs -> prPrec i 0 (concatD [prt 0 simpleexpr, prt 0 qualifieddotop, doc (showString "["), prt 0 exprs, doc (showString "]")])
    Ocaml.Abs.SimpleExprAttrs simpleexprattrs -> prPrec i 0 (concatD [prt 0 simpleexprattrs])
    Ocaml.Abs.SimpleExpr_ simpleexpr -> prPrec i 0 (concatD [prt 0 simpleexpr])

instance Print Ocaml.Abs.SimpleExprAttrs where
  prt i e = case e of
    Ocaml.Abs.BeginEnd ext attributes seqexpr -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 ext, prt 0 attributes, prt 0 seqexpr, doc (showString "end")])
    Ocaml.Abs.EmptyBeginEnd ext attributes -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 ext, prt 0 attributes, doc (showString "end")])
    Ocaml.Abs.New ext attributes classlongident -> prPrec i 0 (concatD [doc (showString "new"), prt 0 ext, prt 0 attributes, prt 0 classlongident])
    Ocaml.Abs.Module ext attributes moduleexpr -> prPrec i 0 (concatD [doc (showString "("), doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 moduleexpr, doc (showString ")")])
    Ocaml.Abs.TypedModule ext attributes moduleexpr moduletype -> prPrec i 0 (concatD [doc (showString "("), doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 moduleexpr, doc (showString ":"), prt 0 moduletype, doc (showString ")")])
    Ocaml.Abs.Object ext attributes classstructure -> prPrec i 0 (concatD [doc (showString "object"), prt 0 ext, prt 0 attributes, prt 0 classstructure, doc (showString "end")])

instance Print Ocaml.Abs.SimpleExpr_ where
  prt i e = case e of
    Ocaml.Abs.ValLongident_ vallongident -> prPrec i 0 (concatD [prt 0 vallongident])
    Ocaml.Abs.Constant_ constant -> prPrec i 0 (concatD [prt 0 constant])
    Ocaml.Abs.ConstrName constrlongident -> prPrec i 0 (concatD [prt 0 constrlongident])
    Ocaml.Abs.NameTag_ nametag -> prPrec i 0 (concatD [prt 0 nametag])
    Ocaml.Abs.PrefixApp prefixop simpleexpr -> prPrec i 0 (concatD [prt 0 prefixop, prt 0 simpleexpr])
    Ocaml.Abs.BangApp simpleexpr -> prPrec i 0 (concatD [doc (showString "!"), prt 0 simpleexpr])
    Ocaml.Abs.ObjectExpr objectexprfields -> prPrec i 0 (concatD [doc (showString "{<"), prt 0 objectexprfields, doc (showString ">}")])
    Ocaml.Abs.EmptyObjectExpr -> prPrec i 0 (concatD [doc (showString "{<"), doc (showString ">}")])
    Ocaml.Abs.RecordAccessTodo simpleexpr labellongident -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "."), prt 0 labellongident])
    Ocaml.Abs.QualifiedArrayExpr_ opendotdeclaration seqexpr -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "("), prt 0 seqexpr, doc (showString ")")])
    Ocaml.Abs.QualifiedObjectExpr opendotdeclaration objectexprfields -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "{"), prt 0 objectexprfields, doc (showString "}")])
    Ocaml.Abs.MethodInvocation simpleexpr label -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "#"), prt 0 label])
    Ocaml.Abs.HashOp simpleexpr1 hashop simpleexpr2 -> prPrec i 0 (concatD [prt 0 simpleexpr1, prt 0 hashop, prt 0 simpleexpr2])
    Ocaml.Abs.Extension extension -> prPrec i 0 (concatD [prt 0 extension])
    Ocaml.Abs.EmptyQualifiedArrayAccess opendotdeclaration -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "("), doc (showString ")")])
    Ocaml.Abs.RecordExpr_ recordexprcontent -> prPrec i 0 (concatD [doc (showString "{"), prt 0 recordexprcontent, doc (showString "}")])
    Ocaml.Abs.RecordAccess opendotdeclaration recordexprcontent -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "{"), prt 0 recordexprcontent, doc (showString "}")])
    Ocaml.Abs.ArrayExpr_ exprs -> prPrec i 0 (concatD [doc (showString "[|"), prt 0 exprs, doc (showString "|]")])
    Ocaml.Abs.EmptyArrayExpr -> prPrec i 0 (concatD [doc (showString "[|"), doc (showString "|]")])
    Ocaml.Abs.ArrayAccesss opendotdeclaration exprs -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "[|"), prt 0 exprs, doc (showString "|]")])
    Ocaml.Abs.ArrayAccesssTodo opendotdeclaration -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "[|"), doc (showString "|]")])
    Ocaml.Abs.QualifiedDot_ modlongident -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString ".")])
    Ocaml.Abs.StringExpr_ exprs -> prPrec i 0 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])
    Ocaml.Abs.StringAccess opendotdeclaration exprs -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "["), prt 0 exprs, doc (showString "]")])
    Ocaml.Abs.StringAccessTodo opendotdeclaration -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "["), doc (showString "]")])
    Ocaml.Abs.QualifiedModule opendotdeclaration ext attributes moduleexpr moduletype -> prPrec i 0 (concatD [prt 0 opendotdeclaration, doc (showString "."), doc (showString "("), doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 moduleexpr, doc (showString ":"), prt 0 moduletype, doc (showString ")")])

instance Print Ocaml.Abs.LabeledSimpleExpr where
  prt i e = case e of
    Ocaml.Abs.LabeldSimpleExpr simpleexpr -> prPrec i 0 (concatD [prt 0 simpleexpr])
    Ocaml.Abs.LabeledExpr label simpleexpr -> prPrec i 0 (concatD [prt 0 label, prt 0 simpleexpr])
    Ocaml.Abs.Label lident -> prPrec i 0 (concatD [doc (showString "~"), prt 0 lident])
    Ocaml.Abs.TypedLabel lident typeconstraint -> prPrec i 0 (concatD [doc (showString "~"), doc (showString "("), prt 0 lident, prt 0 typeconstraint, doc (showString ")")])
    Ocaml.Abs.OptLabel lident -> prPrec i 0 (concatD [doc (showString "?"), prt 0 lident])
    Ocaml.Abs.OptLabeledExpr optlabel simpleexpr -> prPrec i 0 (concatD [prt 0 optlabel, prt 0 simpleexpr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.LetBindingBodyNoPunning where
  prt i e = case e of
    Ocaml.Abs.StrictBinding valident strictbinding -> prPrec i 0 (concatD [prt 0 valident, prt 0 strictbinding])
    Ocaml.Abs.MonoTypedBinding valident typeconstraint seqexpr -> prPrec i 0 (concatD [prt 0 valident, prt 0 typeconstraint, doc (showString "="), prt 0 seqexpr])
    Ocaml.Abs.PolyTypedBinding valident typevars coretype seqexpr -> prPrec i 0 (concatD [prt 0 valident, doc (showString ":"), prt 0 typevars, doc (showString "."), prt 0 coretype, doc (showString "="), prt 0 seqexpr])
    Ocaml.Abs.TypedBindingTodo valident lidents coretype seqexpr -> prPrec i 0 (concatD [prt 0 valident, doc (showString ":"), doc (showString "type"), prt 0 lidents, doc (showString "."), prt 0 coretype, doc (showString "="), prt 0 seqexpr])
    Ocaml.Abs.PatternNoExnBindingNoPunning patternnoexn seqexpr -> prPrec i 0 (concatD [prt 0 patternnoexn, doc (showString "="), prt 0 seqexpr])
    Ocaml.Abs.TypedBinding simplepatternnotident coretype seqexpr -> prPrec i 0 (concatD [prt 0 simplepatternnotident, doc (showString ":"), prt 0 coretype, doc (showString "="), prt 0 seqexpr])

instance Print Ocaml.Abs.LetBindingBody where
  prt i e = case e of
    Ocaml.Abs.LetBindingBodyNoPunning letbindingbodynopunning -> prPrec i 0 (concatD [prt 0 letbindingbodynopunning])

instance Print Ocaml.Abs.LetBindingsNoExt where
  prt i e = case e of
    Ocaml.Abs.SingleLetBindingNoExt letbindingnoext -> prPrec i 0 (concatD [prt 0 letbindingnoext])
    Ocaml.Abs.MultipleLetBindingNoExt letbindingsnoext andletbinding -> prPrec i 0 (concatD [prt 0 letbindingsnoext, prt 0 andletbinding])

instance Print Ocaml.Abs.LetBindingsExt where
  prt i e = case e of
    Ocaml.Abs.SingleLetBindingExt letbindingext -> prPrec i 0 (concatD [prt 0 letbindingext])
    Ocaml.Abs.MultipleLetBindingExt letbindingsext andletbinding -> prPrec i 0 (concatD [prt 0 letbindingsext, prt 0 andletbinding])

instance Print Ocaml.Abs.LetBindingExt where
  prt i e = case e of
    Ocaml.Abs.LetBindingExt ext attributes recflag letbindingbody postitemattributes -> prPrec i 0 (concatD [doc (showString "let"), prt 0 ext, prt 0 attributes, prt 0 recflag, prt 0 letbindingbody, prt 0 postitemattributes])

instance Print Ocaml.Abs.LetBindingNoExt where
  prt i e = case e of
    Ocaml.Abs.LetBindingNoExt attributes recflag letbindingbody postitemattributes -> prPrec i 0 (concatD [doc (showString "let"), prt 0 attributes, prt 0 recflag, prt 0 letbindingbody, prt 0 postitemattributes])

instance Print Ocaml.Abs.AndLetBinding where
  prt i e = case e of
    Ocaml.Abs.AndLetBinding attributes letbindingbody postitemattributes -> prPrec i 0 (concatD [doc (showString "and"), prt 0 attributes, prt 0 letbindingbody, prt 0 postitemattributes])

instance Print Ocaml.Abs.LetopBindingBody where
  prt i e = case e of
    Ocaml.Abs.LetIdent valident strictbinding -> prPrec i 0 (concatD [prt 0 valident, prt 0 strictbinding])
    Ocaml.Abs.LetopValIdent valident -> prPrec i 0 (concatD [prt 0 valident])
    Ocaml.Abs.SimplePatternBinding simplepattern typeconstraint seqexpr -> prPrec i 0 (concatD [prt 0 simplepattern, prt 0 typeconstraint, doc (showString "="), prt 0 seqexpr])
    Ocaml.Abs.PatternNoExnBinding patternnoexn seqexpr -> prPrec i 0 (concatD [prt 0 patternnoexn, doc (showString "="), prt 0 seqexpr])

instance Print Ocaml.Abs.LetopBindings where
  prt i e = case e of
    Ocaml.Abs.BindingBody letopbindingbody -> prPrec i 0 (concatD [prt 0 letopbindingbody])
    Ocaml.Abs.AndOpBinding letopbindings andop letopbindingbody -> prPrec i 0 (concatD [prt 0 letopbindings, prt 0 andop, prt 0 letopbindingbody])

instance Print Ocaml.Abs.StrictBinding where
  prt i e = case e of
    Ocaml.Abs.Binding seqexpr -> prPrec i 0 (concatD [doc (showString "="), prt 0 seqexpr])
    Ocaml.Abs.FunParams funparamaslists optionaltypeconstraint funbody -> prPrec i 0 (concatD [prt 0 funparamaslists, prt 0 optionaltypeconstraint, doc (showString "="), prt 0 funbody])

instance Print Ocaml.Abs.FunBody where
  prt i e = case e of
    Ocaml.Abs.FunBodyFunction ext attributes matchcases -> prPrec i 0 (concatD [doc (showString "function"), prt 0 ext, prt 0 attributes, prt 0 matchcases])
    Ocaml.Abs.FunBodyFunSeqExpr funseqexpr -> prPrec i 0 (concatD [prt 0 funseqexpr])

instance Print Ocaml.Abs.MatchCases where
  prt i e = case e of
    Ocaml.Abs.MatchCases1 matchcases -> prPrec i 0 (concatD [prt 0 matchcases])
    Ocaml.Abs.MatchCases2 matchcases -> prPrec i 0 (concatD [doc (showString "|"), prt 0 matchcases])

instance Print [Ocaml.Abs.MatchCase] where
  prt = prtList

instance Print Ocaml.Abs.MatchCase where
  prt i e = case e of
    Ocaml.Abs.MatchCase pattern seqexpr -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "->"), prt 0 seqexpr])
    Ocaml.Abs.GuardedMatchCase pattern seqexpr1 seqexpr2 -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "when"), prt 0 seqexpr1, doc (showString "->"), prt 0 seqexpr2])
    Ocaml.Abs.UnreachableMatchCase pattern -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "->"), doc (showString ".")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print Ocaml.Abs.FunParamAsList where
  prt i e = case e of
    Ocaml.Abs.FunParam1 lidents -> prPrec i 0 (concatD [doc (showString "("), doc (showString "type"), prt 0 lidents, doc (showString ")")])
    Ocaml.Abs.FunParam2 labeledsimplepattern -> prPrec i 0 (concatD [prt 0 labeledsimplepattern])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Ocaml.Abs.FunParamAsList] where
  prt = prtList

instance Print Ocaml.Abs.ExprComma where
  prt i e = case e of
    Ocaml.Abs.ExprComma expr -> prPrec i 0 (concatD [prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Ocaml.Abs.ExprComma] where
  prt = prtList

instance Print Ocaml.Abs.OptionalWith where
  prt i e = case e of
    Ocaml.Abs.NoWith -> prPrec i 0 (concatD [])
    Ocaml.Abs.AWith simpleexpr -> prPrec i 0 (concatD [prt 0 simpleexpr, doc (showString "with")])

instance Print Ocaml.Abs.RecordExprFields where
  prt i e = case e of
    Ocaml.Abs.FinalRecordExprField1 recordexprfield -> prPrec i 0 (concatD [prt 0 recordexprfield])
    Ocaml.Abs.FinalRecordExprField2 recordexprfield -> prPrec i 0 (concatD [prt 0 recordexprfield, doc (showString ";")])
    Ocaml.Abs.MoreRecordExprFields recordexprfields recordexprfield -> prPrec i 0 (concatD [prt 0 recordexprfields, doc (showString ";"), prt 0 recordexprfield])

instance Print Ocaml.Abs.RecordExprContent where
  prt i e = case e of
    Ocaml.Abs.RecordExprContent optionalwith recordexprfields -> prPrec i 0 (concatD [prt 0 optionalwith, prt 0 recordexprfields])

instance Print Ocaml.Abs.OptionalTypeConstraint where
  prt i e = case e of
    Ocaml.Abs.NoTypeConstraint -> prPrec i 0 (concatD [])
    Ocaml.Abs.ATypeConstraint typeconstraint -> prPrec i 0 (concatD [prt 0 typeconstraint])

instance Print Ocaml.Abs.RecordExprField where
  prt i e = case e of
    Ocaml.Abs.RecordExprField labellongident optionaltypeconstraint optionalassignexpr -> prPrec i 0 (concatD [prt 0 labellongident, prt 0 optionaltypeconstraint, prt 0 optionalassignexpr])

instance Print [Ocaml.Abs.ObjectExprField] where
  prt = prtList

instance Print Ocaml.Abs.OptionalAssignExpr where
  prt i e = case e of
    Ocaml.Abs.NoAssign -> prPrec i 0 (concatD [])
    Ocaml.Abs.AnAssign expr -> prPrec i 0 (concatD [doc (showString "="), prt 0 expr])

instance Print Ocaml.Abs.ObjectExprField where
  prt i e = case e of
    Ocaml.Abs.ObjectExprField label optionalassignexpr -> prPrec i 0 (concatD [prt 0 label, prt 0 optionalassignexpr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ [x] = concatD [prt 0 x, doc (showString ";")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Ocaml.Abs.Expr] where
  prt = prtList

instance Print Ocaml.Abs.TypeConstraint where
  prt i e = case e of
    Ocaml.Abs.TypeConstraint coretype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 coretype])
    Ocaml.Abs.TypeConstraintCoercion coretype1 coretype2 -> prPrec i 0 (concatD [doc (showString ":"), prt 0 coretype1, doc (showString ":>"), prt 0 coretype2])
    Ocaml.Abs.TypeCoercion coretype -> prPrec i 0 (concatD [doc (showString ":>"), prt 0 coretype])

instance Print Ocaml.Abs.Pattern where
  prt i e = case e of
    Ocaml.Abs.Pattern patternpattern -> prPrec i 0 (concatD [prt 0 patternpattern])
    Ocaml.Abs.ExceptionPattern ext attributes pattern -> prPrec i 0 (concatD [doc (showString "exception"), prt 0 ext, prt 0 attributes, prt 0 pattern])

instance Print Ocaml.Abs.PatternNoExn where
  prt i e = case e of
    Ocaml.Abs.PatternNoExn patternpatternnoexn -> prPrec i 0 (concatD [prt 0 patternpatternnoexn])

instance Print Ocaml.Abs.PatternPattern where
  prt i e = case e of
    Ocaml.Abs.ConsPattern pattern1 pattern2 -> prPrec i 0 (concatD [prt 0 pattern1, doc (showString "::"), prt 0 pattern2])
    Ocaml.Abs.PatternWithAttribute pattern attribute -> prPrec i 0 (concatD [prt 0 pattern, prt 0 attribute])
    Ocaml.Abs.PatternGen patterngen -> prPrec i 0 (concatD [prt 0 patterngen])
    Ocaml.Abs.AsPattern pattern valident -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "as"), prt 0 valident])
    Ocaml.Abs.TuplePattern patterncommalistpattern -> prPrec i 0 (concatD [prt 0 patterncommalistpattern])
    Ocaml.Abs.OrPattern pattern1 pattern2 -> prPrec i 0 (concatD [prt 0 pattern1, doc (showString "|"), prt 0 pattern2])

instance Print Ocaml.Abs.PatternPatternNoExn where
  prt i e = case e of
    Ocaml.Abs.ConsPatternNoExn patternnoexn pattern -> prPrec i 0 (concatD [prt 0 patternnoexn, doc (showString "::"), prt 0 pattern])
    Ocaml.Abs.PatternWithAttributeNoExn patternnoexn attribute -> prPrec i 0 (concatD [prt 0 patternnoexn, prt 0 attribute])
    Ocaml.Abs.PatternGenNoExn patterngen -> prPrec i 0 (concatD [prt 0 patterngen])
    Ocaml.Abs.AsPatternNoExn patternnoexn valident -> prPrec i 0 (concatD [prt 0 patternnoexn, doc (showString "as"), prt 0 valident])
    Ocaml.Abs.TuplePatternNoExn patterncommalistpatternnoexn -> prPrec i 0 (concatD [prt 0 patterncommalistpatternnoexn])
    Ocaml.Abs.OrPatternNoExn patternnoexn pattern -> prPrec i 0 (concatD [prt 0 patternnoexn, doc (showString "|"), prt 0 pattern])

instance Print [Ocaml.Abs.LIDENT] where
  prt = prtList

instance Print Ocaml.Abs.PatternGen where
  prt i e = case e of
    Ocaml.Abs.SimplePatternGen simplepattern -> prPrec i 0 (concatD [prt 0 simplepattern])
    Ocaml.Abs.ConstrPattern constrlongident pattern -> prPrec i 0 (concatD [prt 0 constrlongident, prt 0 pattern])
    Ocaml.Abs.ConstrTypePattern constrlongident lidents simplepattern -> prPrec i 0 (concatD [prt 0 constrlongident, doc (showString "("), doc (showString "type"), prt 0 lidents, doc (showString ")"), prt 0 simplepattern])
    Ocaml.Abs.TagPatternGen nametag pattern -> prPrec i 0 (concatD [prt 0 nametag, prt 0 pattern])
    Ocaml.Abs.LazyPattern ext attributes simplepattern -> prPrec i 0 (concatD [doc (showString "lazy"), prt 0 ext, prt 0 attributes, prt 0 simplepattern])

instance Print Ocaml.Abs.SimplePattern where
  prt i e = case e of
    Ocaml.Abs.ValIdent valident -> prPrec i 0 (concatD [prt 0 valident])
    Ocaml.Abs.SimplePatternNotIdent simplepatternnotident -> prPrec i 0 (concatD [prt 0 simplepatternnotident])

instance Print Ocaml.Abs.SimplePatternNotIdent where
  prt i e = case e of
    Ocaml.Abs.ParenPattern pattern -> prPrec i 0 (concatD [doc (showString "("), prt 0 pattern, doc (showString ")")])
    Ocaml.Abs.SimpleDelimitedPattern simpledelimitedpattern -> prPrec i 0 (concatD [prt 0 simpledelimitedpattern])
    Ocaml.Abs.ParenModule ext attributes modulename -> prPrec i 0 (concatD [doc (showString "("), doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 modulename, doc (showString ")")])
    Ocaml.Abs.TypedParenModule ext attributes modulename packagetype -> prPrec i 0 (concatD [doc (showString "("), doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 modulename, doc (showString ":"), prt 0 packagetype, doc (showString ")")])
    Ocaml.Abs.SimplePatternNotIdent_ simplepatternnotident -> prPrec i 0 (concatD [prt 0 simplepatternnotident])

instance Print Ocaml.Abs.SimplePatternNotIdent_ where
  prt i e = case e of
    Ocaml.Abs.UnderscorePattern -> prPrec i 0 (concatD [doc (showString "_")])
    Ocaml.Abs.ConstantPattern signedconstant -> prPrec i 0 (concatD [prt 0 signedconstant])
    Ocaml.Abs.RangePattern signedconstant1 signedconstant2 -> prPrec i 0 (concatD [prt 0 signedconstant1, doc (showString ".."), prt 0 signedconstant2])
    Ocaml.Abs.ConstrNamePattern constrlongident -> prPrec i 0 (concatD [prt 0 constrlongident])
    Ocaml.Abs.TagPattern nametag -> prPrec i 0 (concatD [prt 0 nametag])
    Ocaml.Abs.TypeConstrPattern typelongident -> prPrec i 0 (concatD [doc (showString "#"), prt 0 typelongident])
    Ocaml.Abs.DotPattern modlongident simpledelimitedpattern -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), prt 0 simpledelimitedpattern])
    Ocaml.Abs.EmptyStringPattern modlongident -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), doc (showString "["), doc (showString "]")])
    Ocaml.Abs.EmptyArrayPattern_ modlongident -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), doc (showString "("), doc (showString ")")])
    Ocaml.Abs.ArrayPattern_ modlongident pattern -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), doc (showString "("), prt 0 pattern, doc (showString ")")])
    Ocaml.Abs.TypedPattern pattern coretype -> prPrec i 0 (concatD [doc (showString "("), prt 0 pattern, doc (showString ":"), prt 0 coretype, doc (showString ")")])
    Ocaml.Abs.ModulePattern ext attributes modulename packagetype -> prPrec i 0 (concatD [doc (showString "("), doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 modulename, doc (showString ":"), prt 0 packagetype, doc (showString ")")])
    Ocaml.Abs.ExtensionPattern extension -> prPrec i 0 (concatD [prt 0 extension])

instance Print Ocaml.Abs.SimpleDelimitedPattern where
  prt i e = case e of
    Ocaml.Abs.RecordPattern recordpatcontent -> prPrec i 0 (concatD [doc (showString "{"), prt 0 recordpatcontent, doc (showString "}")])
    Ocaml.Abs.ListPattern patternsemis -> prPrec i 0 (concatD [doc (showString "["), prt 0 patternsemis, doc (showString "]")])
    Ocaml.Abs.ArrayPattern patternsemis -> prPrec i 0 (concatD [doc (showString "[|"), prt 0 patternsemis, doc (showString "|]")])
    Ocaml.Abs.EmptyArrayPattern -> prPrec i 0 (concatD [doc (showString "[|"), doc (showString "|]")])

instance Print Ocaml.Abs.PatternCommaListPattern where
  prt i e = case e of
    Ocaml.Abs.MorePattern patterncommalistpattern pattern -> prPrec i 0 (concatD [prt 0 patterncommalistpattern, doc (showString ","), prt 0 pattern])
    Ocaml.Abs.TwoPattern pattern1 pattern2 -> prPrec i 0 (concatD [prt 0 pattern1, doc (showString ","), prt 0 pattern2])

instance Print Ocaml.Abs.PatternCommaListPatternNoExn where
  prt i e = case e of
    Ocaml.Abs.MorePatternNoExn patterncommalistpatternnoexn pattern -> prPrec i 0 (concatD [prt 0 patterncommalistpatternnoexn, doc (showString ","), prt 0 pattern])
    Ocaml.Abs.TwoPatternNoExn patternnoexn pattern -> prPrec i 0 (concatD [prt 0 patternnoexn, doc (showString ","), prt 0 pattern])

instance Print Ocaml.Abs.PatternSemi where
  prt i e = case e of
    Ocaml.Abs.PatternSemi pattern -> prPrec i 0 (concatD [prt 0 pattern])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ [x] = concatD [prt 0 x, doc (showString ";")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Ocaml.Abs.PatternSemi] where
  prt = prtList

instance Print Ocaml.Abs.OptionalSemi where
  prt i e = case e of
    Ocaml.Abs.NoSemi -> prPrec i 0 (concatD [])
    Ocaml.Abs.ASemi -> prPrec i 0 (concatD [doc (showString ";")])

instance Print Ocaml.Abs.RecordPatContent where
  prt i e = case e of
    Ocaml.Abs.FinalRecordPattern recordpatfield optionalsemi -> prPrec i 0 (concatD [prt 0 recordpatfield, prt 0 optionalsemi])
    Ocaml.Abs.UnderscoreRecordPattern recordpatfield -> prPrec i 0 (concatD [prt 0 recordpatfield, doc (showString ";"), doc (showString "_")])
    Ocaml.Abs.MoreRecordPatterns recordpatfield recordpatcontent -> prPrec i 0 (concatD [prt 0 recordpatfield, doc (showString ";"), prt 0 recordpatcontent])

instance Print Ocaml.Abs.OptionalCoreType where
  prt i e = case e of
    Ocaml.Abs.NoCoreType -> prPrec i 0 (concatD [])
    Ocaml.Abs.ACoreType coretype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 coretype])

instance Print Ocaml.Abs.RecordPatField where
  prt i e = case e of
    Ocaml.Abs.RecordPatField labellongident optionalcoretype pattern -> prPrec i 0 (concatD [prt 0 labellongident, prt 0 optionalcoretype, doc (showString "="), prt 0 pattern])

instance Print Ocaml.Abs.ValueDescription where
  prt i e = case e of
    Ocaml.Abs.ValueDescription ext attributes valident polytype coretype postitemattributes -> prPrec i 0 (concatD [doc (showString "val"), prt 0 ext, prt 0 attributes, prt 0 valident, doc (showString ":"), prt 0 polytype, prt 0 coretype, prt 0 postitemattributes])

instance Print [Ocaml.Abs.RawString] where
  prt = prtList

instance Print Ocaml.Abs.PrimitiveDeclaration where
  prt i e = case e of
    Ocaml.Abs.PrmitiveDeclaration ext attributes valident polytype coretype rawstrings postitemattributes -> prPrec i 0 (concatD [doc (showString "external"), prt 0 ext, prt 0 attributes, prt 0 valident, doc (showString ":"), prt 0 polytype, prt 0 coretype, doc (showString "="), prt 0 rawstrings, prt 0 postitemattributes])

instance Print Ocaml.Abs.TypeDeclarations where
  prt i e = case e of
    Ocaml.Abs.TypeDeclarations typedeclaration andtypedeclarations -> prPrec i 0 (concatD [prt 0 typedeclaration, prt 0 andtypedeclarations])

instance Print Ocaml.Abs.AndTypeDeclaration where
  prt i e = case e of
    Ocaml.Abs.AndTypeDeclaration attributes typeparameters lident typekind constraints postitemattributes -> prPrec i 0 (concatD [prt 0 attributes, prt 0 typeparameters, prt 0 lident, prt 0 typekind, prt 0 constraints, prt 0 postitemattributes])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print [Ocaml.Abs.AndTypeDeclaration] where
  prt = prtList

instance Print Ocaml.Abs.TypeSubstDeclarations where
  prt i e = case e of
    Ocaml.Abs.TypeSubstDeclarations typesubstdeclaration andtypesubstdeclarations -> prPrec i 0 (concatD [prt 0 typesubstdeclaration, prt 0 andtypesubstdeclarations])

instance Print Ocaml.Abs.AndTypeSubstDeclaration where
  prt i e = case e of
    Ocaml.Abs.AndTypeSubstDeclaration attributes typeparameters lident typesubstkind constraints postitemattributes -> prPrec i 0 (concatD [doc (showString "and"), prt 0 attributes, prt 0 typeparameters, prt 0 lident, prt 0 typesubstkind, prt 0 constraints, prt 0 postitemattributes])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print [Ocaml.Abs.AndTypeSubstDeclaration] where
  prt = prtList

instance Print Ocaml.Abs.TypeSubstDeclaration where
  prt i e = case e of
    Ocaml.Abs.TypeSubstDeclaration ext attributes typeparameters lident typesubstkind constraints postitemattributes -> prPrec i 0 (concatD [doc (showString "type"), prt 0 ext, prt 0 attributes, prt 0 typeparameters, prt 0 lident, prt 0 typesubstkind, prt 0 constraints, prt 0 postitemattributes])

instance Print Ocaml.Abs.TypeDeclaration where
  prt i e = case e of
    Ocaml.Abs.TypeDeclaration ext attributes typeparameters lident typekind constraints postitemattributes -> prPrec i 0 (concatD [doc (showString "type"), prt 0 ext, prt 0 attributes, prt 0 typeparameters, prt 0 lident, prt 0 typekind, prt 0 constraints, prt 0 postitemattributes])

instance Print Ocaml.Abs.Constraint where
  prt i e = case e of
    Ocaml.Abs.Constraint constrain -> prPrec i 0 (concatD [doc (showString "constraint"), prt 0 constrain])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Ocaml.Abs.Constraint] where
  prt = prtList

instance Print Ocaml.Abs.NonemptyTypeKind where
  prt i e = case e of
    Ocaml.Abs.NonemptyTypeKind1 inlineprivateflag coretype -> prPrec i 0 (concatD [prt 0 inlineprivateflag, prt 0 coretype])
    Ocaml.Abs.NonemptyTypeKind2 typesynonym inlineprivateflag constructordeclarations -> prPrec i 0 (concatD [prt 0 typesynonym, prt 0 inlineprivateflag, prt 0 constructordeclarations])
    Ocaml.Abs.NonemptyTypeKind3 typesynonym inlineprivateflag -> prPrec i 0 (concatD [prt 0 typesynonym, prt 0 inlineprivateflag, doc (showString "..")])
    Ocaml.Abs.NonemptyTypeKind4 typesynonym inlineprivateflag labeldeclarations -> prPrec i 0 (concatD [prt 0 typesynonym, prt 0 inlineprivateflag, doc (showString "{"), prt 0 labeldeclarations, doc (showString "}")])

instance Print Ocaml.Abs.TypeSynonym where
  prt i e = case e of
    Ocaml.Abs.NoTypeSynonym -> prPrec i 0 (concatD [])
    Ocaml.Abs.TypeSynonym coretype -> prPrec i 0 (concatD [doc (showString "="), prt 0 coretype])

instance Print Ocaml.Abs.TypeKind where
  prt i e = case e of
    Ocaml.Abs.NoTypeKind -> prPrec i 0 (concatD [])
    Ocaml.Abs.TypeKind nonemptytypekind -> prPrec i 0 (concatD [doc (showString "="), prt 0 nonemptytypekind])

instance Print Ocaml.Abs.TypeSubstKind where
  prt i e = case e of
    Ocaml.Abs.TypeSubstKind nonemptytypekind -> prPrec i 0 (concatD [doc (showString ":="), prt 0 nonemptytypekind])

instance Print Ocaml.Abs.TypeParameters where
  prt i e = case e of
    Ocaml.Abs.NoTypeParameters -> prPrec i 0 (concatD [])
    Ocaml.Abs.SingleTypeParameter typeparameter -> prPrec i 0 (concatD [prt 0 typeparameter])
    Ocaml.Abs.TypeParameters typeparameters -> prPrec i 0 (concatD [doc (showString "("), prt 0 typeparameters, doc (showString ")")])

instance Print [Ocaml.Abs.TypeParameter] where
  prt = prtList

instance Print Ocaml.Abs.TypeParameter where
  prt i e = case e of
    Ocaml.Abs.TypeParameter typevariance typevariable -> prPrec i 0 (concatD [prt 0 typevariance, prt 0 typevariable])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Ocaml.Abs.TypeVariable where
  prt i e = case e of
    Ocaml.Abs.TypeVariable id -> prPrec i 0 (concatD [doc (showString "'"), prt 0 id])
    Ocaml.Abs.Underscore -> prPrec i 0 (concatD [doc (showString "_")])

instance Print Ocaml.Abs.TypeVariance where
  prt i e = case e of
    Ocaml.Abs.NoVarianceNoInjectivity -> prPrec i 0 (concatD [])
    Ocaml.Abs.CovariantNoInjectivity -> prPrec i 0 (concatD [doc (showString "+")])
    Ocaml.Abs.ContravariantNoInjectivity -> prPrec i 0 (concatD [doc (showString "-")])
    Ocaml.Abs.NoVarianceInjective -> prPrec i 0 (concatD [doc (showString "!")])
    Ocaml.Abs.CovariantInjective -> prPrec i 0 (concatD [doc (showString "+!")])
    Ocaml.Abs.InjectiveCovariant -> prPrec i 0 (concatD [doc (showString "!+")])
    Ocaml.Abs.ContravariantInjective -> prPrec i 0 (concatD [doc (showString "-!")])
    Ocaml.Abs.InjectiveContravariant -> prPrec i 0 (concatD [doc (showString "!-")])
    Ocaml.Abs.InfixOpVariance plusminusop -> prPrec i 0 (concatD [prt 0 plusminusop])
    Ocaml.Abs.PrefixOpVariance prefixop -> prPrec i 0 (concatD [prt 0 prefixop])

instance Print [Ocaml.Abs.ConstructorDeclaration] where
  prt = prtList

instance Print Ocaml.Abs.ConstructorDeclarations where
  prt i e = case e of
    Ocaml.Abs.EmptyConstructorDeclarations -> prPrec i 0 (concatD [doc (showString "|")])
    Ocaml.Abs.BarConstructorDeclarations constructordeclarations -> prPrec i 0 (concatD [doc (showString "|"), prt 0 constructordeclarations])
    Ocaml.Abs.ConstructorDeclarations constructordeclarations -> prPrec i 0 (concatD [prt 0 constructordeclarations])

instance Print Ocaml.Abs.ConstructorDeclaration where
  prt i e = case e of
    Ocaml.Abs.ConstructorDeclaration constrident generalizedconstructorarguments attributes -> prPrec i 0 (concatD [prt 0 constrident, prt 0 generalizedconstructorarguments, prt 0 attributes])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print Ocaml.Abs.StrExceptionDeclaration where
  prt i e = case e of
    Ocaml.Abs.SigStrExceptionDeclaration sigexceptiondeclaration -> prPrec i 0 (concatD [prt 0 sigexceptiondeclaration])
    Ocaml.Abs.Exception ext attributes1 constrident constrlongident attributes2 postitemattributes -> prPrec i 0 (concatD [doc (showString "exception"), prt 0 ext, prt 0 attributes1, prt 0 constrident, doc (showString "="), prt 0 constrlongident, prt 0 attributes2, prt 0 postitemattributes])

instance Print Ocaml.Abs.SigExceptionDeclaration where
  prt i e = case e of
    Ocaml.Abs.SigExceptionDeclaration ext attributes1 constrident generalizedconstructorarguments attributes2 postitemattributes -> prPrec i 0 (concatD [doc (showString "exception"), prt 0 ext, prt 0 attributes1, prt 0 constrident, prt 0 generalizedconstructorarguments, prt 0 attributes2, prt 0 postitemattributes])

instance Print Ocaml.Abs.LetExceptionDeclaration where
  prt i e = case e of
    Ocaml.Abs.LetExceptionDeclaration constrident generalizedconstructorarguments attributes -> prPrec i 0 (concatD [prt 0 constrident, prt 0 generalizedconstructorarguments, prt 0 attributes])

instance Print Ocaml.Abs.GeneralizedConstructorArguments where
  prt i e = case e of
    Ocaml.Abs.NoGeneralizedConstructorArguments -> prPrec i 0 (concatD [])
    Ocaml.Abs.GeneralizedConstructorArguments1 constructorarguments -> prPrec i 0 (concatD [doc (showString "of"), prt 0 constructorarguments])
    Ocaml.Abs.GeneralizedConstructorArguments2 constructorarguments atomictype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 constructorarguments, doc (showString "->"), prt 0 atomictype])
    Ocaml.Abs.GeneralizedConstructorArguments3 typevars constructorarguments atomictype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 typevars, doc (showString "."), prt 0 constructorarguments, doc (showString "->"), prt 0 atomictype])
    Ocaml.Abs.GeneralizedConstructorArguments4 atomictype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 atomictype])
    Ocaml.Abs.GeneralizedConstructorArguments5 typevars atomictype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 typevars, doc (showString "."), prt 0 atomictype])

instance Print Ocaml.Abs.ConstructorArguments where
  prt i e = case e of
    Ocaml.Abs.Arg1 atomictypes -> prPrec i 0 (concatD [prt 0 atomictypes])
    Ocaml.Abs.Arg2 labeldeclarations -> prPrec i 0 (concatD [doc (showString "{"), prt 0 labeldeclarations, doc (showString "}")])

instance Print Ocaml.Abs.LabelDeclarations where
  prt i e = case e of
    Ocaml.Abs.FinalLabelDeclaration labeldeclaration -> prPrec i 0 (concatD [prt 0 labeldeclaration])
    Ocaml.Abs.FinalLabelDeclarationSemi labeldeclarationsemi -> prPrec i 0 (concatD [prt 0 labeldeclarationsemi])
    Ocaml.Abs.MoreLabelDeclarations labeldeclarationsemi labeldeclarations -> prPrec i 0 (concatD [prt 0 labeldeclarationsemi, prt 0 labeldeclarations])

instance Print Ocaml.Abs.LabelDeclaration where
  prt i e = case e of
    Ocaml.Abs.LabelDeclaration mutableflag label polytypenoattr attributes -> prPrec i 0 (concatD [prt 0 mutableflag, prt 0 label, doc (showString ":"), prt 0 polytypenoattr, prt 0 attributes])

instance Print Ocaml.Abs.LabelDeclarationSemi where
  prt i e = case e of
    Ocaml.Abs.LabelDeclarationSemi mutableflag label polytypenoattr attributes1 attributes2 -> prPrec i 0 (concatD [prt 0 mutableflag, prt 0 label, doc (showString ":"), prt 0 polytypenoattr, prt 0 attributes1, doc (showString ";"), prt 0 attributes2])

instance Print Ocaml.Abs.StrTypeExtension where
  prt i e = case e of
    Ocaml.Abs.StrTypeExtension ext attributes typeparameters typelongident privateflag barllistextensionconstructor postitemattributes -> prPrec i 0 (concatD [doc (showString "type"), prt 0 ext, prt 0 attributes, prt 0 typeparameters, prt 0 typelongident, doc (showString "+="), prt 0 privateflag, prt 0 barllistextensionconstructor, prt 0 postitemattributes])

instance Print Ocaml.Abs.BarLlistExtensionConstructor where
  prt i e = case e of
    Ocaml.Abs.NoExtensionConstructors -> prPrec i 0 (concatD [doc (showString "|")])
    Ocaml.Abs.BarExtensionConstructors extensionconstructors -> prPrec i 0 (concatD [doc (showString "|"), prt 0 extensionconstructors])
    Ocaml.Abs.ExtensionConstructors extensionconstructors -> prPrec i 0 (concatD [prt 0 extensionconstructors])

instance Print [Ocaml.Abs.ExtensionConstructor] where
  prt = prtList

instance Print Ocaml.Abs.SigTypeExtension where
  prt i e = case e of
    Ocaml.Abs.SigTypeExtension ext attributes typeparameters typelongident privateflag barllistextensionconstructordeclaration postitemattributes -> prPrec i 0 (concatD [doc (showString "type"), prt 0 ext, prt 0 attributes, prt 0 typeparameters, prt 0 typelongident, doc (showString "+="), prt 0 privateflag, prt 0 barllistextensionconstructordeclaration, prt 0 postitemattributes])

instance Print Ocaml.Abs.BarLlistExtensionConstructorDeclaration where
  prt i e = case e of
    Ocaml.Abs.NoConstructor -> prPrec i 0 (concatD [doc (showString "|")])
    Ocaml.Abs.Constructor extensionconstructordeclarations -> prPrec i 0 (concatD [doc (showString "|"), prt 0 extensionconstructordeclarations])

instance Print [Ocaml.Abs.ExtensionConstructorDeclaration] where
  prt = prtList

instance Print Ocaml.Abs.ExtensionConstructor where
  prt i e = case e of
    Ocaml.Abs.Declaration extensionconstructordeclaration -> prPrec i 0 (concatD [prt 0 extensionconstructordeclaration])
    Ocaml.Abs.Rebind extensionconstructorrebind -> prPrec i 0 (concatD [prt 0 extensionconstructorrebind])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print Ocaml.Abs.ExtensionConstructorDeclaration where
  prt i e = case e of
    Ocaml.Abs.ExtensionConstructorDeclaration constrident generalizedconstructorarguments attributes -> prPrec i 0 (concatD [prt 0 constrident, prt 0 generalizedconstructorarguments, prt 0 attributes])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print Ocaml.Abs.ExtensionConstructorRebind where
  prt i e = case e of
    Ocaml.Abs.ExtensionConstructorRebind constrident constrlongident attributes -> prPrec i 0 (concatD [prt 0 constrident, doc (showString "="), prt 0 constrlongident, prt 0 attributes])

instance Print Ocaml.Abs.WithConstraint where
  prt i e = case e of
    Ocaml.Abs.WithConstraint1 typeparameters labellongident withtypebinder coretypenoattr constraints -> prPrec i 0 (concatD [doc (showString "type"), prt 0 typeparameters, prt 0 labellongident, prt 0 withtypebinder, prt 0 coretypenoattr, prt 0 constraints])
    Ocaml.Abs.WithConstraint2 typeparameters labellongident coretypenoattr -> prPrec i 0 (concatD [doc (showString "type"), prt 0 typeparameters, prt 0 labellongident, doc (showString ":="), prt 0 coretypenoattr])
    Ocaml.Abs.WithConstraint3 modlongident modextlongident -> prPrec i 0 (concatD [doc (showString "module"), prt 0 modlongident, doc (showString "="), prt 0 modextlongident])
    Ocaml.Abs.WithConstraint4 modlongident modextlongident -> prPrec i 0 (concatD [doc (showString "module"), prt 0 modlongident, doc (showString ":="), prt 0 modextlongident])
    Ocaml.Abs.WithConstraint5 mtylongident moduletype -> prPrec i 0 (concatD [doc (showString "module"), doc (showString "type"), prt 0 mtylongident, doc (showString "="), prt 0 moduletype])
    Ocaml.Abs.WithConstraint6 mtylongident moduletype -> prPrec i 0 (concatD [doc (showString "module"), doc (showString "type"), prt 0 mtylongident, doc (showString ":="), prt 0 moduletype])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print Ocaml.Abs.WithTypeBinder where
  prt i e = case e of
    Ocaml.Abs.WithTypeBinderEqual -> prPrec i 0 (concatD [doc (showString "=")])
    Ocaml.Abs.WithTypeBinderEqualPrivate -> prPrec i 0 (concatD [doc (showString "="), doc (showString "private")])

instance Print Ocaml.Abs.TypeVar where
  prt i e = case e of
    Ocaml.Abs.TypeVarIdent id -> prPrec i 0 (concatD [doc (showString "'"), prt 0 id])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Ocaml.Abs.TypeVar] where
  prt = prtList

instance Print Ocaml.Abs.PolyType where
  prt i e = case e of
    Ocaml.Abs.MonoCoreType coretype -> prPrec i 0 (concatD [prt 0 coretype])
    Ocaml.Abs.PolyCoreType typevars coretype -> prPrec i 0 (concatD [prt 0 typevars, doc (showString "."), prt 0 coretype])

instance Print Ocaml.Abs.PolyTypeNoAttr where
  prt i e = case e of
    Ocaml.Abs.MonoCoreTypeNoAttr coretypenoattr -> prPrec i 0 (concatD [prt 0 coretypenoattr])
    Ocaml.Abs.PolyCoreTypeNoAttr typevars coretypenoattr -> prPrec i 0 (concatD [prt 0 typevars, doc (showString "."), prt 0 coretypenoattr])

instance Print Ocaml.Abs.CoreType where
  prt i e = case e of
    Ocaml.Abs.CoreTypeWithoutAttribute aliastype -> prPrec i 0 (concatD [prt 0 aliastype])
    Ocaml.Abs.CoreTypeWithAttribute coretype attribute -> prPrec i 0 (concatD [prt 0 coretype, prt 0 attribute])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Ocaml.Abs.CoreTypeNoAttr where
  prt i e = case e of
    Ocaml.Abs.CoreTypeNoAttr aliastype -> prPrec i 0 (concatD [prt 0 aliastype])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "&"), prt 0 xs]

instance Print Ocaml.Abs.AliasType where
  prt i e = case e of
    Ocaml.Abs.FunctionType functiontype -> prPrec i 0 (concatD [prt 0 functiontype])
    Ocaml.Abs.AliasType aliastype typevar -> prPrec i 0 (concatD [prt 0 aliastype, doc (showString "as"), prt 0 typevar])

instance Print Ocaml.Abs.FunctionType where
  prt i e = case e of
    Ocaml.Abs.TupleType tupletype -> prPrec i 0 (concatD [prt 0 tupletype])
    Ocaml.Abs.FunType arglabel tupletype functiontype -> prPrec i 0 (concatD [prt 0 arglabel, prt 0 tupletype, doc (showString "->"), prt 0 functiontype])

instance Print Ocaml.Abs.ArgLabel where
  prt i e = case e of
    Ocaml.Abs.OptArgLabelTodo optlabel -> prPrec i 0 (concatD [prt 0 optlabel])
    Ocaml.Abs.OptArgLabel lident -> prPrec i 0 (concatD [doc (showString "?"), prt 0 lident, doc (showString ":")])
    Ocaml.Abs.ArgLabel lident -> prPrec i 0 (concatD [prt 0 lident, doc (showString ":")])
    Ocaml.Abs.NoArgLabel -> prPrec i 0 (concatD [])

instance Print Ocaml.Abs.TupleType where
  prt i e = case e of
    Ocaml.Abs.AtomicType atomictype -> prPrec i 0 (concatD [prt 0 atomictype])
    Ocaml.Abs.AtomicTypes atomictype atomictypes -> prPrec i 0 (concatD [prt 0 atomictype, doc (showString "*"), prt 0 atomictypes])

instance Print [Ocaml.Abs.AtomicType] where
  prt = prtList

instance Print Ocaml.Abs.OptionalBar where
  prt i e = case e of
    Ocaml.Abs.NoBar -> prPrec i 0 (concatD [])
    Ocaml.Abs.ABar -> prPrec i 0 (concatD [doc (showString "|")])

instance Print Ocaml.Abs.DelimitedTypeSupportingLocalOpen where
  prt i e = case e of
    Ocaml.Abs.LocalOpen1 coretype -> prPrec i 0 (concatD [doc (showString "("), prt 0 coretype, doc (showString ")")])
    Ocaml.Abs.LocalOpen2 ext attributes packagetype -> prPrec i 0 (concatD [doc (showString "("), doc (showString "module"), prt 0 ext, prt 0 attributes, prt 0 packagetype, doc (showString ")")])
    Ocaml.Abs.LocalOpen3 tagfield -> prPrec i 0 (concatD [doc (showString "["), prt 0 tagfield, doc (showString "]")])
    Ocaml.Abs.LocalOpen4 rowfields -> prPrec i 0 (concatD [doc (showString "["), doc (showString "|"), prt 0 rowfields, doc (showString "]")])
    Ocaml.Abs.LocalOpen5 rowfield rowfields -> prPrec i 0 (concatD [doc (showString "["), prt 0 rowfield, doc (showString "|"), prt 0 rowfields, doc (showString "]")])
    Ocaml.Abs.LocalOpen6 optionalbar rowfields -> prPrec i 0 (concatD [doc (showString "[>"), prt 0 optionalbar, prt 0 rowfields, doc (showString "]")])
    Ocaml.Abs.LocalOpen7 -> prPrec i 0 (concatD [doc (showString "[>"), doc (showString "]")])
    Ocaml.Abs.LocalOpen8 optionalbar rowfields -> prPrec i 0 (concatD [doc (showString "[<"), prt 0 optionalbar, prt 0 rowfields, doc (showString "]")])
    Ocaml.Abs.LocalOpen9 optionalbar rowfields nametags -> prPrec i 0 (concatD [doc (showString "[<"), prt 0 optionalbar, prt 0 rowfields, doc (showString ">"), prt 0 nametags, doc (showString "]")])

instance Print Ocaml.Abs.ObjectType where
  prt i e = case e of
    Ocaml.Abs.MethList methlist -> prPrec i 0 (concatD [doc (showString "<"), prt 0 methlist, doc (showString ">")])
    Ocaml.Abs.Empty -> prPrec i 0 (concatD [doc (showString "<"), doc (showString ">")])

instance Print Ocaml.Abs.DelimitedType where
  prt i e = case e of
    Ocaml.Abs.ObjectType objecttype -> prPrec i 0 (concatD [prt 0 objecttype])
    Ocaml.Abs.DelimitedTypeExtension extension -> prPrec i 0 (concatD [prt 0 extension])
    Ocaml.Abs.DelimitedTypeSupportingLocalOpen delimitedtypesupportinglocalopen -> prPrec i 0 (concatD [prt 0 delimitedtypesupportinglocalopen])

instance Print Ocaml.Abs.AtomicType where
  prt i e = case e of
    Ocaml.Abs.DelimitedType delimitedtype -> prPrec i 0 (concatD [prt 0 delimitedtype])
    Ocaml.Abs.TypeApp actualtypeparameters typelongident -> prPrec i 0 (concatD [prt 0 actualtypeparameters, prt 0 typelongident])
    Ocaml.Abs.SubTypeApp actualtypeparameters cltylongident -> prPrec i 0 (concatD [prt 0 actualtypeparameters, doc (showString "#"), prt 0 cltylongident])
    Ocaml.Abs.QualifiedDelimitedType modextlongident delimitedtypesupportinglocalopen -> prPrec i 0 (concatD [prt 0 modextlongident, doc (showString "."), prt 0 delimitedtypesupportinglocalopen])
    Ocaml.Abs.TypeVar id -> prPrec i 0 (concatD [doc (showString "'"), prt 0 id])
    Ocaml.Abs.UnderscoreType -> prPrec i 0 (concatD [doc (showString "_")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "*"), prt 0 xs]

instance Print Ocaml.Abs.ActualTypeParameters where
  prt i e = case e of
    Ocaml.Abs.NoActualTypeParamters -> prPrec i 0 (concatD [])
    Ocaml.Abs.SingleActualTypeParameter atomictype -> prPrec i 0 (concatD [prt 0 atomictype])
    Ocaml.Abs.ActualTypeParameters coretype coretypes -> prPrec i 0 (concatD [doc (showString "("), prt 0 coretype, doc (showString ","), prt 0 coretypes, doc (showString ")")])

instance Print Ocaml.Abs.PackageType where
  prt i e = case e of
    Ocaml.Abs.PackageType moduletype -> prPrec i 0 (concatD [prt 0 moduletype])

instance Print [Ocaml.Abs.RowField] where
  prt = prtList

instance Print Ocaml.Abs.RowField where
  prt i e = case e of
    Ocaml.Abs.TagField tagfield -> prPrec i 0 (concatD [prt 0 tagfield])
    Ocaml.Abs.CoreType coretype -> prPrec i 0 (concatD [prt 0 coretype])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print Ocaml.Abs.TagField where
  prt i e = case e of
    Ocaml.Abs.Of nametag optampersand coretypenoattrs attributes -> prPrec i 0 (concatD [prt 0 nametag, doc (showString "of"), prt 0 optampersand, prt 0 coretypenoattrs, prt 0 attributes])
    Ocaml.Abs.Tag nametag attributes -> prPrec i 0 (concatD [prt 0 nametag, prt 0 attributes])

instance Print Ocaml.Abs.OptAmpersand where
  prt i e = case e of
    Ocaml.Abs.Ampersand -> prPrec i 0 (concatD [doc (showString "&")])
    Ocaml.Abs.NoAmpersand -> prPrec i 0 (concatD [])

instance Print [Ocaml.Abs.CoreTypeNoAttr] where
  prt = prtList

instance Print [Ocaml.Abs.NameTag] where
  prt = prtList

instance Print Ocaml.Abs.MethList where
  prt i e = case e of
    Ocaml.Abs.FieldSemiMethList label polytypenoattr attributes1 attributes2 methlist -> prPrec i 0 (concatD [prt 0 label, doc (showString ":"), prt 0 polytypenoattr, prt 0 attributes1, doc (showString ";"), prt 0 attributes2, prt 0 methlist])
    Ocaml.Abs.InheritSemiMethList atomictype methlist -> prPrec i 0 (concatD [prt 0 atomictype, doc (showString ";"), prt 0 methlist])
    Ocaml.Abs.FieldSemi label polytypenoattr attributes -> prPrec i 0 (concatD [prt 0 label, doc (showString ":"), prt 0 polytypenoattr, prt 0 attributes, doc (showString ";")])
    Ocaml.Abs.InheritSemi atomictype -> prPrec i 0 (concatD [prt 0 atomictype, doc (showString ";")])
    Ocaml.Abs.Field label polytypenoattr attributes -> prPrec i 0 (concatD [prt 0 label, doc (showString ":"), prt 0 polytypenoattr, prt 0 attributes])
    Ocaml.Abs.Inherit atomictype -> prPrec i 0 (concatD [prt 0 atomictype])
    Ocaml.Abs.DotDot -> prPrec i 0 (concatD [doc (showString "..")])

instance Print Ocaml.Abs.Label where
  prt i e = case e of
    Ocaml.Abs.LabelIdent lident -> prPrec i 0 (concatD [prt 0 lident])

instance Print Ocaml.Abs.Constant where
  prt i e = case e of
    Ocaml.Abs.Int int -> prPrec i 0 (concatD [prt 0 int])
    Ocaml.Abs.Char char -> prPrec i 0 (concatD [prt 0 char])
    Ocaml.Abs.String string -> prPrec i 0 (concatD [prt 0 string])
    Ocaml.Abs.Float float -> prPrec i 0 (concatD [prt 0 float])

instance Print Ocaml.Abs.SignedConstant where
  prt i e = case e of
    Ocaml.Abs.Constant constant -> prPrec i 0 (concatD [prt 0 constant])
    Ocaml.Abs.NegInt int -> prPrec i 0 (concatD [doc (showString "-"), prt 0 int])
    Ocaml.Abs.NegFloat float -> prPrec i 0 (concatD [doc (showString "-"), prt 0 float])
    Ocaml.Abs.PosInt int -> prPrec i 0 (concatD [doc (showString "+"), prt 0 int])
    Ocaml.Abs.PosFloat float -> prPrec i 0 (concatD [doc (showString "+"), prt 0 float])

instance Print Ocaml.Abs.OCamlIdent where
  prt i e = case e of
    Ocaml.Abs.Uppercase uident -> prPrec i 0 (concatD [prt 0 uident])
    Ocaml.Abs.Lowercase lident -> prPrec i 0 (concatD [prt 0 lident])

instance Print Ocaml.Abs.ValExtraIdent where
  prt i e = case e of
    Ocaml.Abs.Operator operator -> prPrec i 0 (concatD [doc (showString "("), prt 0 operator, doc (showString ")")])

instance Print Ocaml.Abs.ValIdent where
  prt i e = case e of
    Ocaml.Abs.LowercaseValIdent lident -> prPrec i 0 (concatD [prt 0 lident])
    Ocaml.Abs.ValExtraIdent valextraident -> prPrec i 0 (concatD [prt 0 valextraident])

instance Print Ocaml.Abs.Operator where
  prt i e = case e of
    Ocaml.Abs.PrefixOp prefixop -> prPrec i 0 (concatD [prt 0 prefixop])
    Ocaml.Abs.LetOp letop -> prPrec i 0 (concatD [prt 0 letop])
    Ocaml.Abs.AndOp andop -> prPrec i 0 (concatD [prt 0 andop])
    Ocaml.Abs.ArrayAccessOp dotop indexmod -> prPrec i 0 (concatD [prt 0 dotop, doc (showString "("), prt 0 indexmod, doc (showString ")")])
    Ocaml.Abs.ArrayUpdateOp dotop indexmod -> prPrec i 0 (concatD [prt 0 dotop, doc (showString "("), prt 0 indexmod, doc (showString ")"), doc (showString "<-")])
    Ocaml.Abs.StringAccessOp dotop indexmod -> prPrec i 0 (concatD [prt 0 dotop, doc (showString "["), prt 0 indexmod, doc (showString "]")])
    Ocaml.Abs.StringUpdateOp dotop indexmod -> prPrec i 0 (concatD [prt 0 dotop, doc (showString "["), prt 0 indexmod, doc (showString "]"), doc (showString "<-")])
    Ocaml.Abs.RecordAccessOp dotop indexmod -> prPrec i 0 (concatD [prt 0 dotop, doc (showString "{"), prt 0 indexmod, doc (showString "}")])
    Ocaml.Abs.RecordUpdateOp dotop indexmod -> prPrec i 0 (concatD [prt 0 dotop, doc (showString "{"), prt 0 indexmod, doc (showString "}"), doc (showString "<-")])
    Ocaml.Abs.HashSymbolOp hashop -> prPrec i 0 (concatD [prt 0 hashop])
    Ocaml.Abs.BangOp -> prPrec i 0 (concatD [doc (showString "!")])
    Ocaml.Abs.InfixOp infixoperator -> prPrec i 0 (concatD [prt 0 infixoperator])

instance Print Ocaml.Abs.InfixOperator where
  prt i e = case e of
    Ocaml.Abs.RelOp relop -> prPrec i 0 (concatD [prt 0 relop])
    Ocaml.Abs.ConcatOp concatop -> prPrec i 0 (concatD [prt 0 concatop])
    Ocaml.Abs.PlusMinusOp plusminusop -> prPrec i 0 (concatD [prt 0 plusminusop])
    Ocaml.Abs.MultDivOp multdivop -> prPrec i 0 (concatD [prt 0 multdivop])
    Ocaml.Abs.PowOp powop -> prPrec i 0 (concatD [prt 0 powop])
    Ocaml.Abs.InfixPlus -> prPrec i 0 (concatD [doc (showString "+")])
    Ocaml.Abs.InfixPlusDot -> prPrec i 0 (concatD [doc (showString "+.")])
    Ocaml.Abs.InfixPlusEq -> prPrec i 0 (concatD [doc (showString "+=")])
    Ocaml.Abs.InfixMinus -> prPrec i 0 (concatD [doc (showString "-")])
    Ocaml.Abs.InfixMinusDot -> prPrec i 0 (concatD [doc (showString "-.")])
    Ocaml.Abs.InfixStar -> prPrec i 0 (concatD [doc (showString "*")])
    Ocaml.Abs.InfixPercent -> prPrec i 0 (concatD [doc (showString "%")])
    Ocaml.Abs.InfixEqual -> prPrec i 0 (concatD [doc (showString "=")])
    Ocaml.Abs.InfixLess -> prPrec i 0 (concatD [doc (showString "<")])
    Ocaml.Abs.InfixGreater -> prPrec i 0 (concatD [doc (showString ">")])
    Ocaml.Abs.InfixOr -> prPrec i 0 (concatD [doc (showString "or")])
    Ocaml.Abs.InfixBarBar -> prPrec i 0 (concatD [doc (showString "||")])
    Ocaml.Abs.InfixAmpersand -> prPrec i 0 (concatD [doc (showString "&")])
    Ocaml.Abs.InfixAmpersandAmpersand -> prPrec i 0 (concatD [doc (showString "&&")])
    Ocaml.Abs.InfixColonEqual -> prPrec i 0 (concatD [doc (showString ":=")])

instance Print Ocaml.Abs.IndexMod where
  prt i e = case e of
    Ocaml.Abs.NoIndexMod -> prPrec i 0 (concatD [])
    Ocaml.Abs.SemiDotDot -> prPrec i 0 (concatD [doc (showString ";"), doc (showString "..")])

instance Print Ocaml.Abs.ConstrExtraIdent where
  prt i e = case e of
    Ocaml.Abs.ConstrIdent -> prPrec i 0 (concatD [doc (showString "("), doc (showString "::"), doc (showString ")")])

instance Print Ocaml.Abs.ConstrExtraNonprefixIdent where
  prt i e = case e of
    Ocaml.Abs.Brackets -> prPrec i 0 (concatD [doc (showString "["), doc (showString "]")])
    Ocaml.Abs.Parens -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])
    Ocaml.Abs.FalseLiteral -> prPrec i 0 (concatD [doc (showString "false")])
    Ocaml.Abs.TrueLiteral -> prPrec i 0 (concatD [doc (showString "true")])

instance Print Ocaml.Abs.ConstrIdent where
  prt i e = case e of
    Ocaml.Abs.ConstrUppercaseIdent uident -> prPrec i 0 (concatD [prt 0 uident])
    Ocaml.Abs.ConstrExtraIdent constrextraident -> prPrec i 0 (concatD [prt 0 constrextraident])
    Ocaml.Abs.ConstrExpraNonprefixIdent constrextranonprefixident -> prPrec i 0 (concatD [prt 0 constrextranonprefixident])

instance Print Ocaml.Abs.ConstrLongident where
  prt i e = case e of
    Ocaml.Abs.ModLongidentTodo modlongident -> prPrec i 0 (concatD [prt 0 modlongident])
    Ocaml.Abs.QualifiedConstrExtraLongident modlongident constrextraident -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), prt 0 constrextraident])
    Ocaml.Abs.ConstrExtraLongdent constrextraident -> prPrec i 0 (concatD [prt 0 constrextraident])
    Ocaml.Abs.ConstrExtraNonprefixLonident constrextranonprefixident -> prPrec i 0 (concatD [prt 0 constrextranonprefixident])

instance Print Ocaml.Abs.ValLongident where
  prt i e = case e of
    Ocaml.Abs.ValLongident valident -> prPrec i 0 (concatD [prt 0 valident])
    Ocaml.Abs.QualifiedValLongident modlongident valident -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), prt 0 valident])

instance Print Ocaml.Abs.LabelLongident where
  prt i e = case e of
    Ocaml.Abs.LabelLongident lident -> prPrec i 0 (concatD [prt 0 lident])
    Ocaml.Abs.QualifiedLabelLongident modlongident lident -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), prt 0 lident])

instance Print Ocaml.Abs.TypeLongident where
  prt i e = case e of
    Ocaml.Abs.TypeLongident lident -> prPrec i 0 (concatD [prt 0 lident])
    Ocaml.Abs.QualifiedTypelLongident modextlongident lident -> prPrec i 0 (concatD [prt 0 modextlongident, doc (showString "."), prt 0 lident])

instance Print Ocaml.Abs.ModLongident where
  prt i e = case e of
    Ocaml.Abs.ModLongident uident -> prPrec i 0 (concatD [prt 0 uident])
    Ocaml.Abs.QualifiedModLongident modlongident uident -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), prt 0 uident])

instance Print Ocaml.Abs.ModExtLongident where
  prt i e = case e of
    Ocaml.Abs.ModExtLongident uident -> prPrec i 0 (concatD [prt 0 uident])
    Ocaml.Abs.QualifiedModExtLongident modextlongident uident -> prPrec i 0 (concatD [prt 0 modextlongident, doc (showString "."), prt 0 uident])
    Ocaml.Abs.ParenModExtLongident modextlongident1 modextlongident2 -> prPrec i 0 (concatD [prt 0 modextlongident1, doc (showString "("), prt 0 modextlongident2, doc (showString ")")])

instance Print Ocaml.Abs.MtyLongident where
  prt i e = case e of
    Ocaml.Abs.MtyLongident ocamlident -> prPrec i 0 (concatD [prt 0 ocamlident])
    Ocaml.Abs.QualifiedMtyLongident modextlongident ocamlident -> prPrec i 0 (concatD [prt 0 modextlongident, doc (showString "."), prt 0 ocamlident])

instance Print Ocaml.Abs.CltyLongident where
  prt i e = case e of
    Ocaml.Abs.CltyLongident lident -> prPrec i 0 (concatD [prt 0 lident])
    Ocaml.Abs.QualifiedCltyLongident modextlongident lident -> prPrec i 0 (concatD [prt 0 modextlongident, doc (showString "."), prt 0 lident])

instance Print Ocaml.Abs.ClassLongident where
  prt i e = case e of
    Ocaml.Abs.ClassLongident lident -> prPrec i 0 (concatD [prt 0 lident])
    Ocaml.Abs.QualifiedClassLongident modlongident lident -> prPrec i 0 (concatD [prt 0 modlongident, doc (showString "."), prt 0 lident])

instance Print Ocaml.Abs.OptionalToplevelDirectiveArgument where
  prt i e = case e of
    Ocaml.Abs.NoToplevelDirectiveArgument -> prPrec i 0 (concatD [])
    Ocaml.Abs.AToplevelDirectiveArgument topleveldirectiveargument -> prPrec i 0 (concatD [prt 0 topleveldirectiveargument])

instance Print Ocaml.Abs.ToplevelDirective where
  prt i e = case e of
    Ocaml.Abs.ToplevelDirectiveApp id topleveldirectiveargument -> prPrec i 0 (concatD [doc (showString "#"), prt 0 id, prt 0 topleveldirectiveargument])

instance Print Ocaml.Abs.ToplevelDirectiveArgument where
  prt i e = case e of
    Ocaml.Abs.ToplevelString str -> prPrec i 0 (concatD [prt 0 str])
    Ocaml.Abs.ToplevelInt n -> prPrec i 0 (concatD [prt 0 n])
    Ocaml.Abs.ValueIdent vallongident -> prPrec i 0 (concatD [prt 0 vallongident])
    Ocaml.Abs.ToplevelModuleIdent modlongident -> prPrec i 0 (concatD [prt 0 modlongident])
    Ocaml.Abs.ToplevelFalse -> prPrec i 0 (concatD [doc (showString "false")])
    Ocaml.Abs.ToplevelTrue -> prPrec i 0 (concatD [doc (showString "true")])

instance Print Ocaml.Abs.RawString where
  prt i e = case e of
    Ocaml.Abs.RawString str -> prPrec i 0 (concatD [prt 0 str])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.NameTag where
  prt i e = case e of
    Ocaml.Abs.NameTag id -> prPrec i 0 (concatD [doc (showString "`"), prt 0 id])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.RecFlag where
  prt i e = case e of
    Ocaml.Abs.Nonrecursive -> prPrec i 0 (concatD [])
    Ocaml.Abs.Recursive -> prPrec i 0 (concatD [doc (showString "rec")])

instance Print Ocaml.Abs.NonrecFlag where
  prt i e = case e of
    Ocaml.Abs.NoNonrecFlag -> prPrec i 0 (concatD [])
    Ocaml.Abs.ANonrecFlag -> prPrec i 0 (concatD [doc (showString "nonrec")])

instance Print Ocaml.Abs.DirectionFlag where
  prt i e = case e of
    Ocaml.Abs.UpTo -> prPrec i 0 (concatD [doc (showString "to")])
    Ocaml.Abs.DownTo -> prPrec i 0 (concatD [doc (showString "downto")])

instance Print Ocaml.Abs.PrivateFlag where
  prt i e = case e of
    Ocaml.Abs.Public -> prPrec i 0 (concatD [])
    Ocaml.Abs.Private -> prPrec i 0 (concatD [doc (showString "private")])

instance Print Ocaml.Abs.InlinePrivateFlag where
  prt i e = case e of
    Ocaml.Abs.InlinePublic -> prPrec i 0 (concatD [])
    Ocaml.Abs.InlinePrivate -> prPrec i 0 (concatD [doc (showString "private")])

instance Print Ocaml.Abs.MutableFlag where
  prt i e = case e of
    Ocaml.Abs.Immutable -> prPrec i 0 (concatD [])
    Ocaml.Abs.Mutable -> prPrec i 0 (concatD [doc (showString "mutable")])

instance Print Ocaml.Abs.VirtualFlag where
  prt i e = case e of
    Ocaml.Abs.Concrete -> prPrec i 0 (concatD [])
    Ocaml.Abs.Virtual -> prPrec i 0 (concatD [doc (showString "virtual")])

instance Print Ocaml.Abs.MutableVirtualFlags where
  prt i e = case e of
    Ocaml.Abs.ImmutableContrete -> prPrec i 0 (concatD [])
    Ocaml.Abs.MutableConcrete -> prPrec i 0 (concatD [doc (showString "mutable")])
    Ocaml.Abs.ImmutableVirtual -> prPrec i 0 (concatD [doc (showString "virtual")])
    Ocaml.Abs.MutableVirtual -> prPrec i 0 (concatD [doc (showString "mutable"), doc (showString "virtual")])
    Ocaml.Abs.VirtualMutable -> prPrec i 0 (concatD [doc (showString "virtual"), doc (showString "mutable")])

instance Print Ocaml.Abs.PrivateVirtualFlags where
  prt i e = case e of
    Ocaml.Abs.PublicConcrete -> prPrec i 0 (concatD [])
    Ocaml.Abs.PrivateConcrete -> prPrec i 0 (concatD [doc (showString "private")])
    Ocaml.Abs.PublicVirtual -> prPrec i 0 (concatD [doc (showString "virtual")])
    Ocaml.Abs.PrivateVirtual -> prPrec i 0 (concatD [doc (showString "private"), doc (showString "virtual")])
    Ocaml.Abs.VirtualPrivate -> prPrec i 0 (concatD [doc (showString "virtual"), doc (showString "private")])

instance Print Ocaml.Abs.VirtualWithMutableFlag where
  prt i e = case e of
    Ocaml.Abs.VirtualWithImmutable -> prPrec i 0 (concatD [doc (showString "virtual")])
    Ocaml.Abs.MutableWithVirtual -> prPrec i 0 (concatD [doc (showString "mutable"), doc (showString "virtual")])
    Ocaml.Abs.VirtualWithMutable -> prPrec i 0 (concatD [doc (showString "virtual"), doc (showString "mutable")])
    Ocaml.Abs.PrivateWithVirtual -> prPrec i 0 (concatD [doc (showString "private"), doc (showString "virtual")])
    Ocaml.Abs.VirtualWithPrivate -> prPrec i 0 (concatD [doc (showString "virtual"), doc (showString "private")])

instance Print Ocaml.Abs.VirtualWithPrivateFlag where
  prt i e = case e of
    Ocaml.Abs.VirtualWithPublic -> prPrec i 0 (concatD [doc (showString "virtual")])

instance Print Ocaml.Abs.NoOverrideFlag where
  prt i e = case e of
    Ocaml.Abs.NoFlag -> prPrec i 0 (concatD [])

instance Print Ocaml.Abs.OverrideFlag where
  prt i e = case e of
    Ocaml.Abs.Fresh -> prPrec i 0 (concatD [])
    Ocaml.Abs.Override -> prPrec i 0 (concatD [doc (showString "!")])

instance Print Ocaml.Abs.Subtractive where
  prt i e = case e of
    Ocaml.Abs.Minus -> prPrec i 0 (concatD [doc (showString "-")])
    Ocaml.Abs.MinusDot -> prPrec i 0 (concatD [doc (showString "-.")])

instance Print Ocaml.Abs.Additive where
  prt i e = case e of
    Ocaml.Abs.Plus -> prPrec i 0 (concatD [doc (showString "+")])
    Ocaml.Abs.PlusDot -> prPrec i 0 (concatD [doc (showString "+.")])

instance Print Ocaml.Abs.AttrId where
  prt i e = case e of
    Ocaml.Abs.LowercaseAttr lident -> prPrec i 0 (concatD [prt 0 lident])
    Ocaml.Abs.UppercaseAttr uident -> prPrec i 0 (concatD [prt 0 uident])
    Ocaml.Abs.AndAttr -> prPrec i 0 (concatD [doc (showString "and")])
    Ocaml.Abs.AsAttr -> prPrec i 0 (concatD [doc (showString "as")])
    Ocaml.Abs.AssertAttr -> prPrec i 0 (concatD [doc (showString "assert")])
    Ocaml.Abs.BeginAttr -> prPrec i 0 (concatD [doc (showString "begin")])
    Ocaml.Abs.ClassAttr -> prPrec i 0 (concatD [doc (showString "class")])
    Ocaml.Abs.ConstraintAttr -> prPrec i 0 (concatD [doc (showString "constraint")])
    Ocaml.Abs.DoAttr -> prPrec i 0 (concatD [doc (showString "do")])
    Ocaml.Abs.DoneAttr -> prPrec i 0 (concatD [doc (showString "done")])
    Ocaml.Abs.DowntoAttr -> prPrec i 0 (concatD [doc (showString "downto")])
    Ocaml.Abs.ElseAttr -> prPrec i 0 (concatD [doc (showString "else")])
    Ocaml.Abs.EndAttr -> prPrec i 0 (concatD [doc (showString "end")])
    Ocaml.Abs.ExceptionAttr -> prPrec i 0 (concatD [doc (showString "exception")])
    Ocaml.Abs.ExternalAttr -> prPrec i 0 (concatD [doc (showString "external")])
    Ocaml.Abs.FalseAttr -> prPrec i 0 (concatD [doc (showString "false")])
    Ocaml.Abs.ForAttr -> prPrec i 0 (concatD [doc (showString "for")])
    Ocaml.Abs.FunAttr -> prPrec i 0 (concatD [doc (showString "fun")])
    Ocaml.Abs.FunctionAttr -> prPrec i 0 (concatD [doc (showString "function")])
    Ocaml.Abs.FunctorAttr -> prPrec i 0 (concatD [doc (showString "functor")])
    Ocaml.Abs.IfAttr -> prPrec i 0 (concatD [doc (showString "if")])
    Ocaml.Abs.InAttr -> prPrec i 0 (concatD [doc (showString "in")])
    Ocaml.Abs.IncludeAttr -> prPrec i 0 (concatD [doc (showString "include")])
    Ocaml.Abs.InheritAttr -> prPrec i 0 (concatD [doc (showString "inherit")])
    Ocaml.Abs.InitializerAttr -> prPrec i 0 (concatD [doc (showString "initializer")])
    Ocaml.Abs.LazyAttr -> prPrec i 0 (concatD [doc (showString "lazy")])
    Ocaml.Abs.LetAttr -> prPrec i 0 (concatD [doc (showString "let")])
    Ocaml.Abs.MatchAttr -> prPrec i 0 (concatD [doc (showString "match")])
    Ocaml.Abs.MethodAttr -> prPrec i 0 (concatD [doc (showString "method")])
    Ocaml.Abs.ModuleAttr -> prPrec i 0 (concatD [doc (showString "module")])
    Ocaml.Abs.MutableAttr -> prPrec i 0 (concatD [doc (showString "mutable")])
    Ocaml.Abs.NewAttr -> prPrec i 0 (concatD [doc (showString "new")])
    Ocaml.Abs.NonrecAttr -> prPrec i 0 (concatD [doc (showString "nonrec")])
    Ocaml.Abs.ObjectAttr -> prPrec i 0 (concatD [doc (showString "object")])
    Ocaml.Abs.OfAttr -> prPrec i 0 (concatD [doc (showString "of")])
    Ocaml.Abs.OpenAttr -> prPrec i 0 (concatD [doc (showString "open")])
    Ocaml.Abs.OrAttr -> prPrec i 0 (concatD [doc (showString "or")])
    Ocaml.Abs.PrivateAttr -> prPrec i 0 (concatD [doc (showString "private")])
    Ocaml.Abs.RecAttr -> prPrec i 0 (concatD [doc (showString "rec")])
    Ocaml.Abs.SigAttr -> prPrec i 0 (concatD [doc (showString "sig")])
    Ocaml.Abs.StructAttr -> prPrec i 0 (concatD [doc (showString "struct")])
    Ocaml.Abs.ThenAttr -> prPrec i 0 (concatD [doc (showString "then")])
    Ocaml.Abs.ToAttr -> prPrec i 0 (concatD [doc (showString "to")])
    Ocaml.Abs.TrueAttr -> prPrec i 0 (concatD [doc (showString "true")])
    Ocaml.Abs.TryAttr -> prPrec i 0 (concatD [doc (showString "try")])
    Ocaml.Abs.TypeAttr -> prPrec i 0 (concatD [doc (showString "type")])
    Ocaml.Abs.ValAttr -> prPrec i 0 (concatD [doc (showString "val")])
    Ocaml.Abs.VirtualAttr -> prPrec i 0 (concatD [doc (showString "virtual")])
    Ocaml.Abs.WhenAttr -> prPrec i 0 (concatD [doc (showString "when")])
    Ocaml.Abs.WhileAttr -> prPrec i 0 (concatD [doc (showString "while")])
    Ocaml.Abs.WithAttr -> prPrec i 0 (concatD [doc (showString "with")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "."), prt 0 xs]

instance Print [Ocaml.Abs.AttrId] where
  prt = prtList

instance Print Ocaml.Abs.Attribute where
  prt i e = case e of
    Ocaml.Abs.Attribute attrids attrpayload -> prPrec i 0 (concatD [doc (showString "[@"), prt 0 attrids, prt 0 attrpayload, doc (showString "]")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.PostItemAttribute where
  prt i e = case e of
    Ocaml.Abs.PostItemAttribute attrids attrpayload -> prPrec i 0 (concatD [doc (showString "[@@"), prt 0 attrids, prt 0 attrpayload, doc (showString "]")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Ocaml.Abs.FloatingAttribute where
  prt i e = case e of
    Ocaml.Abs.FloatingAttribute attrids attrpayload -> prPrec i 0 (concatD [doc (showString "[@@@"), prt 0 attrids, prt 0 attrpayload, doc (showString "]")])

instance Print [Ocaml.Abs.PostItemAttribute] where
  prt = prtList

instance Print [Ocaml.Abs.Attribute] where
  prt = prtList

instance Print Ocaml.Abs.Ext where
  prt i e = case e of
    Ocaml.Abs.NoExt -> prPrec i 0 (concatD [])
    Ocaml.Abs.Ext attrids -> prPrec i 0 (concatD [doc (showString "%"), prt 0 attrids])

instance Print Ocaml.Abs.Extension where
  prt i e = case e of
    Ocaml.Abs.ExtensionPayload attrids payload -> prPrec i 0 (concatD [doc (showString "[%"), prt 0 attrids, prt 0 payload, doc (showString "]")])
    Ocaml.Abs.QuotedStringExpr quotedstringexpr -> prPrec i 0 (concatD [prt 0 quotedstringexpr])

instance Print Ocaml.Abs.ItemExtension where
  prt i e = case e of
    Ocaml.Abs.ItemExtensionPayload attrids payload -> prPrec i 0 (concatD [doc (showString "[%%"), prt 0 attrids, prt 0 payload, doc (showString "]")])
    Ocaml.Abs.QuotedStringItem quotedstringitem -> prPrec i 0 (concatD [prt 0 quotedstringitem])

instance Print Ocaml.Abs.Payload where
  prt i e = case e of
    Ocaml.Abs.PayloadStructure structure -> prPrec i 0 (concatD [prt 0 structure])
    Ocaml.Abs.PayloadSignature signature -> prPrec i 0 (concatD [doc (showString ":"), prt 0 signature])
    Ocaml.Abs.PayloadCoreType coretype -> prPrec i 0 (concatD [doc (showString ":"), prt 0 coretype])
    Ocaml.Abs.PayloadPattern pattern -> prPrec i 0 (concatD [doc (showString "?"), prt 0 pattern])
    Ocaml.Abs.PayloadGuardedPattern pattern seqexpr -> prPrec i 0 (concatD [doc (showString "?"), prt 0 pattern, doc (showString "when"), prt 0 seqexpr])

instance Print Ocaml.Abs.AttrPayload where
  prt i e = case e of
    Ocaml.Abs.AttrPayload payload -> prPrec i 0 (concatD [prt 0 payload])

