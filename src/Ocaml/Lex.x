-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module Ocaml.Lex where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \{ \% | \| | \{ \% \% | \; \; | \( | \) | \: | \_ | \- \> | \: \> | \= | \: \= | \[ | \] | \. | \, | \; | \% | \? | \~ | \: \: | \< \- | \{ | \} | \! | \{ \< | \> \} | \# | \[ \| | \| \] | \. \. | \' | \+ | \- | \+ \! | \! \+ | \- \! | \! \- | \+ \= | \* | \[ \> | \[ \< | \> | \< | \& | \+ \. | \- \. | \| \| | \& \& | \` | \[ \@ | \[ \@ \@ | \[ \@ \@ \@ | \[ \% | \[ \% \%

:-
"(*" ([$u # \*] | \*+ [$u # [\* \)]])* ("*")+ ")" ;

$white+ ;
@rsyms
    { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
\' $u \'
    { tok (\p s -> PT p (eitherResIdent (T_CHAR . share) s)) }
$d ($d | \_)* (\. ($d | \_)*)? ([e E][\+ \-]? $d ($d | \_)*)| 0 [x X]($d | $l)($d | $l | \_)* (\. ($d | $l | \_)*)? ([p P][\+ \-]$d)?
    { tok (\p s -> PT p (eitherResIdent (T_FLOAT . share) s)) }
[\= \< \> \| \& \$][\! \$ \% \& \* \+ \- \. \/ \: \< \= \> \? \@ \^ \| \~]*
    { tok (\p s -> PT p (eitherResIdent (T_RELOP . share) s)) }
[\@ \^][\! \$ \% \& \* \+ \- \. \/ \: \< \= \> \? \@ \^ \| \~]*
    { tok (\p s -> PT p (eitherResIdent (T_CONCATOP . share) s)) }
[\+ \-][\! \$ \% \& \* \+ \- \. \/ \: \< \= \> \? \@ \^ \| \~]*
    { tok (\p s -> PT p (eitherResIdent (T_PLUSMINUSOP . share) s)) }
[\* \/ \%][\! \$ \% \& \* \+ \- \. \/ \: \< \= \> \? \@ \^ \| \~]*
    { tok (\p s -> PT p (eitherResIdent (T_MULTDIVOP . share) s)) }
\* \* [\! \$ \% \& \* \+ \- \. \/ \: \< \= \> \? \@ \^ \| \~]*
    { tok (\p s -> PT p (eitherResIdent (T_POWOP . share) s)) }
\. [\$ \& \* \+ \- \/ \< \= \> \@ \^ \|][\! \$ \% \& \* \+ \- \. \/ \: \< \= \> \? \@ \^ \| \~]*
    { tok (\p s -> PT p (eitherResIdent (T_DOTOP . share) s)) }
l e t [\$ \& \* \+ \- \/ \< \= \> \@ \^ \|][\$ \& \* \+ \- \/ \< \= \> \@ \^ \|]*
    { tok (\p s -> PT p (eitherResIdent (T_LETOP . share) s)) }
a n d [\$ \& \* \+ \- \/ \< \= \> \@ \^ \|][\$ \& \* \+ \- \/ \< \= \> \@ \^ \|]*
    { tok (\p s -> PT p (eitherResIdent (T_ANDOP . share) s)) }
$d ($d | \_)*
    { tok (\p s -> PT p (eitherResIdent (T_DecimalLiteral . share) s)) }
$d ($d | \_)* [G H I J K L M N O P Q R S T U V W X Y Z g h i j k l m n o p q r s t u v w x y z]
    { tok (\p s -> PT p (eitherResIdent (T_DecimalLiteralModifier . share) s)) }
0 [x X]($d | $l)($d | $l | \_)*
    { tok (\p s -> PT p (eitherResIdent (T_HexLiteral . share) s)) }
0 [x X]($d | $l)($d | $l | \_)* [G H I J K L M N O P Q R S T U V W X Y Z g h i j k l m n o p q r s t u v w x y z]
    { tok (\p s -> PT p (eitherResIdent (T_HexLiteralModifier . share) s)) }
0 [o O][0 1 2 3 4 5 6 7][0 1 2 3 4 5 6 7 \_]*
    { tok (\p s -> PT p (eitherResIdent (T_OctLiteral . share) s)) }
0 [o O][0 1 2 3 4 5 6 7][0 1 2 3 4 5 6 7 \_]* [G H I J K L M N O P Q R S T U V W X Y Z g h i j k l m n o p q r s t u v w x y z]
    { tok (\p s -> PT p (eitherResIdent (T_OctLiteralModifier . share) s)) }
0 [b B][0 1][0 1 \_]*
    { tok (\p s -> PT p (eitherResIdent (T_BinLiteral . share) s)) }
0 [b B][0 1][0 1 \_]* [G H I J K L M N O P Q R S T U V W X Y Z g h i j k l m n o p q r s t u v w x y z]
    { tok (\p s -> PT p (eitherResIdent (T_BinLiteralModifier . share) s)) }
\~ ($l | $d | \_)($l | $d | \_)* \:
    { tok (\p s -> PT p (eitherResIdent (T_LABEL . share) s)) }
$s ($l | $d | \_ | \')*
    { tok (\p s -> PT p (eitherResIdent (T_LIDENT . share) s)) }
\? ($l | $d | \_)($l | $d | \_)* \:
    { tok (\p s -> PT p (eitherResIdent (T_OPTLABEL . share) s)) }
\! [\~ \! \? \% \< \: \. \$ \& \* \+ \- \/ \= \> \@ \^ \|]| (\? | \~)[\~ \! \? \% \< \: \. \$ \& \* \+ \- \/ \= \> \@ \^ \|]+
    { tok (\p s -> PT p (eitherResIdent (T_PREFIXOP . share) s)) }
\# [\~ \! \? \% \< \: \. \$ \& \* \+ \- \/ \= \> \@ \^ \|]+
    { tok (\p s -> PT p (eitherResIdent (T_HASHOP . share) s)) }
\" $u * \"
    { tok (\p s -> PT p (eitherResIdent (T_STRING . share) s)) }
$l ($l | $d | \_)* (\. $l ($l | $d | \_)*)*
    { tok (\p s -> PT p (eitherResIdent (T_ExtAttrIdent . share) s)) }
$c ($l | $d | \_ | \')*
    { tok (\p s -> PT p (eitherResIdent (T_UIDENT . share) s)) }

$l $i*
    { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (\p s -> PT p (TL $ share $ unescapeInitTail s)) }

$d+
    { tok (\p s -> PT p (TI $ share s))    }


{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_CHAR !String
 | T_FLOAT !String
 | T_RELOP !String
 | T_CONCATOP !String
 | T_PLUSMINUSOP !String
 | T_MULTDIVOP !String
 | T_POWOP !String
 | T_DOTOP !String
 | T_LETOP !String
 | T_ANDOP !String
 | T_DecimalLiteral !String
 | T_DecimalLiteralModifier !String
 | T_HexLiteral !String
 | T_HexLiteralModifier !String
 | T_OctLiteral !String
 | T_OctLiteralModifier !String
 | T_BinLiteral !String
 | T_BinLiteralModifier !String
 | T_LABEL !String
 | T_LIDENT !String
 | T_OPTLABEL !String
 | T_PREFIXOP !String
 | T_HASHOP !String
 | T_STRING !String
 | T_ExtAttrIdent !String
 | T_UIDENT !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos [] = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"
  PT _ (T_CHAR s) -> s
  PT _ (T_FLOAT s) -> s
  PT _ (T_RELOP s) -> s
  PT _ (T_CONCATOP s) -> s
  PT _ (T_PLUSMINUSOP s) -> s
  PT _ (T_MULTDIVOP s) -> s
  PT _ (T_POWOP s) -> s
  PT _ (T_DOTOP s) -> s
  PT _ (T_LETOP s) -> s
  PT _ (T_ANDOP s) -> s
  PT _ (T_DecimalLiteral s) -> s
  PT _ (T_DecimalLiteralModifier s) -> s
  PT _ (T_HexLiteral s) -> s
  PT _ (T_HexLiteralModifier s) -> s
  PT _ (T_OctLiteral s) -> s
  PT _ (T_OctLiteralModifier s) -> s
  PT _ (T_BinLiteral s) -> s
  PT _ (T_BinLiteralModifier s) -> s
  PT _ (T_LABEL s) -> s
  PT _ (T_LIDENT s) -> s
  PT _ (T_OPTLABEL s) -> s
  PT _ (T_PREFIXOP s) -> s
  PT _ (T_HASHOP s) -> s
  PT _ (T_STRING s) -> s
  PT _ (T_ExtAttrIdent s) -> s
  PT _ (T_UIDENT s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "do" 53 (b ";" 27 (b "+." 14 (b "&&" 7 (b "#" 4 (b "!+" 2 (b "!" 1 N N) (b "!-" 3 N N)) (b "&" 6 (b "%" 5 N N) N)) (b "*" 11 (b "(" 9 (b "'" 8 N N) (b ")" 10 N N)) (b "+!" 13 (b "+" 12 N N) N))) (b "." 21 (b "-!" 18 (b "," 16 (b "+=" 15 N N) (b "-" 17 N N)) (b "->" 20 (b "-." 19 N N) N)) (b "::" 24 (b ":" 23 (b ".." 22 N N) N) (b ":>" 26 (b ":=" 25 N N) N)))) (b "[@" 40 (b "?" 34 (b "=" 31 (b "<" 29 (b ";;" 28 N N) (b "<-" 30 N N)) (b ">}" 33 (b ">" 32 N N) N)) (b "[%%" 37 (b "[%" 36 (b "[" 35 N N) N) (b "[>" 39 (b "[<" 38 N N) N))) (b "and" 47 (b "]" 44 (b "[@@@" 42 (b "[@@" 41 N N) (b "[|" 43 N N)) (b "`" 46 (b "_" 45 N N) N)) (b "begin" 50 (b "assert" 49 (b "as" 48 N N) N) (b "constraint" 52 (b "class" 51 N N) N))))) (b "of" 79 (b "in" 66 (b "false" 60 (b "end" 57 (b "downto" 55 (b "done" 54 N N) (b "else" 56 N N)) (b "external" 59 (b "exception" 58 N N) N)) (b "function" 63 (b "fun" 62 (b "for" 61 N N) N) (b "if" 65 (b "functor" 64 N N) N))) (b "method" 73 (b "lazy" 70 (b "inherit" 68 (b "include" 67 N N) (b "initializer" 69 N N)) (b "match" 72 (b "let" 71 N N) N)) (b "new" 76 (b "mutable" 75 (b "module" 74 N N) N) (b "object" 78 (b "nonrec" 77 N N) N)))) (b "virtual" 92 (b "then" 86 (b "rec" 83 (b "or" 81 (b "open" 80 N N) (b "private" 82 N N)) (b "struct" 85 (b "sig" 84 N N) N)) (b "try" 89 (b "true" 88 (b "to" 87 N N) N) (b "val" 91 (b "type" 90 N N) N))) (b "{<" 99 (b "{" 96 (b "while" 94 (b "when" 93 N N) (b "with" 95 N N)) (b "{%%" 98 (b "{%" 97 N N) N)) (b "||" 102 (b "|]" 101 (b "|" 100 N N) N) (b "~" 104 (b "}" 103 N N) N)))))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
